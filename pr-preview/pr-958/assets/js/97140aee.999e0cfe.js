"use strict";(self.webpackChunkopenfga_dev=self.webpackChunkopenfga_dev||[]).push([[8603],{71006:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"content/modeling/advanced/entitlements","title":"Entitlements","description":"Modeling entitlements for a system","source":"@site/docs/content/modeling/advanced/entitlements.mdx","sourceDirName":"content/modeling/advanced","slug":"/modeling/advanced/entitlements","permalink":"/pr-preview/pr-958/docs/modeling/advanced/entitlements","draft":false,"unlisted":false,"editUrl":"https://github.com/openfga/openfga.dev/edit/main/docs/content/modeling/advanced/entitlements.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Entitlements","description":"Modeling entitlements for a system","sidebar_position":1,"slug":"/modeling/advanced/entitlements"},"sidebar":"docs","previous":{"title":"IoT","permalink":"/pr-preview/pr-958/docs/modeling/advanced/iot"},"next":{"title":"Model Migrations","permalink":"/pr-preview/pr-958/docs/modeling/migrating"}}');var n=t(74848),r=t(28453),a=t(89987);const o={title:"Entitlements",description:"Modeling entitlements for a system",sidebar_position:1,slug:"/modeling/advanced/entitlements"},l="Modeling Entitlements for a System with ",c={},d=[{value:"Before you start",id:"before-you-start",level:2},{value:"<ProductName></ProductName> concepts",id:"-concepts",level:3},{value:"Modeling object-to-object relationships",id:"modeling-object-to-object-relationships",level:4},{value:"Direct relationships",id:"direct-relationships",level:4},{value:"Concepts &amp; configuration language",id:"concepts--configuration-language",level:4},{value:"What you will be modeling",id:"what-you-will-be-modeling",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Defined scenarios",id:"defined-scenarios",level:3},{value:"Modeling entitlements for GitHub",id:"modeling-entitlements-for-github",level:2},{value:"01. Building The Initial Authorization Model And Relationship Tuples",id:"01-building-the-initial-authorization-model-and-relationship-tuples",level:3},{value:"02. Populating the relationship tuples",id:"02-populating-the-relationship-tuples",level:3},{value:"Verification",id:"verification",level:4},{value:"03. Updating the authorization model",id:"03-updating-the-authorization-model",level:3},{value:"Adding modeling pattern of parent-child objects",id:"adding-modeling-pattern-of-parent-child-objects",level:4},{value:"Adding Subscriber Relationship With Another Object Related To x associated_plan",id:"adding-subscriber-relationship-with-another-object-related-to-x-associated_plan",level:4},{value:"Disallow direct relationship",id:"disallow-direct-relationship",level:4},{value:"Verification",id:"verification-1",level:4},{value:"Summary",id:"summary",level:2}];function h(e){const s={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components},{Details:i}=s;return i||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsxs)(s.h1,{id:"modeling-entitlements-for-a-system-with-",children:["Modeling Entitlements for a System with ",(0,n.jsx)(a.bU,{format:a.Ed.ShortForm})]})}),"\n",(0,n.jsx)(a.ZE,{}),"\n",(0,n.jsxs)(s.p,{children:["This tutorial explains how to model entitlements for a platform like GitHub using ",(0,n.jsx)(a.bU,{format:a.Ed.ShortForm}),"."]}),"\n",(0,n.jsx)(a.u6,{title:"What you will learn",children:(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["How to model an entitlement use case in ",(0,n.jsx)(a.bU,{format:a.Ed.ProductLink})]}),"\n",(0,n.jsxs)(s.li,{children:["How to start with a given set of requirements and scenarios and iterate on the ",(0,n.jsx)(a.bU,{format:a.Ed.ShortForm})," model until those requirements are met"]}),"\n"]})}),"\n",(0,n.jsx)(a.QF,{title:"Entitlements",preset:"entitlements",example:"Entitlements",store:"entitlements"}),"\n",(0,n.jsx)(s.h2,{id:"before-you-start",children:"Before you start"}),"\n",(0,n.jsxs)(s.p,{children:["In order to understand this guide correctly you must be familiar with some ",(0,n.jsx)(a.bU,{format:a.Ed.LongForm})," concepts and know how to develop the things that we will list below."]}),"\n",(0,n.jsxs)(i,{children:[(0,n.jsxs)("summary",{children:[(0,n.jsxs)(s.h3,{id:"-concepts",children:[(0,n.jsx)(a.bU,{format:a.Ed.ShortForm})," concepts"]}),(0,n.jsxs)(s.p,{children:["It would be helpful to have an understanding of some concepts of ",(0,n.jsx)(a.bU,{format:a.Ed.ShortForm})," before you start."]})]}),(0,n.jsx)(s.h4,{id:"modeling-object-to-object-relationships",children:"Modeling object-to-object relationships"}),(0,n.jsxs)(s.p,{children:["You need to know how to create relationships between objects and how that might affect a user's relationships to those objects. ",(0,n.jsx)(s.a,{href:"/pr-preview/pr-958/docs/modeling/building-blocks/object-to-object-relationships",children:"Learn more \u2192"})]}),(0,n.jsx)(s.p,{children:"Used here to indicate that members of an org are subscriber members of the plan the org is subscriber to, and subscriber members of a plan get access to all the plan's features."}),(0,n.jsx)(s.h4,{id:"direct-relationships",children:"Direct relationships"}),(0,n.jsxs)(s.p,{children:["You need to know how to disallow granting direct relation to an object and requiring the user to have a relation with another object that would imply a relation with the first one. ",(0,n.jsx)(s.a,{href:"/pr-preview/pr-958/docs/modeling/building-blocks/direct-relationships",children:"Learn more \u2192"})]}),(0,n.jsx)(s.p,{children:'Used here to indicate that "access" to a feature cannot be directly granted to a user, but is implied through the users organization subscribing to a plan that offers that feature.'}),(0,n.jsx)(s.h4,{id:"concepts--configuration-language",children:"Concepts & configuration language"}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["Some ",(0,n.jsx)(a.OK,{})]}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"/pr-preview/pr-958/docs/configuration-language",children:"Configuration Language"})}),"\n"]})]}),"\n",(0,n.jsx)(s.h2,{id:"what-you-will-be-modeling",children:"What you will be modeling"}),"\n",(0,n.jsxs)(s.p,{children:["In many product offerings, the features are behind multiple tiers. In this tutorial, you will build an authorization model for a subset of ",(0,n.jsx)(s.a,{href:"https://github.com/pricing",children:"GitHub's entitlements"})," (detailed below) using ",(0,n.jsx)(a.bU,{format:a.Ed.LongForm}),". You will use some scenarios to validate the model."]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{alt:"GitHub Pricing Plan",src:t(55885).A+"",width:"1200",height:"763"})}),"\n",(0,n.jsx)(s.p,{children:'At their core, entitlements is just asking: does a user X have access to feature Y? In GitHub\'s case for example, they have a concept called "Draft Pull Requests". Once the user loads the Pull Request page, the frontend needs to know whether it can show the "Draft Pull Request" option, as in it needs to know: "Does the current user have access to feature Draft Pull Request?".'}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.img,{alt:"GitHub PR Page with Draft Pull Request",src:t(17379).A+"",width:"1796",height:"756"}),"\n",(0,n.jsx)(s.img,{alt:"GitHub PR Page without Draft Pull Request",src:t(52275).A+"",width:"1796",height:"756"})]}),"\n",(0,n.jsxs)(s.blockquote,{children:["\n",(0,n.jsx)(s.p,{children:"Note: For brevity, this tutorial will not model all of GitHub entitlements. Instead, it will focus on modeling for the scenarios outlined below"}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"requirements",children:"Requirements"}),"\n",(0,n.jsx)(s.p,{children:"You will model an entitlement system similar to GitHub's, focusing on a few scenarios."}),"\n",(0,n.jsx)(s.p,{children:'GitHub has 3 plans: "Free", "Team" and "Enterprise", with each of them offering several features. The higher-priced plans include all the features of the lower priced plans. You will be focusing on a subset of the features offered.'}),"\n",(0,n.jsx)(s.p,{children:"A summary of GitHub's entitlement system:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["Free","\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Issues"}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["Team","\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.em,{children:"Everything from the free plan"})}),"\n",(0,n.jsx)(s.li,{children:"Draft Pull Requests"}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["Enterprise","\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.em,{children:"Everything from the team plan"})}),"\n",(0,n.jsx)(s.li,{children:"SAML Single Sign-On"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"defined-scenarios",children:"Defined scenarios"}),"\n",(0,n.jsx)(s.p,{children:"Use the following scenarios to be able to validate whether the model of the requirements is correct."}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsx)(s.p,{children:"Take these three organizations"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["Alpha Beta Gamma (",(0,n.jsx)(s.code,{children:"alpha"}),"), a ",(0,n.jsx)(s.strong,{children:"subscriber"})," on the ",(0,n.jsx)(s.strong,{children:"free"})," plan"]}),"\n",(0,n.jsxs)(s.li,{children:["Bayer Water Supplies (",(0,n.jsx)(s.code,{children:"bayer"}),"), a ",(0,n.jsx)(s.strong,{children:"subscriber"})," on the ",(0,n.jsx)(s.strong,{children:"team"})," plan"]}),"\n",(0,n.jsxs)(s.li,{children:["Cups and Dishes (",(0,n.jsx)(s.code,{children:"cups"}),"), a ",(0,n.jsx)(s.strong,{children:"subscriber"})," on the ",(0,n.jsx)(s.strong,{children:"enterprise"})," plan"]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsx)(s.p,{children:"Take these three users"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Anne"}),", ",(0,n.jsx)(s.strong,{children:"member"})," of ",(0,n.jsx)(s.strong,{children:"Alpha Beta Gamma"})]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Beth"}),", ",(0,n.jsx)(s.strong,{children:"member"})," of ",(0,n.jsx)(s.strong,{children:"Bayer Water Supplies"})]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Charles"}),", ",(0,n.jsx)(s.strong,{children:"member"})," of ",(0,n.jsx)(s.strong,{children:"Cups and Dishes"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{alt:"Image showing requirements",src:t(60075).A+"",width:"940",height:"750"})}),"\n",(0,n.jsxs)(s.p,{children:["By the end of this tutorial, you should be able to query ",(0,n.jsx)(a.bU,{format:a.Ed.ShortForm})," with queries like:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Anne"})," has access to ",(0,n.jsx)(s.strong,{children:"Issues"})," (expecting ",(0,n.jsx)(s.code,{children:"yes"}),")"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Anne"})," has access to ",(0,n.jsx)(s.strong,{children:"Draft Pull Requests"})," (expecting",(0,n.jsx)(s.code,{children:" no"}),")"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Anne"})," has access to ",(0,n.jsx)(s.strong,{children:"Single Sign-on"})," (expecting",(0,n.jsx)(s.code,{children:" no"}),")"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Beth"})," has access to ",(0,n.jsx)(s.strong,{children:"Issues"})," (expecting ",(0,n.jsx)(s.code,{children:"yes"}),")"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Beth"})," has access to ",(0,n.jsx)(s.strong,{children:"Draft Pull Requests"})," (expecting ",(0,n.jsx)(s.code,{children:"yes"}),")"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Beth"})," has access to ",(0,n.jsx)(s.strong,{children:"Single Sign-on"})," (expecting",(0,n.jsx)(s.code,{children:" no"}),")"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Charles"})," has access to ",(0,n.jsx)(s.strong,{children:"Issues"})," (expecting ",(0,n.jsx)(s.code,{children:"yes"}),")"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Charles"})," has access to ",(0,n.jsx)(s.strong,{children:"Draft Pull Requests"})," (expecting ",(0,n.jsx)(s.code,{children:"yes"}),")"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Charles"})," has access to ",(0,n.jsx)(s.strong,{children:"Single Sign-on"})," (expecting ",(0,n.jsx)(s.code,{children:"yes"}),")"]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"modeling-entitlements-for-github",children:"Modeling entitlements for GitHub"}),"\n",(0,n.jsx)(s.h3,{id:"01-building-the-initial-authorization-model-and-relationship-tuples",children:"01. Building The Initial Authorization Model And Relationship Tuples"}),"\n",(0,n.jsxs)(s.p,{children:["In this tutorial you are going to take a different approach to previous tutorials. You will start with a simple ",(0,n.jsx)(a.OK,{section:"what-is-an-authorization-model",linkName:"authorization model"}),", add ",(0,n.jsx)(a.OK,{section:"what-is-a-relationship-tuple",linkName:"relationship tuples"})," to represent some sample scenarios, and iterate until those scenarios return the results you expect."]}),"\n",(0,n.jsxs)(s.p,{children:["In the scenarios outlined above, you have ",(0,n.jsx)(s.code,{children:"organizations"}),", ",(0,n.jsx)(s.code,{children:"plans"})," and ",(0,n.jsx)(s.code,{children:"features"}),"."]}),"\n",(0,n.jsx)(s.p,{children:"Similar to the example above, start with a basic listing of the types and their relations:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["A ",(0,n.jsx)(s.code,{children:"feature"})," has a ",(0,n.jsx)(s.code,{children:"plan"})," associated to it, we'll call the relation between them ",(0,n.jsx)(s.code,{children:"associated_plan"})]}),"\n",(0,n.jsxs)(s.li,{children:["A ",(0,n.jsx)(s.code,{children:"plan"})," has an organization as a ",(0,n.jsx)(s.code,{children:"subscriber"})," to it"]}),"\n",(0,n.jsxs)(s.li,{children:["An ",(0,n.jsx)(s.code,{children:"organization"})," has users as ",(0,n.jsx)(s.code,{children:"members"})]}),"\n"]}),"\n",(0,n.jsx)(a.pB,{configuration:{schema_version:"1.1",type_definitions:[{type:"user"},{type:"feature",relations:{associated_plan:{this:{}}},metadata:{relations:{associated_plan:{directly_related_user_types:[{type:"plan"}]}}}},{type:"plan",relations:{subscriber:{this:{}}},metadata:{relations:{subscriber:{directly_related_user_types:[{type:"organization"}]}}}},{type:"organization",relations:{member:{this:{}}},metadata:{relations:{member:{directly_related_user_types:[{type:"user"}]}}}}]}}),"\n",(0,n.jsx)(s.h3,{id:"02-populating-the-relationship-tuples",children:"02. Populating the relationship tuples"}),"\n",(0,n.jsxs)(s.p,{children:["Now you can add the relationship tuples to represent these relationships mentioned in the ",(0,n.jsx)(s.a,{href:"#requirements",children:"requirements"})," and ",(0,n.jsx)(s.a,{href:"#defined-scenarios",children:"scenarios"})," sections:"]}),"\n",(0,n.jsx)(s.p,{children:"The relations between the features and plans are as follows:"}),"\n",(0,n.jsx)(a.dp,{relationshipTuples:[{_description:"the free plan is the associated plan of the issues feature",user:"plan:free",relation:"associated_plan",object:"feature:issues"},{_description:"the team plan is the associated plan of the issues feature",user:"plan:team",relation:"associated_plan",object:"feature:issues"},{_description:"the team plan is the associated plan of the draft pull requests feature",user:"plan:team",relation:"associated_plan",object:"feature:draft_prs"},{_description:"the enterprise plan is the associated plan of the issues feature",user:"plan:enterprise",relation:"associated_plan",object:"feature:issues"},{_description:"the enterprise plan is the associated plan of the draft pull requests feature",user:"plan:enterprise",relation:"associated_plan",object:"feature:draft_prs"},{_description:"the enterprise plan is the associated plan of the SAML Single Sign-on feature",user:"plan:enterprise",relation:"associated_plan",object:"feature:sso"}]}),"\n",(0,n.jsx)(s.p,{children:"The relations between the plans and the organizations are as follows:"}),"\n",(0,n.jsx)(a.dp,{relationshipTuples:[{_description:"the Alpha Beta Gamma organization is a subscriber of the free plan",user:"organization:alpha",relation:"subscriber",object:"plan:free"},{_description:"the Bayer Water Supplies organization is a subscriber of the team plan",user:"organization:bayer",relation:"subscriber",object:"plan:team"},{_description:"the Cups and Dishes organization is a subscriber of the enterprise plan",user:"organization:cups",relation:"subscriber",object:"plan:enterprise"}]}),"\n",(0,n.jsx)(s.p,{children:"The relations between the organizations and the users are as follows:"}),"\n",(0,n.jsx)(a.dp,{relationshipTuples:[{_description:"anne is a member of the Alpha Beta Gamma organization",user:"user:anne",relation:"member",object:"organization:alpha"},{_description:"beth is a member of the Bayer Water Supplies",user:"user:beth",relation:"member",object:"organization:bayer"},{_description:"charles is a member of the Cups and Dishes organization",user:"user:charles",relation:"member",object:"organization:cups"}]}),"\n",(0,n.jsxs)(s.p,{children:["So far you have given ",(0,n.jsx)(a.bU,{format:a.Ed.ShortForm})," a representation of the current state of your system's relationships. You will keep iterating and updating the authorization model until the results of the queries match what you expect."]}),"\n",(0,n.jsxs)(s.admonition,{type:"caution",children:[(0,n.jsxs)(s.p,{children:["In production, it is highly recommended to use unique, immutable identifiers. Names are used in this article to make it easier to read and follow.\nFor example, the relationship tuple indicating that ",(0,n.jsx)(s.em,{children:"anne is a member of organization:alpha"})," could be written as:"]}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"user: user:2b4840f2-7c9c-42c8-9329-911002051524"}),"\n",(0,n.jsx)(s.li,{children:"relation: member"}),"\n",(0,n.jsx)(s.li,{children:"object: project:52e529c6-c571-4d5c-b78a-bc574cf98b54"}),"\n"]})]}),"\n",(0,n.jsx)(s.h4,{id:"verification",children:"Verification"}),"\n",(0,n.jsx)(s.p,{children:"Now that you have some data, you can start using it to ask is ${USER} related to ${OBJECT} as ${RELATION}?"}),"\n",(0,n.jsxs)(s.p,{children:["First, you will ",(0,n.jsx)(a.OK,{section:"what-is-a-check-request",linkName:"check"})," if ",(0,n.jsx)(s.code,{children:"anne"})," is a member of ",(0,n.jsx)(s.code,{children:"organization:alpha"}),". This is one of the relationship tuples you previously added, you will make sure ",(0,n.jsx)(a.bU,{format:a.Ed.ShortForm})," can detect a relation in this case."]}),"\n",(0,n.jsx)(a.ou,{user:"user:anne",relation:"member",object:"organization:alpha",allowed:!0}),"\n",(0,n.jsxs)(s.p,{children:["Querying for relationship tuples that you fed into ",(0,n.jsx)(a.bU,{format:a.Ed.LongForm})," earlier should work, try a few before proceeding to make sure everything is working well."]}),"\n",(0,n.jsx)(a.ou,{user:"user:anne",relation:"member",object:"organization:bayer",allowed:!1}),"\n",(0,n.jsx)(a.ou,{user:"organization:bayer",relation:"subscriber",object:"plan:team",allowed:!0}),"\n",(0,n.jsx)(a.ou,{user:"plan:free",relation:"associated_plan",object:"feature:issues",allowed:!0}),"\n",(0,n.jsx)(s.h3,{id:"03-updating-the-authorization-model",children:"03. Updating the authorization model"}),"\n",(0,n.jsxs)(s.p,{children:["You are working towards ",(0,n.jsx)(a.bU,{format:a.Ed.ShortForm})," returning the correct answer when you query whether ",(0,n.jsx)(s.code,{children:"anne"})," has ",(0,n.jsx)(s.code,{children:"access"})," to ",(0,n.jsx)(s.code,{children:"feature:issues"}),". It won't work yet, but you will keep updating your configuration to reach that goal."]}),"\n",(0,n.jsxs)(s.p,{children:["To start, try to run that query on ",(0,n.jsx)(s.code,{children:"is anne related to feature:issues as access?"})]}),"\n",(0,n.jsx)(a.ou,{user:"user:anne",relation:"access",object:"feature:issues"}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(a.bU,{format:a.Ed.LongForm})," service is returning that the query tuple is invalid. That is because you are asking for relation as ",(0,n.jsx)(s.code,{children:"access"}),", but that relation is not in the configuration of the ",(0,n.jsx)(s.code,{children:"feature"})," type!"]}),"\n",(0,n.jsx)(s.p,{children:"Add it now. Like so:"}),"\n",(0,n.jsx)(a.pB,{configuration:{type:"feature",relations:{associated_plan:{this:{}},access:{this:{}}},metadata:{relations:{associated_plan:{directly_related_user_types:[{type:"plan"}]},access:{directly_related_user_types:[{type:"user"}]}}}},skipVersion:!0}),"\n",(0,n.jsx)(s.admonition,{type:"info",children:(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"access"})," ",(0,n.jsx)(a.OK,{section:"what-is-a-relation",linkName:"relation"})," was added to the configuration of the ",(0,n.jsx)(s.code,{children:"feature"})," ",(0,n.jsx)(a.OK,{section:"what-is-a-type",linkName:"type"}),"."]})}),"\n",(0,n.jsxs)(s.admonition,{type:"note",children:[(0,n.jsxs)(s.p,{children:["In this tutorial, you will find the phrases ",(0,n.jsx)(a.OK,{section:"what-are-direct-and-implied-relationships",linkName:"direct relationship and implied relationship"}),"."]}),(0,n.jsxs)(s.p,{children:["A ",(0,n.jsx)(s.em,{children:"direct relationship"})," R between user X and object Y means the relationship tuple (user=X, relation=R, object=Y) exists, and the ",(0,n.jsx)(a.bU,{format:a.Ed.ShortForm})," authorization model for that relation allows this direct relationship (by use of ",(0,n.jsx)(s.a,{href:"/pr-preview/pr-958/docs/configuration-language#direct-relationship-type-restrictions",children:"direct relationship type restrictions"}),")."]}),(0,n.jsxs)(s.p,{children:["An ",(0,n.jsx)(s.em,{children:"implied relationship"})," R exists between user X and object Y if user X is related to an object Z that is in direct or implied relationship with object Y, and the ",(0,n.jsx)(a.bU,{format:a.Ed.ShortForm})," authorization model allows it."]})]}),"\n",(0,n.jsx)(s.p,{children:"The resulting updated configuration would be:"}),"\n",(0,n.jsx)(a.pB,{configuration:{schema_version:"1.1",type_definitions:[{type:"user"},{type:"feature",relations:{associated_plan:{this:{}},access:{this:{}}},metadata:{relations:{associated_plan:{directly_related_user_types:[{type:"plan"}]},access:{directly_related_user_types:[{type:"user"}]}}}},{type:"plan",relations:{subscriber:{this:{}}},metadata:{relations:{subscriber:{directly_related_user_types:[{type:"organization"}]}}}},{type:"organization",relations:{member:{this:{}}},metadata:{relations:{subscriber:{directly_related_user_types:[{type:"user"}]}}}}]}}),"\n",(0,n.jsx)(s.h4,{id:"adding-modeling-pattern-of-parent-child-objects",children:"Adding modeling pattern of parent-child objects"}),"\n",(0,n.jsxs)(s.p,{children:["Now we can ask the following query: ",(0,n.jsx)(s.code,{children:"is anne related to feature:issues as access?"})," again."]}),"\n",(0,n.jsx)(a.ou,{user:"user:anne",relation:"access",object:"feature:issues",allowed:!1}),"\n",(0,n.jsxs)(s.p,{children:["So far so good. ",(0,n.jsx)(a.bU,{format:a.Ed.ShortForm})," understood your query, but said that no ",(0,n.jsx)(a.OK,{section:"what-is-a-relation",linkName:"relation"})," exists. That is because according to the configuration provided so far, there is no ",(0,n.jsx)(s.code,{children:"access"})," relation between ",(0,n.jsx)(s.code,{children:"anne"})," and ",(0,n.jsx)(s.code,{children:"feature:issues"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["We can also try to query ",(0,n.jsx)(s.code,{children:"is organization:alpha related to feature:issues as access?"})," and we see that there is no relationship."]}),"\n",(0,n.jsx)(a.ou,{user:"organization:alpha",relation:"access",object:"feature:issues",allowed:!1}),"\n",(0,n.jsxs)(s.p,{children:["If you have already completed some of the other tutorials you might have encountered the modeling pattern of ",(0,n.jsx)(s.a,{href:"/pr-preview/pr-958/docs/modeling/parent-child",children:"parent-child objects"})," which is modeled as such:"]}),"\n",(0,n.jsx)(a.pB,{configuration:{type:"resource",relations:{viewer:{tupleToUserset:{tupleset:{relation:"parent"},computedUserset:{relation:"all_objects_viewer"}}}}},skipVersion:!0}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsxs)(s.p,{children:["With this, when asked to check a user's ",(0,n.jsx)(s.code,{children:"viewer"})," relationship with the object, ",(0,n.jsx)(a.bU,{format:a.Ed.LongForm})," will:"]}),(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsxs)(s.li,{children:["Read all relationship tuples of users related to this particular object as relation ",(0,n.jsx)(s.code,{children:"parent"})]}),"\n",(0,n.jsxs)(s.li,{children:["For each relationship tuple, return all ",(0,n.jsx)(s.em,{children:"usersets"})," that have ",(0,n.jsx)(s.code,{children:"all_objects_viewer"})," relation to the objects in those relationship tuples"]}),"\n",(0,n.jsxs)(s.li,{children:["If the user is in any of those ",(0,n.jsx)(s.em,{children:"usersets"}),", return yes, as the user is a ",(0,n.jsx)(s.code,{children:"viewer"})," on this object.\nIn other words, users related as ",(0,n.jsx)(s.code,{children:"all_objects_viewer"})," to any of this object's ",(0,n.jsx)(s.code,{children:"parents"})," are related as ",(0,n.jsx)(s.code,{children:"viewer"})," to this object."]}),"\n"]})]}),"\n",(0,n.jsx)(s.p,{children:"If you want to give all subscribers on a plan access to a feature, you can do it like so:"}),"\n",(0,n.jsx)(a.pB,{configuration:{type:"feature",relations:{associated_plan:{this:{}},access:{union:{child:[{this:{}},{tupleToUserset:{tupleset:{relation:"associated_plan"},computedUserset:{relation:"subscriber"}}}]}}},metadata:{relations:{associated_plan:{directly_related_user_types:[{type:"plan"}]},access:{directly_related_user_types:[{type:"user"}]}}}},skipVersion:!0}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsxs)(s.p,{children:["Users related to ",(0,n.jsx)(s.code,{children:"feature"})," as ",(0,n.jsx)(s.code,{children:"access"})," are the union of (any of):"]}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["the set of users with a direct ",(0,n.jsx)(s.code,{children:"access"})," relation"]}),"\n",(0,n.jsxs)(s.li,{children:["the set of users related to the ",(0,n.jsx)(s.code,{children:"associated_plan"})," as ",(0,n.jsx)(s.code,{children:"subscriber"})," (the feature's associated plans' subscribers)"]}),"\n"]}),(0,n.jsx)(s.p,{children:"So everyone who has direct access, as well as the subscribers of the associated plan"})]}),"\n",(0,n.jsxs)(s.p,{children:["That would mean that in order for an object to have an ",(0,n.jsx)(s.code,{children:"access"})," relation to a feature y, there needs to be either:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["a ",(0,n.jsx)(a.OK,{section:"what-are-direct-and-implied-relationships",linkName:"direct relationship"})," via a relationship tuple:\ne.g. ",(0,n.jsx)(s.code,{children:'{ "user": "user:x", "relation": "access", "object": "feature:y" }'})]}),"\n",(0,n.jsxs)(s.li,{children:["a subscriber relationship with another object related to x associated_plan:\ne.g. ",(0,n.jsx)(s.code,{children:'{ "user": "user:x", "relation": "subscriber", "object": "plan:z" } { "user": "plan:z", "relation": "associated_plan", "object": "feature:y" }'})]}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"That brings you close. That will allow you to grant organizations access to the feature (as organizations have a subscriber relation with the plan)."}),"\n",(0,n.jsx)(s.h4,{id:"adding-subscriber-relationship-with-another-object-related-to-x-associated_plan",children:"Adding Subscriber Relationship With Another Object Related To x associated_plan"}),"\n",(0,n.jsxs)(s.p,{children:["One way forward would be to add a direct ",(0,n.jsx)(s.code,{children:"access"})," relation between a user and a feature e.g. ",(0,n.jsx)(s.code,{children:'{ "user": "anne", "relation": "access", "object": "feature:y" }'})," whenever the organization anne is subscribed to a plan, or the organization anne is in subscribes to a new plan.\nBut there are several downsides to this:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["Your application layer now needs to worry about computing this relationship. Instead of letting ",(0,n.jsx)(a.bU,{format:a.Ed.ShortForm})," figure this all out, the app layer needs to do the checks whenever a user is being added or removed"]}),"\n",(0,n.jsxs)(s.li,{children:["If an organization changes its subscription, your application layer has to loop through all the users and update their ",(0,n.jsx)(s.code,{children:"access"})," relationships to features accordingly"]}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:["Later in this tutorial, you will remove the possibility of having a direct ",(0,n.jsx)(s.code,{children:"access"})," relation completely, but for now you will make sure the changes to the store you have made so far are working."]}),"\n",(0,n.jsx)(s.p,{children:"Replace all the existing code you had previously with the updated authorization model from the below snippet."}),"\n",(0,n.jsx)(a.pB,{configuration:{schema_version:"1.1",type_definitions:[{type:"user"},{type:"feature",relations:{associated_plan:{this:{}},access:{union:{child:[{this:{}},{tupleToUserset:{tupleset:{relation:"associated_plan"},computedUserset:{relation:"subscriber"}}}]}}},metadata:{relations:{associated_plan:{directly_related_user_types:[{type:"plan"}]},access:{directly_related_user_types:[{type:"user"}]}}}},{type:"plan",relations:{subscriber:{this:{}}},metadata:{relations:{subscriber:{directly_related_user_types:[{type:"organization"}]}}}},{type:"organization",relations:{member:{this:{}}},metadata:{relations:{member:{directly_related_user_types:[{type:"user"}]}}}}]}}),"\n",(0,n.jsxs)(s.p,{children:["Now we can ask following query: ",(0,n.jsx)(s.code,{children:"is organization:alpha related to feature:issues as access?"})," again."]}),"\n",(0,n.jsx)(a.ou,{user:"organization:alpha",relation:"access",object:"feature:issues",allowed:!0}),"\n",(0,n.jsxs)(s.p,{children:["You will notice that ",(0,n.jsx)(a.bU,{format:a.Ed.ShortForm})," now did find a relation, as ",(0,n.jsx)(s.code,{children:"organization:alpha"})," is a ",(0,n.jsx)(s.code,{children:"subscriber"})," to ",(0,n.jsx)(s.code,{children:"plan:free"})," which has an ",(0,n.jsx)(s.code,{children:"associated_plan"})," relation to ",(0,n.jsx)(s.code,{children:"feature:issues"}),". From that and the authorization model you updated above, ",(0,n.jsx)(a.bU,{format:a.Ed.ShortForm})," deduced that ",(0,n.jsx)(s.code,{children:"organization:alpha"})," has an implied ",(0,n.jsx)(s.code,{children:"access"})," relation to ",(0,n.jsx)(s.code,{children:"feature:issues"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["That is good, but you want to be able to ask ",(0,n.jsx)(s.code,{children:"is anne related to feature:issues as access?"}),", not ",(0,n.jsx)(s.code,{children:"is organization:alpha related to feature:issues as access?"}),". As in, you want the subscriber members to have access to the feature, not the subscriber itself."]}),"\n",(0,n.jsxs)(s.p,{children:["In order to do that, you will add a relation on the plan, that indicates that all members of an organization subscribed to it, have a ",(0,n.jsx)(s.code,{children:"subscriber_member"})," relation to the plan. And you can modify the change you did above to give implied access to the ",(0,n.jsx)(s.code,{children:"subscriber_member"})," instead of the subscriber. Like so:"]}),"\n",(0,n.jsx)(a.pB,{description:"Notice that `subscriber` has been updated to `subscriber_member` in the `access` relation of the `feature` type.\n  Under the `plan` type, in order for someone to have a `subscriber_member` relation to the plan, they have to be related as a `member` to the object related as a `subscriber` to the plan (as in they have to be a member of on of the plan's subscribers).",configuration:{schema_version:"1.1",type_definitions:[{type:"user"},{type:"feature",relations:{associated_plan:{this:{}},access:{union:{child:[{this:{}},{tupleToUserset:{tupleset:{relation:"associated_plan"},computedUserset:{relation:"subscriber_member"}}}]}}},metadata:{relations:{associated_plan:{directly_related_user_types:[{type:"plan"}]},access:{directly_related_user_types:[{type:"user"}]}}}},{type:"plan",relations:{subscriber:{this:{}},subscriber_member:{tupleToUserset:{tupleset:{relation:"subscriber"},computedUserset:{relation:"member"}}}},metadata:{relations:{subscriber:{directly_related_user_types:[{type:"organization"}]}}}},{type:"organization",relations:{member:{this:{}}},metadata:{relations:{member:{directly_related_user_types:[{type:"user"}]}}}}]}}),"\n",(0,n.jsxs)(s.admonition,{type:"info",children:[(0,n.jsxs)(s.p,{children:["Notice that ",(0,n.jsx)(s.code,{children:"subscriber"})," has been updated to ",(0,n.jsx)(s.code,{children:"subscriber_member"})," in the ",(0,n.jsx)(s.code,{children:"access"})," relation of the ",(0,n.jsx)(s.code,{children:"feature"})," type."]}),(0,n.jsxs)(s.p,{children:["Under the ",(0,n.jsx)(s.code,{children:"plan"})," type, in order for someone to have a ",(0,n.jsx)(s.code,{children:"subscriber_member"})," relation to the plan, they have to be related as a ",(0,n.jsx)(s.code,{children:"member"})," to the object related as a ",(0,n.jsx)(s.code,{children:"subscriber"})," to the plan (as in they have to be a member of on of the plan's subscribers)."]})]}),"\n",(0,n.jsxs)(s.p,{children:["Now ask the following query: ",(0,n.jsx)(s.code,{children:"is anne related to feature:issues as access?"})]}),"\n",(0,n.jsx)(a.ou,{user:"user:anne",relation:"access",object:"feature:issues",allowed:!0}),"\n",(0,n.jsx)(s.h4,{id:"disallow-direct-relationship",children:"Disallow direct relationship"}),"\n",(0,n.jsxs)(s.p,{children:["So far, with just a ",(0,n.jsx)(a.bU,{format:a.Ed.ShortForm})," authorization model, and the initial relationship tuples indicating the relations you know, you configured ",(0,n.jsx)(a.bU,{format:a.Ed.LongForm})," to give you the correct response."]}),"\n",(0,n.jsxs)(s.p,{children:["Earlier on, the idea of not allowing a direct ",(0,n.jsx)(s.code,{children:"access"})," relation between a user and a ",(0,n.jsx)(s.code,{children:"feature"})," was discussed, e.g. adding a relationship tuple like ",(0,n.jsx)(s.code,{children:'{ "user": "user:anne", "relation": "access", "object": "feature:y" }'}),". You will remove it now."]}),"\n",(0,n.jsx)(s.p,{children:"To disallow a direct relationship, you need to remove the direct relationship type restriction. The following snippet:"}),"\n",(0,n.jsx)(a.pB,{configuration:{type:"feature",relations:{associated_plan:{this:{}},access:{union:{child:[{this:{}},{tupleToUserset:{tupleset:{relation:"associated_plan"},computedUserset:{relation:"subscriber_member"}}}]}}},metadata:{relations:{associated_plan:{directly_related_user_types:[{type:"plan"}]},access:{directly_related_user_types:[{type:"user"}]}}}},skipVersion:!0}),"\n",(0,n.jsx)(s.p,{children:"becomes"}),"\n",(0,n.jsx)(a.pB,{configuration:{type:"feature",relations:{associated_plan:{this:{}},access:{tupleToUserset:{tupleset:{relation:"associated_plan"},computedUserset:{relation:"subscriber_member"}}}},metadata:{relations:{associated_plan:{directly_related_user_types:[{type:"plan"}]}}}},skipVersion:!0}),"\n",(0,n.jsx)(s.p,{children:"With this change, even if your app layer added the following relationship tuple:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:'{ "user": "user:anne", "relation": "access", "object": feature:issues }'})}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:["a subsequent check for ",(0,n.jsx)(s.code,{children:"is anne related to feature:issues as access?"})," would return no relation. The only way for a relation to exist is if the following three relationship tuples do:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:'{ "user": "user:anne", "relation": "member", "object": "organization:z" }'})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:'{ "user": "organization:z", "relation": "subscriber", "object": "plan:y" }'})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:'{ "user": "plan:y", "relation": "associated_plan", "object": "feature:issues" }'})}),"\n"]}),"\n",(0,n.jsx)(s.h4,{id:"verification-1",children:"Verification"}),"\n",(0,n.jsx)(s.p,{children:"Ensure that your authorization model matches the one below"}),"\n",(0,n.jsx)(a.pB,{configuration:{type_definitions:[{type:"user"},{type:"feature",relations:{associated_plan:{this:{}},access:{tupleToUserset:{tupleset:{relation:"associated_plan"},computedUserset:{relation:"subscriber_member"}}}},metadata:{relations:{associated_plan:{directly_related_user_types:[{type:"plan"}]}}}},{type:"plan",relations:{subscriber:{this:{}},subscriber_member:{tupleToUserset:{tupleset:{relation:"subscriber"},computedUserset:{relation:"member"}}}},metadata:{relations:{subscriber:{directly_related_user_types:[{type:"organization"}]}}}},{type:"organization",relations:{member:{this:{}}},metadata:{relations:{member:{directly_related_user_types:[{type:"user"}]}}}}]}}),"\n",(0,n.jsx)(s.p,{children:"You will now verify that the configuration is correct by running checks for all the scenarios mentioned at the beginning of the tutorial:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Anne"})," has access to ",(0,n.jsx)(s.strong,{children:"Issues"})," (expecting ",(0,n.jsx)(s.code,{children:"yes"}),")"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Anne"})," has access to ",(0,n.jsx)(s.strong,{children:"Draft Pull Requests"})," (expecting",(0,n.jsx)(s.code,{children:" no"}),")"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Anne"})," has access to ",(0,n.jsx)(s.strong,{children:"Single Sign-on"})," (expecting",(0,n.jsx)(s.code,{children:" no"}),")"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Beth"})," has access to ",(0,n.jsx)(s.strong,{children:"Issues"})," (expecting ",(0,n.jsx)(s.code,{children:"yes"}),")"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Beth"})," has access to ",(0,n.jsx)(s.strong,{children:"Draft Pull Requests"})," (expecting ",(0,n.jsx)(s.code,{children:"yes"}),")"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Beth"})," has access to ",(0,n.jsx)(s.strong,{children:"Single Sign-on"})," (expecting",(0,n.jsx)(s.code,{children:" no"}),")"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Charles"})," has access to ",(0,n.jsx)(s.strong,{children:"Issues"})," (expecting ",(0,n.jsx)(s.code,{children:"yes"}),")"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Charles"})," has access to ",(0,n.jsx)(s.strong,{children:"Draft Pull Requests"})," (expecting ",(0,n.jsx)(s.code,{children:"yes"}),")"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Charles"})," has access to ",(0,n.jsx)(s.strong,{children:"Single Sign-on"})," (expecting ",(0,n.jsx)(s.code,{children:"yes"}),")"]}),"\n"]}),"\n",(0,n.jsx)(a.ou,{user:"user:anne",relation:"access",object:"feature:issues",allowed:!0}),"\n",(0,n.jsx)(s.p,{children:"Try to verify for the other user, object and relation combinations as listed below."}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"User"}),(0,n.jsx)(s.th,{children:"Object"}),(0,n.jsx)(s.th,{children:"Relation"}),(0,n.jsx)(s.th,{children:"Query"}),(0,n.jsx)(s.th,{children:"Relation?"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"anne"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"feature:issues"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"access"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"is anne related to feature:issues as access?"})}),(0,n.jsx)(s.td,{children:"Yes"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"anne"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"feature:draft_prs"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"access"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"is anne related to feature:draft_prs as access?"})}),(0,n.jsx)(s.td,{children:"No"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"anne"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"feature:sso"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"access"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"is anne related to feature:sso as access?"})}),(0,n.jsx)(s.td,{children:"No"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"beth"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"feature:issues"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"access"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"is beth related to feature:issues as access?"})}),(0,n.jsx)(s.td,{children:"Yes"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"beth"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"feature:draft_prs"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"access"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"is beth related to feature:draft_prs as access?"})}),(0,n.jsx)(s.td,{children:"Yes"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"beth"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"feature:sso"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"access"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"is beth related to feature:sso as access?"})}),(0,n.jsx)(s.td,{children:"No"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"charles"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"feature:issues"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"access"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"is charles related to feature:issues as access?"})}),(0,n.jsx)(s.td,{children:"Yes"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"charles"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"feature:draft_prs"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"access"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"is charles related to feature:draft_prs as access?"})}),(0,n.jsx)(s.td,{children:"Yes"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"charles"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"feature:sso"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"access"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"is charles related to feature:sso as access?"})}),(0,n.jsx)(s.td,{children:"Yes"})]})]})]}),"\n",(0,n.jsx)(s.h2,{id:"summary",children:"Summary"}),"\n",(0,n.jsx)(s.p,{children:"In this tutorial, you learned:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["to model entitlements for a system in ",(0,n.jsx)(a.bU,{format:a.Ed.LongForm})]}),"\n",(0,n.jsxs)(s.li,{children:["how to start with a set of requirements and scenarios and iterate on the ",(0,n.jsx)(a.bU,{format:a.Ed.ShortForm})," authorization model until the checks match the expected scenarios"]}),"\n",(0,n.jsxs)(s.li,{children:["how to model ",(0,n.jsx)(s.a,{href:"/pr-preview/pr-958/docs/modeling/parent-child",children:(0,n.jsx)(s.strong,{children:"parent-child relationships"})})," to indicate that a user having a relationship with a certain object implies having a relationship with another object in ",(0,n.jsx)(a.bU,{format:a.Ed.ShortForm})]}),"\n",(0,n.jsxs)(s.li,{children:["how to use ",(0,n.jsx)(s.a,{href:"/pr-preview/pr-958/docs/configuration-language#the-union-operator",children:(0,n.jsx)(s.strong,{children:"the union operator"})})," condition to indicate multiple possible paths for a relationship between two objects to be computed"]}),"\n",(0,n.jsxs)(s.li,{children:["using ",(0,n.jsx)(s.a,{href:"/pr-preview/pr-958/docs/configuration-language#direct-relationship-type-restrictions",children:(0,n.jsx)(s.strong,{children:"direct relationship type restrictions"})})," in a ",(0,n.jsx)(a.bU,{format:a.Ed.ShortForm})," authorization model, and how to block direct relationships by removing it"]}),"\n"]}),"\n",(0,n.jsx)(a.QF,{title:"Entitlements",preset:"entitlements",example:"Entitlements",store:"entitlements"}),"\n",(0,n.jsxs)(s.p,{children:["Upcoming tutorials will dive deeper into ",(0,n.jsx)(a.bU,{format:a.Ed.ShortForm}),", introducing concepts that will improve on the model you built today, and tackling different permission systems, with other relations and requirements that need to be met."]})]})}function u(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},17379:(e,s,t)=>{t.d(s,{A:()=>i});const i=t.p+"assets/images/entitlements-image-github-draft-pr-2ee031c09e3924b41681861e56aab2e7.svg"},52275:(e,s,t)=>{t.d(s,{A:()=>i});const i=t.p+"assets/images/entitlements-image-github-no-draft-pr-785626465cfe1b8183918ee6bd3aefb1.svg"},55885:(e,s,t)=>{t.d(s,{A:()=>i});const i=t.p+"assets/images/entitlements-image-pricing-github-2276507856dd07b091bcecc2376dde05.svg"},60075:(e,s,t)=>{t.d(s,{A:()=>i});const i=t.p+"assets/images/entitlements-requirements-fdd4048edc4d4b3b78785f4c0671e0b1.svg"}}]);