"use strict";(self.webpackChunkopenfga_dev=self.webpackChunkopenfga_dev||[]).push([[7822],{97515:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"content/configuration-language","title":"Configuration Language","description":"Learning about the FGA configuration language and using it to build a representation of a system\'s authorization model","source":"@site/docs/content/configuration-language.mdx","sourceDirName":"content","slug":"/configuration-language","permalink":"/pr-preview/pr-938/docs/configuration-language","draft":false,"unlisted":false,"editUrl":"https://github.com/openfga/openfga.dev/edit/main/docs/content/configuration-language.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Configuration Language","sidebar_position":2,"slug":"/configuration-language","description":"Learning about the FGA configuration language and using it to build a representation of a system\'s authorization model"},"sidebar":"docs","previous":{"title":"OpenFGA Concepts","permalink":"/pr-preview/pr-938/docs/concepts"},"next":{"title":"Community","permalink":"/pr-preview/pr-938/docs/community"}}');var r=t(74848),s=t(28453),o=t(89987);const a={title:"Configuration Language",sidebar_position:2,slug:"/configuration-language",description:"Learning about the FGA configuration language and using it to build a representation of a system's authorization model"},d="Configuration Language",l={},c=[{value:"What Does The Configuration Language Look Like?",id:"what-does-the-configuration-language-look-like",level:2},{value:"Direct Relationship Type Restrictions",id:"direct-relationship-type-restrictions",level:3},{value:"Referencing Other Relations On The Same Object",id:"referencing-other-relations-on-the-same-object",level:3},{value:"Referencing Relations On Related Objects",id:"referencing-relations-on-related-objects",level:3},{value:"The Union Operator",id:"the-union-operator",level:3},{value:"The Intersection Operator",id:"the-intersection-operator",level:3},{value:"The Exclusion Operator",id:"the-exclusion-operator",level:3},{value:"Grouping and nesting operators",id:"grouping-and-nesting-operators",level:3},{value:"Conditional relationships",id:"conditional-relationships",level:3},{value:"Equivalent Zanzibar Concepts",id:"equivalent-zanzibar-concepts",level:2},{value:"Related Sections",id:"related-sections",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"configuration-language",children:"Configuration Language"})}),"\n",(0,r.jsx)(o.ZE,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(o.bU,{format:o.Ed.LongForm}),"'s Configuration Language builds a representation of a system's ",(0,r.jsx)(o.OK,{section:"what-is-an-authorization-model",linkName:"authorization model"}),", which informs ",(0,r.jsx)(o.Oe,{link:"/api/service",name:"{ProductName}'s API"})," on the ",(0,r.jsx)(o.OK,{section:"what-is-a-type",linkName:"object types"})," in the system and how they relate to each other. The Configuration Language describes the ",(0,r.jsx)(o.OK,{section:"what-is-a-relation",linkName:"relations"})," possible for an object of a given type and lists the conditions under which one is related to that object."]}),"\n",(0,r.jsxs)(n.p,{children:["The Configuration Language can be presented in ",(0,r.jsx)(n.strong,{children:"DSL"})," or ",(0,r.jsx)(n.strong,{children:"JSON"})," syntax. The JSON syntax is accepted by the API and closely tracks the language in the ",(0,r.jsx)(n.a,{href:"https://research.google/pubs/pub48190/",children:"Zanzibar paper"}),". The DSL adds syntactic sugar on top of JSON for ease of use, but compiles down to JSON before being sent to ",(0,r.jsx)(o.bU,{format:o.Ed.ShortForm}),"'s API. JSON syntax is used to call API directly or through the ",(0,r.jsx)(n.a,{href:"./getting-started",children:"SDKs"}),", while DSL is used to interact with ",(0,r.jsx)(o.bU,{format:o.Ed.ShortForm})," in the ",(0,r.jsx)(n.a,{href:"https://play.fga.dev/",children:"Playground"}),", the ",(0,r.jsx)(n.a,{href:"https://github.com/openfga/cli",children:"CLI"}),", and the IDE extensions for ",(0,r.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=openfga.openfga-vscode",children:"Visual Studio Code"})," and ",(0,r.jsx)(n.a,{href:"https://plugins.jetbrains.com/plugin/24394-openfga",children:"IntelliJ"}),". They can be switched between throughout this documentation."]}),"\n",(0,r.jsxs)(n.p,{children:["Please familiarize yourself with basic ",(0,r.jsx)(o.OK,{})," and ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-938/docs/modeling/getting-started",children:"How to get started on modeling"})," before starting this guide."]}),"\n",(0,r.jsx)(n.h2,{id:"what-does-the-configuration-language-look-like",children:"What Does The Configuration Language Look Like?"}),"\n",(0,r.jsxs)(n.p,{children:["Below is a sample authorization model. The next sections discuss the basics of the ",(0,r.jsx)(o.bU,{format:o.Ed.ShortForm})," configuration language."]}),"\n",(0,r.jsx)(o.pB,{configuration:{schema_version:"1.1",type_definitions:[{type:"user"},{type:"domain",relations:{member:{this:{}}},metadata:{relations:{member:{directly_related_user_types:[{type:"user"}]}}}},{type:"folder",relations:{can_share:{computedUserset:{object:"",relation:"writer"}},owner:{union:{child:[{this:{}},{tupleToUserset:{tupleset:{object:"",relation:"parent_folder"},computedUserset:{object:"",relation:"owner"}}}]}},parent_folder:{this:{}},viewer:{union:{child:[{this:{}},{computedUserset:{object:"",relation:"writer"}},{tupleToUserset:{tupleset:{object:"",relation:"parent_folder"},computedUserset:{object:"",relation:"viewer"}}}]}},writer:{union:{child:[{this:{}},{computedUserset:{object:"",relation:"owner"}},{tupleToUserset:{tupleset:{object:"",relation:"parent_folder"},computedUserset:{object:"",relation:"writer"}}}]}}},metadata:{relations:{owner:{directly_related_user_types:[{type:"user"},{type:"domain",relation:"member"}]},parent_folder:{directly_related_user_types:[{type:"folder"}]},viewer:{directly_related_user_types:[{type:"user"},{type:"domain",relation:"member"}]},writer:{directly_related_user_types:[{type:"user"},{type:"domain",relation:"member"}]}}}},{type:"document",relations:{can_share:{computedUserset:{object:"",relation:"writer"}},owner:{union:{child:[{this:{}},{tupleToUserset:{tupleset:{object:"",relation:"parent_folder"},computedUserset:{object:"",relation:"owner"}}}]}},parent_folder:{this:{}},viewer:{union:{child:[{this:{}},{computedUserset:{object:"",relation:"writer"}},{tupleToUserset:{tupleset:{object:"",relation:"parent_folder"},computedUserset:{object:"",relation:"viewer"}}}]}},writer:{union:{child:[{this:{}},{computedUserset:{object:"",relation:"owner"}},{tupleToUserset:{tupleset:{object:"",relation:"parent_folder"},computedUserset:{object:"",relation:"writer"}}}]}}},metadata:{relations:{owner:{directly_related_user_types:[{type:"user"},{type:"domain",relation:"member"}]},parent_folder:{directly_related_user_types:[{type:"folder"}]},viewer:{directly_related_user_types:[{type:"user"},{type:"domain",relation:"member"}]},writer:{directly_related_user_types:[{type:"user"},{type:"domain",relation:"member"}]}}}}]}}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["The authorization model describes four ",(0,r.jsx)(o.OK,{section:"what-is-a-type",linkName:"types"})," of objects: ",(0,r.jsx)(n.code,{children:"user"}),", ",(0,r.jsx)(n.code,{children:"domain"}),", ",(0,r.jsx)(n.code,{children:"folder"})," and ",(0,r.jsx)(n.code,{children:"document"}),"."]}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"domain"})," ",(0,r.jsx)(o.OK,{section:"what-is-a-type-definition",linkName:"type definition"})," has a single ",(0,r.jsx)(o.OK,{section:"what-is-a-relation",linkName:"relation"})," called ",(0,r.jsx)(n.code,{children:"member"})," that only allows ",(0,r.jsx)(o.OK,{section:"what-are-direct-and-implied-relationships",linkName:"direct relationships"}),"."]}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"folder"})," and ",(0,r.jsx)(n.code,{children:"document"})," type definitions each have five relations: ",(0,r.jsx)(n.code,{children:"parent_folder"}),", ",(0,r.jsx)(n.code,{children:"owner"}),", ",(0,r.jsx)(n.code,{children:"writer"}),", ",(0,r.jsx)(n.code,{children:"viewer"})," and ",(0,r.jsx)(n.code,{children:"can_share"}),"."]})]}),"\n",(0,r.jsx)(n.h3,{id:"direct-relationship-type-restrictions",children:"Direct Relationship Type Restrictions"}),"\n",(0,r.jsxs)(n.p,{children:["When used at the beginning of a ",(0,r.jsx)(o.OK,{section:"what-is-a-relation-definition",linkName:"relation definition"}),", ",(0,r.jsx)(n.code,{children:"[<string, <string>, ...]"})," allows ",(0,r.jsx)(o.OK,{section:"what-are-direct-and-implied-relationships",linkName:"direct relationships"})," by the objects of these specified types. The strings can be in one of three formats:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<type>"}),": indicates that tuples relating objects of those types as users can be written. For example, ",(0,r.jsx)(n.code,{children:"group:marketing"})," can be related if ",(0,r.jsx)(n.code,{children:"group"})," is in the type restrictions."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<type:*>"}),": indicates that a tuple relating all objects of that type can be written. For example, ",(0,r.jsx)(n.code,{children:"user:*"})," can be added if ",(0,r.jsx)(n.code,{children:"user:*"})," is in the type restrictions."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<type>#<relation>"}),": indicates tuples with sets of users related to an object of that type by that particular relation. For example, ",(0,r.jsx)(n.code,{children:"group:marketing#member"})," can be added if ",(0,r.jsx)(n.code,{children:"group#member"})," is in the type restrictions."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"If no direct relationship type restrictions are specified, direct relationships are disallowed and tuples cannot be written relating other objects of this particular relation with objects of this type."}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"[<type1>, <type2>, ...]"})," in the ",(0,r.jsx)(o.bU,{format:o.Ed.ShortForm})," DSL translates to ",(0,r.jsx)(n.code,{children:"this"})," in the ",(0,r.jsx)(o.bU,{format:o.Ed.ShortForm})," API syntax."]})}),"\n",(0,r.jsxs)(n.p,{children:["For example, below is a snippet of the ",(0,r.jsx)(n.code,{children:"team"})," type:"]}),"\n",(0,r.jsx)(o.pB,{configuration:{schema_version:"1.1",type:"team",relations:{member:{this:{}}},metadata:{relations:{member:{directly_related_user_types:[{type:"user"},{type:"user:*"},{type:"team",relation:"member"}]}}}},skipVersion:!0}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"team"})," ",(0,r.jsx)(o.OK,{section:"what-is-a-type-definition",linkName:"type definition"})," above defines all the ",(0,r.jsx)(o.OK,{section:"what-is-a-relation",linkName:"relations"})," that ",(0,r.jsx)(o.OK,{section:"what-is-a-user",linkName:"users"})," can have with an ",(0,r.jsx)(n.em,{children:(0,r.jsx)(o.OK,{section:"what-is-an-object",linkName:"object"})})," of type ",(0,r.jsx)(n.code,{children:"team"}),". In this example, the relation is ",(0,r.jsx)(n.code,{children:"member"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Because of the ",(0,r.jsx)(n.code,{children:"[user, team#member]"})," direct relationship type restrictions used, a user in the system can have a ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(o.OK,{section:"what-are-direct-and-implied-relationships",linkName:"direct relationship"})})," with the ",(0,r.jsx)(n.code,{children:"team"})," type as a ",(0,r.jsx)(n.code,{children:"member"})," for objects of:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["type ",(0,r.jsx)(n.code,{children:"user"})]}),"\n",(0,r.jsxs)(n.li,{children:["the ",(0,r.jsx)(n.code,{children:"user"})," ",(0,r.jsx)(o.OK,{section:"what-is-type-bound-public-access",linkName:"type bound public access"})," (",(0,r.jsx)(n.code,{children:"user:*"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/pr-preview/pr-938/docs/modeling/building-blocks/usersets",children:"usersets"})," that have a ",(0,r.jsx)(n.code,{children:"team"})," type and a ",(0,r.jsx)(n.code,{children:"member"})," relation (e.g. ",(0,r.jsx)(n.code,{children:"team:product#member"}),")"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["In the type definition snippet above, ",(0,r.jsx)(n.code,{children:"anne"})," is a ",(0,r.jsx)(n.code,{children:"member"})," of ",(0,r.jsx)(n.code,{children:"team:product"})," if any of the following relationship tuple sets exist:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(o.AI,{relationshipTuples:[{user:"user:anne",relation:"member",object:"team:product",_description:"Anne is directly related to the product team as a member"}]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(o.AI,{relationshipTuples:[{user:"user:*",relation:"member",object:"team:product",_description:"Everyone (`*`) is directly related to the product team as a member"}]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(o.AI,{relationshipTuples:[{user:"team:contoso#member",relation:"member",object:"team:product",_description:"Members of the contoso team are members of the product team"},{user:"user:anne",relation:"member",object:"team:contoso",_description:"Anne is a member of the contoso team"}]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For more examples, see ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-938/docs/modeling/building-blocks/direct-relationships",children:"Modeling Building Blocks: Direct Relationships"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"referencing-other-relations-on-the-same-object",children:"Referencing Other Relations On The Same Object"}),"\n",(0,r.jsxs)(n.p,{children:["The same object can also reference other relations. Below is a simplified ",(0,r.jsx)(n.code,{children:"document"})," type definition:"]}),"\n",(0,r.jsx)(o.pB,{configuration:{schema_version:"1.1",type:"document",relations:{editor:{this:{}},viewer:{union:{child:[{this:{}},{computedUserset:{relation:"editor"}}]}},can_rename:{computedUserset:{relation:"editor"}}},metadata:{relations:{editor:{directly_related_user_types:[{type:"user"}]},viewer:{directly_related_user_types:[{type:"user"}]}}}},skipVersion:!0}),"\n",(0,r.jsxs)(n.p,{children:["Above, ",(0,r.jsx)(n.code,{children:"document"})," ",(0,r.jsx)(o.OK,{section:"what-is-a-type-definition",linkName:"type definition"})," defines all the ",(0,r.jsx)(o.OK,{section:"what-is-a-relation",linkName:"relations"})," that ",(0,r.jsx)(o.OK,{section:"what-is-a-user",linkName:"users"})," can have with an ",(0,r.jsx)(o.OK,{section:"what-is-an-object",linkName:"object"})," of type ",(0,r.jsx)(n.code,{children:"document"}),". In this case, the relations are ",(0,r.jsx)(n.code,{children:"editor"}),", ",(0,r.jsx)(n.code,{children:"viewer"})," and ",(0,r.jsx)(n.code,{children:"can_rename"}),". The ",(0,r.jsx)(n.code,{children:"viewer"})," and ",(0,r.jsx)(n.code,{children:"can_rename"})," relation definitions both reference ",(0,r.jsx)(n.code,{children:"editor"}),", which is another relation of the same type."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"can_rename"})," does not reference the ",(0,r.jsx)(n.a,{href:"#direct-relationship-type-restrictions",children:"direct relationship type restrictions"}),", which means a user cannot be directly assigned this relation and it must be inherited when the ",(0,r.jsx)(n.code,{children:"editor"})," relation is assigned. Conversely, the ",(0,r.jsx)(n.code,{children:"viewer"})," relation allows both direct and indirect relationships using the ",(0,r.jsx)(n.a,{href:"#the-union-operator",children:"Union Operator"}),"."]})}),"\n",(0,r.jsxs)(n.p,{children:["In the type definition snippet above, ",(0,r.jsx)(n.code,{children:"anne"})," is a ",(0,r.jsx)(n.code,{children:"viewer"})," of ",(0,r.jsx)(n.code,{children:"document:new-roadmap"})," if any one of the following relationship tuple sets exists:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"anne"})," is an ",(0,r.jsx)(n.em,{children:"editor"})," of ",(0,r.jsx)(n.em,{children:"document:new-roadmap"})]}),"\n",(0,r.jsx)(o.AI,{relationshipTuples:[{user:"user:anne",relation:"editor",object:"document:new-roadmap",_description:"Anne is an editor of the new-roadmap document"}]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"anne"})," is a ",(0,r.jsx)(n.em,{children:"viewer"})," of ",(0,r.jsx)(n.em,{children:"document:new-roadmap"})]}),"\n",(0,r.jsx)(o.AI,{relationshipTuples:[{user:"user:anne",relation:"viewer",object:"document:new-roadmap",_description:"Anne is a viewer of the new-roadmap document"}]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"anne"})," has a ",(0,r.jsx)(n.code,{children:"can_rename"})," relationship with ",(0,r.jsx)(n.code,{children:"document:new-roadmap"})," only if ",(0,r.jsx)(n.code,{children:"anne"})," has an ",(0,r.jsx)(n.code,{children:"editor"})," relationship with the document:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"anne"})," is an ",(0,r.jsx)(n.em,{children:"editor"})," of ",(0,r.jsx)(n.em,{children:"document:new-roadmap"}),"\n",(0,r.jsx)(o.AI,{relationshipTuples:[{user:"user:anne",relation:"editor",object:"document:new-roadmap",_description:"Anne is an editor of thew new-roadmap document"}]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For more examples, see ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-938/docs/modeling/building-blocks/concentric-relationships",children:"Modeling Building Blocks: Concentric Relationships"}),", ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-938/docs/modeling/roles-and-permissions",children:"Modeling: Roles and Permissions"})," and ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-938/docs/modeling/advanced/gdrive",children:"Advanced Modeling: Google Drive"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"referencing-relations-on-related-objects",children:"Referencing Relations On Related Objects"}),"\n",(0,r.jsxs)(n.p,{children:["Another set of ",(0,r.jsx)(o.OK,{section:"what-are-direct-and-implied-relationships",linkName:"indirect relationships"})," are made possible by referencing relations to other objects."]}),"\n",(0,r.jsxs)(n.p,{children:["The syntax is ",(0,r.jsx)(n.code,{children:"X from Y"})," and requires that:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["the other object is related to the current object as ",(0,r.jsx)(n.code,{children:"Y"})]}),"\n",(0,r.jsxs)(n.li,{children:["the ",(0,r.jsx)(n.em,{children:"user"})," is related to another object as ",(0,r.jsx)(n.code,{children:"X"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["See the ",(0,r.jsx)(n.em,{children:"authorization model"})," below."]}),"\n",(0,r.jsx)(o.pB,{configuration:{schema_version:"1.1",type_definitions:[{type:"user"},{type:"folder",relations:{viewer:{this:{}}},metadata:{relations:{viewer:{directly_related_user_types:[{type:"user"},{type:"folder",relation:"viewer"}]}}}},{type:"document",relations:{parent_folder:{this:{}},viewer:{union:{child:[{this:{}},{tupleToUserset:{tupleset:{object:"",relation:"parent_folder"},computedUserset:{object:"",relation:"viewer"}}}]}}},metadata:{relations:{parent_folder:{directly_related_user_types:[{type:"folder"}]},viewer:{directly_related_user_types:[{type:"user"}]}}}}]}}),"\n",(0,r.jsx)(n.p,{children:"The snippet below (taken from the authorization model above) states that viewers of a document are both (a) all users directly assigned the viewer relation and (b) all users who can view the document's parent folder."}),"\n",(0,r.jsx)(o.pB,{configuration:{schema_version:"1.1",type_definitions:[{type:"document",relations:{viewer:{union:{child:[{this:{}},{tupleToUserset:{tupleset:{object:"",relation:"parent_folder"},computedUserset:{object:"",relation:"viewer"}}}]}}},metadata:{relations:{viewer:{directly_related_user_types:[{type:"user"}]}}}}]},skipVersion:!0}),"\n",(0,r.jsxs)(n.p,{children:["In the authorization model above, ",(0,r.jsx)(n.code,{children:"user:anne"})," is a ",(0,r.jsx)(n.code,{children:"viewer"})," of ",(0,r.jsx)(n.code,{children:"document:new-roadmap"})," if any one of the following relationship tuples sets exists:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Anne is a viewer of the parent folder of the new-roadmap document","\n",(0,r.jsx)(o.AI,{relationshipTuples:[{user:"folder:planning",relation:"parent_folder",object:"document:new-roadmap",_description:"planning folder is the parent folder of the new-roadmap document"},{user:"user:anne",relation:"viewer",object:"folder:planning",_description:"anne is a viewer of the planning folder"}]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Anne is a viewer of the new-roadmap document (direct relationship)","\n",(0,r.jsx)(o.AI,{relationshipTuples:[{user:"user:anne",relation:"viewer",object:"document:new-roadmap",_description:"anne is a viewer of the new-roadmap document"}]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Referencing relations on related objects defines transitive implied relationship. If User A is related to Object B as a viewer, and Object B is related to Object C as parent, then User A is related to Object C as viewer. This can indicate that viewers of a folders are viewers of all documents in that folder."}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(o.bU,{format:o.Ed.LongForm})," does not allow the referenced relation (the word after ",(0,r.jsx)(n.code,{children:"from"}),", also called the tupleset) to reference another relation and does not allow non-concrete types (type bound public access (",(0,r.jsx)(n.code,{children:"<object_type>:*"}),") or usersets (",(0,r.jsx)(n.code,{children:"<object_type>#<relation>"}),")) in its type restrictions; adding them throws a validation error when calling ",(0,r.jsx)(n.code,{children:"WriteAuthorizationModel"}),"."]})}),"\n",(0,r.jsxs)(n.p,{children:["For more examples, see ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-938/docs/modeling/parent-child",children:"Modeling: Parent-Child Objects"}),", ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-938/docs/modeling/advanced/gdrive",children:"Advanced Modeling: Google Drive"}),", ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-938/docs/modeling/advanced/github",children:"Advanced Modeling: GitHub"}),", and ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-938/docs/modeling/advanced/entitlements",children:"Advanced Modeling: Entitlements"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"the-union-operator",children:"The Union Operator"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"union operator"})," (",(0,r.jsx)(n.code,{children:"or"})," in the DSL, ",(0,r.jsx)(n.code,{children:"union"})," in the JSON syntax) indicates that a ",(0,r.jsx)(o.OK,{section:"what-is-a-relationship",linkName:"relationship"})," exists if the ",(0,r.jsx)(o.OK,{section:"what-is-a-user",linkName:"user"})," is in any of the sets of users (",(0,r.jsx)(n.code,{children:"union"}),")."]}),"\n",(0,r.jsx)(o.pB,{configuration:{schema_version:"1.1",type_definitions:[{type:"document",relations:{viewer:{union:{child:[{this:{}},{computedUserset:{relation:"editor"}}]}}},metadata:{relations:{viewer:{directly_related_user_types:[{type:"user"}]}}}}]},skipVersion:!0}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(o.OK,{section:"what-is-a-type-definition",linkName:"type definition"})," snippet above, ",(0,r.jsx)(n.code,{children:"user:anne"})," is a ",(0,r.jsx)(n.code,{children:"viewer"})," of ",(0,r.jsx)(n.code,{children:"document:new-roadmap"})," if any of the following conditions are satisfied:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["there exists a ",(0,r.jsx)(o.OK,{section:"what-are-direct-and-implied-relationships",linkName:"direct relationship"})," with ",(0,r.jsx)(n.em,{children:"anne"})," as ",(0,r.jsx)(n.em,{children:"editor"})," of ",(0,r.jsx)(n.em,{children:"document:new-roadmap"}),"\n",(0,r.jsx)(o.AI,{relationshipTuples:[{user:"user:anne",relation:"editor",object:"document:new-roadmap"}]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"anne"})," is a ",(0,r.jsx)(n.em,{children:"viewer"})," of ",(0,r.jsx)(n.em,{children:"document:new-roadmap"}),"\n",(0,r.jsx)(o.AI,{relationshipTuples:[{user:"user:anne",relation:"viewer",object:"document:new-roadmap"}]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["The above ",(0,r.jsx)(o.OK,{section:"what-is-an-authorization-model",linkName:"authorization model"})," indicates that a user is related as a viewer if they are in any of the following:"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:['the userset of all users related to the object as "viewer", indicating that a user can be assigned a direct ',(0,r.jsx)(n.code,{children:"viewer"})," relation"]}),"\n",(0,r.jsx)(n.li,{children:'the userset of all users related to the object as "editor", indicating that a user who is an editor is also implicitly a viewer'}),"\n"]}),(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.code,{children:"anne"})," is in at least one of those usersets, meaning ",(0,r.jsx)(n.code,{children:"anne"})," is either an ",(0,r.jsx)(n.code,{children:"editor"})," or a ",(0,r.jsx)(n.code,{children:"viewer"}),", the ",(0,r.jsx)(o.OK,{section:"what-is-a-check-request",linkName:"check"})," on ",(0,r.jsx)(n.code,{children:'{"user": "user:anne", "relation": "viewer", "object": "document:new-roadmap"}'})," returns ",(0,r.jsx)(n.code,{children:'{"allowed": true}'}),"."]})]}),"\n",(0,r.jsxs)(n.p,{children:["For more examples, see ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-938/docs/modeling/building-blocks/concentric-relationships",children:"Modeling Building Blocks: Concentric Relationships"}),", ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-938/docs/modeling/roles-and-permissions",children:"Modeling Roles and Permissions"})," and ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-938/docs/modeling/advanced/iot#03-updating-our-authorization-model-to-facilitate-future-changes",children:"Advanced Modeling: Modeling for IoT"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"the-intersection-operator",children:"The Intersection Operator"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"intersection operator"})," (",(0,r.jsx)(n.code,{children:"and"})," in the DSL, ",(0,r.jsx)(n.code,{children:"intersection"})," in the JSON syntax) indicates that a ",(0,r.jsx)(o.OK,{section:"what-is-a-relationship",linkName:"relationship"})," exists if the ",(0,r.jsx)(o.OK,{section:"what-is-a-user",linkName:"user"})," is in all the sets of users."]}),"\n",(0,r.jsx)(o.pB,{configuration:{schema_version:"1.1",type_definitions:[{type:"document",relations:{viewer:{intersection:{child:[{computedUserset:{relation:"authorized_user"}},{computedUserset:{relation:"editor"}}]}}},metadata:{relations:{viewer:{directly_related_user_types:[{type:"user"}]}}}}]},skipVersion:!0}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(o.OK,{section:"what-is-a-type-definition",linkName:"type definition"})," snippet above, ",(0,r.jsx)(n.code,{children:"user:anne"})," is a ",(0,r.jsx)(n.code,{children:"viewer"})," of ",(0,r.jsx)(n.code,{children:"document:new-roadmap"})," if all of the following conditions are satisfied:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"anne"})," is an ",(0,r.jsx)(n.em,{children:"editor"})," of ",(0,r.jsx)(n.em,{children:"document:new-roadmap"}),"\n",(0,r.jsx)(o.AI,{relationshipTuples:[{user:"user:anne",relation:"editor",object:"document:new-roadmap"}]}),"\n","AND"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"anne"})," is an ",(0,r.jsx)(n.em,{children:"authorized_user"})," of ",(0,r.jsx)(n.em,{children:"document:new-roadmap"}),":","\n",(0,r.jsx)(o.AI,{relationshipTuples:[{user:"user:anne",relation:"authorized_user",object:"document:new-roadmap"}]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["The above ",(0,r.jsx)(o.OK,{section:"what-is-an-authorization-model",linkName:"authorization model"})," indicates that a user is related as a viewer if they are in all of the following:"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["the userset of all users related to the object as ",(0,r.jsx)(n.code,{children:"authorized_user"})]}),"\n",(0,r.jsxs)(n.li,{children:["the userset of all users related to the object as ",(0,r.jsx)(n.code,{children:"editor"})]}),"\n"]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"anne"})," must be in the intersection of the usersets (meaning both an ",(0,r.jsx)(n.code,{children:"editor"})," AND an ",(0,r.jsx)(n.code,{children:"authorized_user"}),") for the ",(0,r.jsx)(o.OK,{section:"what-is-a-check-request",linkName:"check"})," on ",(0,r.jsx)(n.code,{children:'{"user": "user:anne", "relation": "viewer", "object": "document:new-roadmap"}'})," to return ",(0,r.jsx)(n.code,{children:'{"allowed": true}'}),"."]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"anne"})," is not a ",(0,r.jsx)(n.code,{children:"viewer"})," for ",(0,r.jsx)(n.code,{children:"document:new-roadmap"})," if either of the following is true:"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"anne"})," is not an ",(0,r.jsx)(n.code,{children:"editor"})," to ",(0,r.jsx)(n.code,{children:"document:new-roadmap"}),": no relationship tuple of ",(0,r.jsx)(n.code,{children:'{"user": "user:anne", "relation": "editor", "object": "document:new-roadmap"}'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"anne"})," is not an ",(0,r.jsx)(n.code,{children:"authorized_user"})," on the ",(0,r.jsx)(n.code,{children:"document:new-roadmap"}),": no relationship tuple of ",(0,r.jsx)(n.code,{children:'{"user": "user:anne", "relation": "authorized_user", "object": "document:new-roadmap"}'})]}),"\n"]})]}),"\n",(0,r.jsxs)(n.p,{children:["For more examples, see ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-938/docs/modeling/multiple-restrictions",children:"Modeling with Multiple Restrictions"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"the-exclusion-operator",children:"The Exclusion Operator"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"exclusion operator"})," (",(0,r.jsx)(n.code,{children:"but not"})," in the DSL, ",(0,r.jsx)(n.code,{children:"difference"})," in the JSON syntax) indicates that a ",(0,r.jsx)(o.OK,{section:"what-is-a-relationship",linkName:"relationship"})," exists if the ",(0,r.jsx)(o.OK,{section:"what-is-a-user",linkName:"user"})," is in the base userset but not in the excluded userset. This operator is particularly useful when modeling exclusion or block lists."]}),"\n",(0,r.jsx)(o.pB,{configuration:{schema_version:"1.1",type_definitions:[{type:"document",relations:{viewer:{difference:{base:{this:{}},subtract:{computedUserset:{relation:"blocked"}}}}},metadata:{relations:{viewer:{directly_related_user_types:[{type:"user"}]}}}}]},skipVersion:!0}),"\n",(0,r.jsxs)(n.p,{children:["In the type definition snippet above, ",(0,r.jsx)(n.code,{children:"user:anne"})," is a ",(0,r.jsx)(n.code,{children:"viewer"})," of ",(0,r.jsx)(n.code,{children:"document:new-roadmap"})," if and only if:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"anne"})," has a direct relationship as ",(0,r.jsx)(n.code,{children:"viewer"})," to ",(0,r.jsx)(n.code,{children:"document:new-roadmap"})]}),"\n",(0,r.jsx)(o.AI,{relationshipTuples:[{user:"user:anne",relation:"viewer",object:"document:new-roadmap"}]}),"\n",(0,r.jsx)(n.p,{children:"AND"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"anne"})," is not blocked from ",(0,r.jsx)(n.code,{children:"document:new-roadmap"})," (i.e., the following relationship tuple must not exist):"]}),"\n",(0,r.jsx)(o.AI,{relationshipTuples:[{user:"user:anne",relation:"blocked",object:"document:new-roadmap"}]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For more information, see ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-938/docs/modeling/blocklists",children:"Modeling: Blocklists"}),"."]}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(o.OK,{section:"what-is-an-authorization-model",linkName:"authorization model"})," above indicates that a user is related as a viewer if they are in:"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["the userset of all users related to the object as ",(0,r.jsx)(n.code,{children:"viewer"})]}),"\n"]}),(0,r.jsx)(n.p,{children:"but not in:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["the userset of all users related to the object as ",(0,r.jsx)(n.code,{children:"blocked"})]}),"\n"]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"anne"})," must be both a ",(0,r.jsx)(n.code,{children:"viewer"})," and not ",(0,r.jsx)(n.code,{children:"blocked"})," for the ",(0,r.jsx)(o.OK,{section:"what-is-a-check-request",linkName:"check"})," on ",(0,r.jsx)(n.code,{children:'{"user": "user:anne", "relation": "viewer", "object": "document:new-roadmap"}'})," to return ",(0,r.jsx)(n.code,{children:'{"allowed": true}'}),"."]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"anne"})," is not a viewer for document",":new-roadmap"," if either of the following is true:"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"anne"})," is ",(0,r.jsx)(n.strong,{children:"not"})," assigned direct relationship as viewer to document:new-roadmap: ",(0,r.jsx)(n.strong,{children:"no relationship tuple of"})," ",(0,r.jsx)(n.code,{children:'{"user": "user:anne", "relation": "viewer", "object": "document:new-roadmap"}'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"anne"})," is blocked on the document",":new-roadmap"," ",(0,r.jsx)(n.code,{children:'{"user": "user:anne", "relation": "blocked", "object": "document:new-roadmap"}'})]}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"grouping-and-nesting-operators",children:"Grouping and nesting operators"}),"\n",(0,r.jsx)(n.p,{children:"You can define complex conditions by using parentheses to group and nest operators. Note that direct relationships can be included in an expression with parentheses."}),"\n",(0,r.jsx)(o.pB,{configuration:{schema_version:"1.1",type_definitions:[{type:"user",relations:{},metadata:null},{type:"organization",relations:{member:{this:{}}},metadata:{relations:{member:{directly_related_user_types:[{type:"user"}]}}}},{type:"folder",relations:{organization:{this:{}},parent:{this:{}},viewer:{intersection:{child:[{union:{child:[{this:{}},{tupleToUserset:{computedUserset:{relation:"viewer"},tupleset:{relation:"parent"}}}]}},{tupleToUserset:{computedUserset:{relation:"member"},tupleset:{relation:"organization"}}}]}}},metadata:{relations:{organization:{directly_related_user_types:[{type:"organization"}]},parent:{directly_related_user_types:[{type:"folder"}]},viewer:{directly_related_user_types:[{type:"user"}]}}}}]},skipVersion:!0}),"\n",(0,r.jsx)(n.h3,{id:"conditional-relationships",children:"Conditional relationships"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(o.bU,{format:o.Ed.ShortForm})," supports conditional relationships, which are only considered if a specific condition is met. You can learn more about Conditional Relationships in the ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-938/docs/modeling/conditions",children:"Modeling: Conditional Relationships"})," guide."]}),"\n",(0,r.jsx)(n.h2,{id:"equivalent-zanzibar-concepts",children:"Equivalent Zanzibar Concepts"}),"\n",(0,r.jsxs)(n.p,{children:["The JSON syntax accepted by the ",(0,r.jsx)(o.bU,{format:o.Ed.ShortForm})," API closely mirrors the syntax represented in the Zanzibar paper. The major modifications are a slight flattening and conversion of keys from ",(0,r.jsx)(n.code,{children:"snake_case"})," to ",(0,r.jsx)(n.code,{children:"camelCase"}),"."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Zanzibar"}),(0,r.jsxs)(n.th,{style:{textAlign:"left"},children:[(0,r.jsx)(o.bU,{format:o.Ed.ShortForm})," JSON"]}),(0,r.jsxs)(n.th,{style:{textAlign:"left"},children:[(0,r.jsx)(o.bU,{format:o.Ed.ShortForm})," DSL"]})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"this"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"this"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.a,{href:"#direct-relationship-type-restrictions",children:(0,r.jsx)(n.code,{children:"[<type1>,<type2>]"})})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"union"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"union"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"or"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"intersection"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"intersection"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"and"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"exclusion"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"difference"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"but not"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"tuple_to_userset"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"tupleToUserset"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"x from y"})})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://research.google/pubs/pub48190/",children:"Zanzibar paper"})," presents this example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'name: "doc"\n\nrelation { name: "owner" }\n\nrelation {\n  name: "editor"\n  userset_rewrite {\n    union {\n      child { _this {} }\n      child { computed_userset { relation: "owner" } }\n}}}\n\nrelation {\n name: "viewer"\n userset_rewrite {\n  union {\n    child { _this {} }\n    child { computed_userset { relation: "editor" } }\n    child { tuple_to_userset {\n      tupleset { relation: "parent" }\n      computed_userset {\n        object: $TUPLE_USERSET_OBJECT  # parent folder\n        relation: "viewer" }}}\n}}}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(o.bU,{format:o.Ed.ShortForm})," DSL, it becomes:"]}),"\n",(0,r.jsx)(o.pB,{onlyShow:o.dy.Friendly2,configuration:{schema_version:"1.1",type_definitions:[{type:"doc",relations:{owner:{this:{}},editor:{union:{child:[{this:{}},{computedUserset:{relation:"owner"}}]}},viewer:{union:{child:[{this:{}},{computedUserset:{relation:"editor"}},{tupleToUserset:{tupleset:{relation:"parent"},computedUserset:{relation:"viewer"}}}]}}},metadata:{relations:{owner:{directly_related_user_types:[{type:"user"}]},editor:{directly_related_user_types:[{type:"user"}]},viewer:{directly_related_user_types:[{type:"user"}]}}}}]}}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(o.bU,{format:o.Ed.ShortForm})," JSON, it becomes:"]}),"\n",(0,r.jsx)(o.pB,{onlyShow:o.dy.Api,configuration:{schema_version:"1.1",type_definitions:[{type:"doc",relations:{owner:{this:{}},editor:{union:{child:[{this:{}},{computedUserset:{relation:"owner"}}]}},viewer:{union:{child:[{this:{}},{computedUserset:{relation:"editor"}},{tupleToUserset:{tupleset:{relation:"parent"},computedUserset:{relation:"viewer"}}}]}}},metadata:{relations:{owner:{directly_related_user_types:[{type:"user"}]},editor:{directly_related_user_types:[{type:"user"}]},viewer:{directly_related_user_types:[{type:"user"}]}}}}]}}),"\n",(0,r.jsx)(n.p,{children:"The following snippet:"}),"\n",(0,r.jsx)(o.pB,{configuration:{schema_version:"1.1",type_definitions:[{type:"doc",relations:{viewer:{union:{child:[{this:{}},{computedUserset:{relation:"editor"}},{tupleToUserset:{tupleset:{relation:"parent"},computedUserset:{relation:"viewer"}}}]}}},metadata:{relations:{viewer:{directly_related_user_types:[{type:"user"}]}}}}]}}),"\n",(0,r.jsx)(n.p,{children:"Results in the following outcome:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The users with a viewer relationship to a certain doc are any of:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["the set of users who are ",(0,r.jsx)(o.OK,{section:"what-are-direct-and-implied-relationships",linkName:"directly related"})," with this doc as ",(0,r.jsx)(n.code,{children:"viewer"})]}),"\n",(0,r.jsxs)(n.li,{children:["the set of users who are related to this doc as ",(0,r.jsx)(n.code,{children:"editor"})]}),"\n",(0,r.jsxs)(n.li,{children:["the set of users who are related to any object OBJ_1 as ",(0,r.jsx)(n.code,{children:"viewer"}),", where object OBJ_1 is any object related to this doc as ",(0,r.jsx)(n.code,{children:"parent"})," (e.g. viewers of this doc's parent folder, where the parent folder is OBJ_1)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Learn more about Zanzibar at the ",(0,r.jsx)(n.a,{href:"https://zanzibar.academy",children:"Zanzibar Academy"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"related-sections",children:"Related Sections"}),"\n",(0,r.jsx)(o.XQ,{description:"Check the following sections for more on how to use the configuration language in modeling authorization.",relatedLinks:[{title:"{ProductName} Concepts",description:"Learn about the {ProductName} Concepts.",link:"./concepts",id:"./concepts"},{title:"Modeling: Getting Started",description:"Learn about how to get started with modeling your permission system in {ProductName}.",link:"./modeling/getting-started",id:"./modeling/getting-started"},{title:"Direct Access",description:"Learn about modeling user access to an object.",link:"./modeling/direct-access",id:"./modeling/direct-access"}]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);