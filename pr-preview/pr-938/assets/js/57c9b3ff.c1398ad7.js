"use strict";(self.webpackChunkopenfga_dev=self.webpackChunkopenfga_dev||[]).push([[6110],{33682:(e,d,r)=>{r.r(d),r.d(d,{assets:()=>x,contentTitle:()=>o,default:()=>_,frontMatter:()=>h,metadata:()=>s,toc:()=>j});const s=JSON.parse('{"id":"content/getting-started/setup-openfga/configuration","title":"OpenFGA Configuration Options","description":"Configuring Options for the OpenFGA Server","source":"@site/docs/content/getting-started/setup-openfga/configuration.mdx","sourceDirName":"content/getting-started/setup-openfga","slug":"/getting-started/setup-openfga/configuration","permalink":"/pr-preview/pr-938/docs/getting-started/setup-openfga/configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/openfga/openfga.dev/edit/main/docs/content/getting-started/setup-openfga/configuration.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"OpenFGA Configuration Options","description":"Configuring Options for the OpenFGA Server","sidebar_position":1,"slug":"/getting-started/setup-openfga/configuration"},"sidebar":"docs","previous":{"title":"Configure OpenFGA","permalink":"/pr-preview/pr-938/docs/getting-started/setup-openfga/configure-openfga"},"next":{"title":"\ud83d\udc33 Docker","permalink":"/pr-preview/pr-938/docs/getting-started/setup-openfga/docker"}}');var i=r(74848),n=r(28453),t=r(89987),c=r(11470),l=r(19365);const h={title:"OpenFGA Configuration Options",description:"Configuring Options for the OpenFGA Server",sidebar_position:1,slug:"/getting-started/setup-openfga/configuration"},o="OpenFGA Configuration Options",x={},j=[{value:"Passing in the options",id:"passing-in-the-options",level:2},{value:"List of options",id:"list-of-options",level:2},{value:"Related Sections",id:"related-sections",level:2}];function a(e){const d={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(d.header,{children:(0,i.jsx)(d.h1,{id:"openfga-configuration-options",children:"OpenFGA Configuration Options"})}),"\n",(0,i.jsx)(d.h2,{id:"passing-in-the-options",children:"Passing in the options"}),"\n",(0,i.jsx)(d.p,{children:"You can configure the OpenFGA server in three ways:"}),"\n",(0,i.jsxs)(d.ul,{children:["\n",(0,i.jsx)(d.li,{children:"Using a configuration file."}),"\n",(0,i.jsx)(d.li,{children:"Using environment variables."}),"\n",(0,i.jsx)(d.li,{children:"Using command line parameters."}),"\n"]}),"\n",(0,i.jsx)(d.p,{children:"If the same option is configured in multiple ways the command line parameters will take precedence over environment variables, which will take precedence over the configuration file."}),"\n",(0,i.jsxs)(d.p,{children:["The configuration options and their default values are listed in the table below based on the ",(0,i.jsx)(d.a,{href:"https://github.com/openfga/openfga/blob/main/.config-schema.json",children:"config-schema.json"}),"."]}),"\n",(0,i.jsxs)(c.A,{groupId:"configuration",children:[(0,i.jsxs)(l.A,{value:"configuration file",label:"Configuration File",children:[(0,i.jsxs)(d.p,{children:["You can configure the OpenFGA server with a ",(0,i.jsx)(d.code,{children:"config.yaml"})," file, which can be specified in either:"]}),(0,i.jsxs)(d.ul,{children:["\n",(0,i.jsx)(d.li,{children:(0,i.jsx)(d.code,{children:"/etc/openfga"})}),"\n",(0,i.jsx)(d.li,{children:(0,i.jsx)(d.code,{children:"$HOME/.openfga"})}),"\n",(0,i.jsxs)(d.li,{children:[(0,i.jsx)(d.code,{children:"."})," (i.e., the current working directory)."]}),"\n"]}),(0,i.jsx)(d.p,{children:"The OpenFGA server will search for the configuration file in the above order."}),(0,i.jsx)(d.p,{children:"Here is a sample configuration to run OpenFGA with a Postgres database and using a preshared key for authentication:"}),(0,i.jsx)(d.pre,{children:(0,i.jsx)(d.code,{className:"language-yaml",children:'datastore:\n  engine: postgres\n  uri: postgres://user:password@localhost:5432/mydatabase\nauthn:\n  method: preshared\n  preshared:\n    keys: ["key1", "key2"]\nplayground:\n  enabled: false\n'})})]}),(0,i.jsxs)(l.A,{value:"environment variables",label:"Environment Variables",children:[(0,i.jsxs)(d.p,{children:["The OpenFGA server supports ",(0,i.jsx)(d.strong,{children:"environment variables"})," for configuration, and they will take priority over your configuration file.\nEach variable must be prefixed with ",(0,i.jsx)(d.code,{children:"OPENFGA_"})," and followed by your option in uppercase (",(0,i.jsx)(d.code,{children:"datastore.engine"})," becomes ",(0,i.jsx)(d.code,{children:"OPENFGA_DATASTORE_ENGINE"}),"), e.g."]}),(0,i.jsx)(d.pre,{children:(0,i.jsx)(d.code,{className:"language-shell",children:"# Running as a binary\nexport OPENFGA_DATASTORE_ENGINE=postgres\nexport OPENFGA_DATASTORE_URI='postgres://postgres:password@postgres:5432/postgres?sslmode=disable'\nexport OPENFGA_AUTHN_METHOD=preshared\nexport OPENFGA_AUTHN_PRESHARED_KEYS='key1,key2'\nexport OPENFGA_PLAYGROUND_ENABLED=false\nopenfga run\n\n# Running in docker\ndocker run docker.io/openfga/openfga:latest \\ \n  -e OPENFGA_DATASTORE_ENGINE=postgres \\ \n  -e OPENFGA_DATASTORE_URI='postgres://postgres:password@postgres:5432/postgres?sslmode=disable' \\ \n  -e OPENFGA_AUTHN_METHOD=preshared \\ \n  -e OPENFGA_AUTHN_PRESHARED_KEYS='key1,key2' \\ \n  -e OPENFGA_PLAYGROUND_ENABLED=false \\ \n  run\n"})})]}),(0,i.jsxs)(l.A,{value:"command line parameters",label:"Command Line Parameters (Flags)",children:[(0,i.jsxs)(d.p,{children:["Command line parameters take precedence over environment variables and options in the configuration file. They are prefixed with ",(0,i.jsx)(d.code,{children:"--"})," (",(0,i.jsx)(d.code,{children:"OPENFGA_DATASTORE_ENGINE"})," becomes ",(0,i.jsx)(d.code,{children:"--datastore-engine"}),"), e.g."]}),(0,i.jsx)(d.pre,{children:(0,i.jsx)(d.code,{className:"language-shell",children:"# Running as a binary\nopenfga run \\ \n  --datastore-engine postgres \\ \n  --datastore-uri 'postgres://postgres:password@postgres:5432/postgres?sslmode=disable' \\ \n  --authn-method=preshared \\ \n  --authn-preshared-keys='key1,key2' \\ \n  --playground-enabled=false\n\n# Running in docker\ndocker run docker.io/openfga/openfga:latest run \\ \n  --datastore-engine postgres \\ \n  --datastore-uri 'postgres://postgres:password@postgres:5432/postgres?sslmode=disable' \\ \n  --authn-method=preshared \\ \n  --authn-preshared-keys='key1,key2' \\ \n  --playground-enabled=false\n"})})]})]}),"\n",(0,i.jsx)(d.h2,{id:"list-of-options",children:"List of options"}),"\n",(0,i.jsxs)(d.p,{children:["The following table lists the configuration options for the OpenFGA server, based on the ",(0,i.jsx)(d.a,{href:"https://github.com/openfga/openfga/blob/main/.config-schema.json",children:"config-schema.json"}),"."]}),"\n",(0,i.jsxs)(d.table,{children:[(0,i.jsx)(d.thead,{children:(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.th,{children:"Config File"}),(0,i.jsx)(d.th,{children:"Env Var"}),(0,i.jsx)(d.th,{children:"Flag Name"}),(0,i.jsx)(d.th,{children:"Type"}),(0,i.jsx)(d.th,{children:"Description"}),(0,i.jsx)(d.th,{children:"Default Value"})]})}),(0,i.jsxs)(d.tbody,{children:[(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"maxTuplesPerWrite"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_MAX_TUPLES_PER_WRITE",children:(0,i.jsx)("code",{children:"OPENFGA_MAX_TUPLES_PER_WRITE"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"max-tuples-per-write"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"The maximum allowed number of tuples per Write transaction."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"100"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"maxTypesPerAuthorizationModel"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_MAX_TYPES_PER_AUTHORIZATION_MODEL",children:(0,i.jsx)("code",{children:"OPENFGA_MAX_TYPES_PER_AUTHORIZATION_MODEL"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"max-types-per-authorization-model"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"The maximum allowed number of type definitions per authorization model."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"100"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"maxAuthorizationModelSizeInBytes"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_MAX_AUTHORIZATION_MODEL_SIZE_IN_BYTES",children:(0,i.jsx)("code",{children:"OPENFGA_MAX_AUTHORIZATION_MODEL_SIZE_IN_BYTES"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"max-authorization-model-size-in-bytes"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"The maximum size in bytes allowed for persisting an Authorization Model (default is 256KB)."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"262144"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"maxConcurrentReadsForCheck"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_MAX_CONCURRENT_READS_FOR_CHECK",children:(0,i.jsx)("code",{children:"OPENFGA_MAX_CONCURRENT_READS_FOR_CHECK"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"max-concurrent-reads-for-check"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"The maximum allowed number of concurrent reads in a single Check query (default is MaxUint32)."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"4294967295"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"maxConcurrentReadsForListObjects"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_MAX_CONCURRENT_READS_FOR_LIST_OBJECTS",children:(0,i.jsx)("code",{children:"OPENFGA_MAX_CONCURRENT_READS_FOR_LIST_OBJECTS"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"max-concurrent-reads-for-list-objects"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"The maximum allowed number of concurrent reads in a single ListObjects query (default is MaxUint32)."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"4294967295"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"maxConcurrentReadsForListUsers"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_MAX_CONCURRENT_READS_FOR_LIST_USERS",children:(0,i.jsx)("code",{children:"OPENFGA_MAX_CONCURRENT_READS_FOR_LIST_USERS"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"max-concurrent-reads-for-list-users"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"The maximum allowed number of concurrent reads in a single ListUsers query (default is MaxUint32)."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"4294967295"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"maxConcurrentChecksPerBatchCheck"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_MAX_CONCURRENT_CHECKS_PER_BATCH_CHECK",children:(0,i.jsx)("code",{children:"OPENFGA_MAX_CONCURRENT_CHECKS_PER_BATCH_CHECK"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"max-concurrent-checks-per-batch-check"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"The maximum number of checks that can be processed concurrently in a batch check request."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"50"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"maxChecksPerBatchCheck"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_MAX_CHECKS_PER_BATCH_CHECK",children:(0,i.jsx)("code",{children:"OPENFGA_MAX_CHECKS_PER_BATCH_CHECK"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"max-checks-per-batch-check"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"The maximum number of tuples allowed in a BatchCheck request."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"50"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"maxConditionEvaluationCost"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_MAX_CONDITION_EVALUATION_COST",children:(0,i.jsx)("code",{children:"OPENFGA_MAX_CONDITION_EVALUATION_COST"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"max-condition-evaluation-cost"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"The maximum cost for CEL condition evaluation before a request returns an error (default is 100)."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"100"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"changelogHorizonOffset"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_CHANGELOG_HORIZON_OFFSET",children:(0,i.jsx)("code",{children:"OPENFGA_CHANGELOG_HORIZON_OFFSET"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"changelog-horizon-offset"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"The offset (in minutes) from the current time. Changes that occur after this offset will not be included in the response of ReadChanges."}),(0,i.jsx)(d.td,{})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"resolveNodeLimit"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_RESOLVE_NODE_LIMIT",children:(0,i.jsx)("code",{children:"OPENFGA_RESOLVE_NODE_LIMIT"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"resolve-node-limit"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"Maximum resolution depth to attempt before throwing an error (defines how deeply nested an authorization model can be before a query errors out)."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"25"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"resolveNodeBreadthLimit"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_RESOLVE_NODE_BREADTH_LIMIT",children:(0,i.jsx)("code",{children:"OPENFGA_RESOLVE_NODE_BREADTH_LIMIT"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"resolve-node-breadth-limit"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"Defines how many nodes on a given level can be evaluated concurrently in a Check resolution tree."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"100"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"listObjectsDeadline"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_LIST_OBJECTS_DEADLINE",children:(0,i.jsx)("code",{children:"OPENFGA_LIST_OBJECTS_DEADLINE"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"list-objects-deadline"})}),(0,i.jsx)(d.td,{children:"string (duration)"}),(0,i.jsx)(d.td,{children:"The timeout deadline for serving ListObjects requests"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"3s"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"listObjectsMaxResults"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_LIST_OBJECTS_MAX_RESULTS",children:(0,i.jsx)("code",{children:"OPENFGA_LIST_OBJECTS_MAX_RESULTS"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"list-objects-max-results"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"The maximum results to return in the non-streaming ListObjects API response. If 0, all results can be returned"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"1000"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"listUsersDeadline"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_LIST_USERS_DEADLINE",children:(0,i.jsx)("code",{children:"OPENFGA_LIST_USERS_DEADLINE"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"list-users-deadline"})}),(0,i.jsx)(d.td,{children:"string (duration)"}),(0,i.jsx)(d.td,{children:"The timeout deadline for serving ListUsers requests. If 0s, there is no deadline"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"3s"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"listUsersMaxResults"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_LIST_USERS_MAX_RESULTS",children:(0,i.jsx)("code",{children:"OPENFGA_LIST_USERS_MAX_RESULTS"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"list-users-max-results"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"The maximum results to return in ListUsers API response. If 0, all results can be returned"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"1000"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"requestDurationDatastoreQueryCountBuckets"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_REQUEST_DURATION_DATASTORE_QUERY_COUNT_BUCKETS",children:(0,i.jsx)("code",{children:"OPENFGA_REQUEST_DURATION_DATASTORE_QUERY_COUNT_BUCKETS"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"request-duration-datastore-query-count-buckets"})}),(0,i.jsx)(d.td,{children:"[]integer"}),(0,i.jsx)(d.td,{children:"Datastore query count buckets used to label the histogram metric for measuring request duration."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"50,200"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"requestDurationDispatchCountBuckets"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_REQUEST_DURATION_DISPATCH_COUNT_BUCKETS",children:(0,i.jsx)("code",{children:"OPENFGA_REQUEST_DURATION_DISPATCH_COUNT_BUCKETS"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"request-duration-dispatch-count-buckets"})}),(0,i.jsx)(d.td,{children:"[]integer"}),(0,i.jsx)(d.td,{children:"Dispatch count buckets used to label the histogram metric for measuring request duration."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"50,200"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"contextPropagationToDatastore"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_CONTEXT_PROPAGATION_TO_DATASTORE",children:(0,i.jsx)("code",{children:"OPENFGA_CONTEXT_PROPAGATION_TO_DATASTORE"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"context-propagation-to-datastore"})}),(0,i.jsx)(d.td,{children:"boolean"}),(0,i.jsx)(d.td,{children:"Propagate a requests context to the datastore implementation. Settings this parameter can result in connection pool draining on request aborts and timeouts."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"false"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"experimentals"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_EXPERIMENTALS",children:(0,i.jsx)("code",{children:"OPENFGA_EXPERIMENTALS"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"experimentals"})}),(0,i.jsxs)(d.td,{children:["[]string (enum=[",(0,i.jsx)(d.code,{children:"enable-check-optimizations"}),", ",(0,i.jsx)(d.code,{children:"enable-access-control"}),"])"]}),(0,i.jsx)(d.td,{children:"a list of experimental features to enable"}),(0,i.jsx)(d.td,{children:"``"})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"accessControl.enabled"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_ACCESS_CONTROL_ENABLED",children:(0,i.jsx)("code",{children:"OPENFGA_ACCESS_CONTROL_ENABLED"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"access-control-enabled"})}),(0,i.jsx)(d.td,{children:"boolean"}),(0,i.jsx)(d.td,{children:"Enable/disable the access control store."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"false"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"accessControl.storeId"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_ACCESS_CONTROL_STORE_ID",children:(0,i.jsx)("code",{children:"OPENFGA_ACCESS_CONTROL_STORE_ID"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"access-control-store-id"})}),(0,i.jsx)(d.td,{children:"string"}),(0,i.jsx)(d.td,{children:"The storeId to be used for the access control store."}),(0,i.jsx)(d.td,{})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"accessControl.modelId"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_ACCESS_CONTROL_MODEL_ID",children:(0,i.jsx)("code",{children:"OPENFGA_ACCESS_CONTROL_MODEL_ID"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"access-control-model-id"})}),(0,i.jsx)(d.td,{children:"string"}),(0,i.jsx)(d.td,{children:"The modelId to be used for the access control store."}),(0,i.jsx)(d.td,{})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"playground.enabled"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_PLAYGROUND_ENABLED",children:(0,i.jsx)("code",{children:"OPENFGA_PLAYGROUND_ENABLED"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"playground-enabled"})}),(0,i.jsx)(d.td,{children:"boolean"}),(0,i.jsx)(d.td,{children:"Enable/disable the OpenFGA Playground."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"true"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"playground.port"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_PLAYGROUND_PORT",children:(0,i.jsx)("code",{children:"OPENFGA_PLAYGROUND_PORT"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"playground-port"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"The port to serve the local OpenFGA Playground on."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"3000"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"profiler.enabled"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_PROFILER_ENABLED",children:(0,i.jsx)("code",{children:"OPENFGA_PROFILER_ENABLED"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"profiler-enabled"})}),(0,i.jsx)(d.td,{children:"boolean"}),(0,i.jsx)(d.td,{children:"Enabled/disable pprof profiling."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"false"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"profiler.addr"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_PROFILER_ADDR",children:(0,i.jsx)("code",{children:"OPENFGA_PROFILER_ADDR"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"profiler-addr"})}),(0,i.jsx)(d.td,{children:"string"}),(0,i.jsxs)(d.td,{children:["The host",":port"," address to serve the pprof profiler server on."]}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:":3001"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"datastore.engine"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_DATASTORE_ENGINE",children:(0,i.jsx)("code",{children:"OPENFGA_DATASTORE_ENGINE"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"datastore-engine"})}),(0,i.jsxs)(d.td,{children:["string (enum=[",(0,i.jsx)(d.code,{children:"memory"}),", ",(0,i.jsx)(d.code,{children:"postgres"}),", ",(0,i.jsx)(d.code,{children:"mysql"}),", ",(0,i.jsx)(d.code,{children:"sqlite"}),"])"]}),(0,i.jsx)(d.td,{children:"The datastore engine that will be used for persistence."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"memory"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"datastore.uri"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_DATASTORE_URI",children:(0,i.jsx)("code",{children:"OPENFGA_DATASTORE_URI"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"datastore-uri"})}),(0,i.jsx)(d.td,{children:"string"}),(0,i.jsx)(d.td,{children:"The connection uri to use to connect to the datastore (for any engine other than 'memory')."}),(0,i.jsx)(d.td,{})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"datastore.username"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_DATASTORE_USERNAME",children:(0,i.jsx)("code",{children:"OPENFGA_DATASTORE_USERNAME"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"datastore-username"})}),(0,i.jsx)(d.td,{children:"string"}),(0,i.jsx)(d.td,{children:"The connection username to connect to the datastore (overwrites any username provided in the connection uri)."}),(0,i.jsx)(d.td,{})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"datastore.password"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_DATASTORE_PASSWORD",children:(0,i.jsx)("code",{children:"OPENFGA_DATASTORE_PASSWORD"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"datastore-password"})}),(0,i.jsx)(d.td,{children:"string"}),(0,i.jsx)(d.td,{children:"The connection password to connect to the datastore (overwrites any password provided in the connection uri)."}),(0,i.jsx)(d.td,{})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"datastore.maxCacheSize"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_DATASTORE_MAX_CACHE_SIZE",children:(0,i.jsx)("code",{children:"OPENFGA_DATASTORE_MAX_CACHE_SIZE"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"datastore-max-cache-size"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"The maximum number of authorization models that will be cached in memory"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"100000"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"datastore.maxOpenConns"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_DATASTORE_MAX_OPEN_CONNS",children:(0,i.jsx)("code",{children:"OPENFGA_DATASTORE_MAX_OPEN_CONNS"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"datastore-max-open-conns"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"The maximum number of open connections to the datastore."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"30"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"datastore.maxIdleConns"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_DATASTORE_MAX_IDLE_CONNS",children:(0,i.jsx)("code",{children:"OPENFGA_DATASTORE_MAX_IDLE_CONNS"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"datastore-max-idle-conns"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"the maximum number of connections to the datastore in the idle connection pool."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"10"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"datastore.connMaxIdleTime"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_DATASTORE_CONN_MAX_IDLE_TIME",children:(0,i.jsx)("code",{children:"OPENFGA_DATASTORE_CONN_MAX_IDLE_TIME"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"datastore-conn-max-idle-time"})}),(0,i.jsx)(d.td,{children:"string (duration)"}),(0,i.jsx)(d.td,{children:"the maximum amount of time a connection to the datastore may be idle"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"0s"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"datastore.connMaxLifetime"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_DATASTORE_CONN_MAX_LIFETIME",children:(0,i.jsx)("code",{children:"OPENFGA_DATASTORE_CONN_MAX_LIFETIME"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"datastore-conn-max-lifetime"})}),(0,i.jsx)(d.td,{children:"string (duration)"}),(0,i.jsx)(d.td,{children:"the maximum amount of time a connection to the datastore may be reused"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"0s"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"datastore.metrics.enabled"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_DATASTORE_METRICS_ENABLED",children:(0,i.jsx)("code",{children:"OPENFGA_DATASTORE_METRICS_ENABLED"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"datastore-metrics-enabled"})}),(0,i.jsx)(d.td,{children:"boolean"}),(0,i.jsx)(d.td,{children:"enable/disable sql metrics for the datastore"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"false"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"authn.method"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_AUTHN_METHOD",children:(0,i.jsx)("code",{children:"OPENFGA_AUTHN_METHOD"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"authn-method"})}),(0,i.jsxs)(d.td,{children:["string (enum=[",(0,i.jsx)(d.code,{children:"none"}),", ",(0,i.jsx)(d.code,{children:"preshared"}),", ",(0,i.jsx)(d.code,{children:"oidc"}),"])"]}),(0,i.jsx)(d.td,{children:"The authentication method to use."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"none"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"authn.preshared.keys"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_AUTHN_PRESHARED_KEYS",children:(0,i.jsx)("code",{children:"OPENFGA_AUTHN_PRESHARED_KEYS"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"authn-preshared-keys"})}),(0,i.jsx)(d.td,{children:"[]string"}),(0,i.jsx)(d.td,{children:"List of preshared keys used for authentication"}),(0,i.jsx)(d.td,{})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"authn.oidc.issuer"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_AUTHN_OIDC_ISSUER",children:(0,i.jsx)("code",{children:"OPENFGA_AUTHN_OIDC_ISSUER"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"authn-oidc-issuer"})}),(0,i.jsx)(d.td,{children:"string"}),(0,i.jsx)(d.td,{children:"The OIDC issuer (authorization server) signing the tokens."}),(0,i.jsx)(d.td,{})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"authn.oidc.audience"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_AUTHN_OIDC_AUDIENCE",children:(0,i.jsx)("code",{children:"OPENFGA_AUTHN_OIDC_AUDIENCE"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"authn-oidc-audience"})}),(0,i.jsx)(d.td,{children:"string"}),(0,i.jsx)(d.td,{children:"The OIDC audience of the tokens being signed by the authorization server."}),(0,i.jsx)(d.td,{})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"authn.oidc.issuerAliases"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_AUTHN_OIDC_ISSUER_ALIASES",children:(0,i.jsx)("code",{children:"OPENFGA_AUTHN_OIDC_ISSUER_ALIASES"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"authn-oidc-issuer-aliases"})}),(0,i.jsx)(d.td,{children:"[]string"}),(0,i.jsxs)(d.td,{children:["the OIDC issuer DNS aliases that will be accepted as valid when verifying the ",(0,i.jsx)(d.code,{children:"iss"})," field of the JWTs."]}),(0,i.jsx)(d.td,{})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"authn.oidc.subjects"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_AUTHN_OIDC_SUBJECTS",children:(0,i.jsx)("code",{children:"OPENFGA_AUTHN_OIDC_SUBJECTS"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"authn-oidc-subjects"})}),(0,i.jsx)(d.td,{children:"[]string"}),(0,i.jsxs)(d.td,{children:["the OIDC subject names that will be accepted as valid when verifying the ",(0,i.jsx)(d.code,{children:"sub"})," field of the JWTs. If empty, every ",(0,i.jsx)(d.code,{children:"sub"})," will be allowed"]}),(0,i.jsx)(d.td,{})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"authn.oidc.clientIdClaims"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_AUTHN_OIDC_CLIENT_ID_CLAIMS",children:(0,i.jsx)("code",{children:"OPENFGA_AUTHN_OIDC_CLIENT_ID_CLAIMS"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"authn-oidc-client-id-claims"})}),(0,i.jsx)(d.td,{children:"[]string"}),(0,i.jsxs)(d.td,{children:["the OIDC client id claims that will be used to parse the clientID - configure in order of priority (first is highest). Defaults to [",(0,i.jsx)(d.code,{children:"azp"}),", ",(0,i.jsx)(d.code,{children:"client_id"}),"]"]}),(0,i.jsx)(d.td,{})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"grpc.addr"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_GRPC_ADDR",children:(0,i.jsx)("code",{children:"OPENFGA_GRPC_ADDR"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"grpc-addr"})}),(0,i.jsx)(d.td,{children:"string"}),(0,i.jsxs)(d.td,{children:["The host",":port"," address to serve the grpc server on."]}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"0.0.0.0:8081"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"grpc.tls.enabled"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_GRPC_TLS_ENABLED",children:(0,i.jsx)("code",{children:"OPENFGA_GRPC_TLS_ENABLED"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"grpc-tls-enabled"})}),(0,i.jsx)(d.td,{children:"boolean"}),(0,i.jsx)(d.td,{children:"Enables or disables transport layer security (TLS)."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"false"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"grpc.tls.cert"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_GRPC_TLS_CERT",children:(0,i.jsx)("code",{children:"OPENFGA_GRPC_TLS_CERT"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"grpc-tls-cert"})}),(0,i.jsx)(d.td,{children:"string"}),(0,i.jsx)(d.td,{children:"The (absolute) file path of the certificate to use for the TLS connection."}),(0,i.jsx)(d.td,{})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"grpc.tls.key"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_GRPC_TLS_KEY",children:(0,i.jsx)("code",{children:"OPENFGA_GRPC_TLS_KEY"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"grpc-tls-key"})}),(0,i.jsx)(d.td,{children:"string"}),(0,i.jsx)(d.td,{children:"The (absolute) file path of the TLS key that should be used for the TLS connection."}),(0,i.jsx)(d.td,{})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"http.enabled"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_HTTP_ENABLED",children:(0,i.jsx)("code",{children:"OPENFGA_HTTP_ENABLED"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"http-enabled"})}),(0,i.jsx)(d.td,{children:"boolean"}),(0,i.jsx)(d.td,{children:"Enables or disables the OpenFGA HTTP server. If this is set to true then 'grpc.enabled' must be set to true."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"true"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"http.addr"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_HTTP_ADDR",children:(0,i.jsx)("code",{children:"OPENFGA_HTTP_ADDR"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"http-addr"})}),(0,i.jsx)(d.td,{children:"string"}),(0,i.jsxs)(d.td,{children:["The host",":port"," address to serve the HTTP server on."]}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"0.0.0.0:8080"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"http.tls.enabled"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_HTTP_TLS_ENABLED",children:(0,i.jsx)("code",{children:"OPENFGA_HTTP_TLS_ENABLED"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"http-tls-enabled"})}),(0,i.jsx)(d.td,{children:"boolean"}),(0,i.jsx)(d.td,{children:"Enables or disables transport layer security (TLS)."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"false"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"http.tls.cert"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_HTTP_TLS_CERT",children:(0,i.jsx)("code",{children:"OPENFGA_HTTP_TLS_CERT"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"http-tls-cert"})}),(0,i.jsx)(d.td,{children:"string"}),(0,i.jsx)(d.td,{children:"The (absolute) file path of the certificate to use for the TLS connection."}),(0,i.jsx)(d.td,{})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"http.tls.key"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_HTTP_TLS_KEY",children:(0,i.jsx)("code",{children:"OPENFGA_HTTP_TLS_KEY"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"http-tls-key"})}),(0,i.jsx)(d.td,{}),(0,i.jsx)(d.td,{children:"The (absolute) file path of the TLS key that should be used for the TLS connection."}),(0,i.jsx)(d.td,{})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"http.upstreamTimeout"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_HTTP_UPSTREAM_TIMEOUT",children:(0,i.jsx)("code",{children:"OPENFGA_HTTP_UPSTREAM_TIMEOUT"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"http-upstream-timeout"})}),(0,i.jsx)(d.td,{children:"string"}),(0,i.jsx)(d.td,{children:"The timeout duration for proxying HTTP requests upstream to the grpc endpoint."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"3s"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"http.corsAllowedOrigins"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_HTTP_CORS_ALLOWED_ORIGINS",children:(0,i.jsx)("code",{children:"OPENFGA_HTTP_CORS_ALLOWED_ORIGINS"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"http-cors-allowed-origins"})}),(0,i.jsx)(d.td,{children:"[]string"}),(0,i.jsx)(d.td,{children:"List of allowed origins for CORS requests"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"*"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"http.corsAllowedHeaders"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_HTTP_CORS_ALLOWED_HEADERS",children:(0,i.jsx)("code",{children:"OPENFGA_HTTP_CORS_ALLOWED_HEADERS"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"http-cors-allowed-headers"})}),(0,i.jsx)(d.td,{children:"[]string"}),(0,i.jsx)(d.td,{children:"List of allowed headers for CORS requests"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"*"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"log.format"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_LOG_FORMAT",children:(0,i.jsx)("code",{children:"OPENFGA_LOG_FORMAT"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"log-format"})}),(0,i.jsxs)(d.td,{children:["string (enum=[",(0,i.jsx)(d.code,{children:"text"}),", ",(0,i.jsx)(d.code,{children:"json"}),"])"]}),(0,i.jsx)(d.td,{children:"The log format to output logs in. For production we recommend 'json' format."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"text"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"log.level"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_LOG_LEVEL",children:(0,i.jsx)("code",{children:"OPENFGA_LOG_LEVEL"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"log-level"})}),(0,i.jsxs)(d.td,{children:["string (enum=[",(0,i.jsx)(d.code,{children:"none"}),", ",(0,i.jsx)(d.code,{children:"debug"}),", ",(0,i.jsx)(d.code,{children:"info"}),", ",(0,i.jsx)(d.code,{children:"warn"}),", ",(0,i.jsx)(d.code,{children:"error"}),", ",(0,i.jsx)(d.code,{children:"panic"}),", ",(0,i.jsx)(d.code,{children:"fatal"}),"])"]}),(0,i.jsx)(d.td,{children:"The log level to set. For production we recommend 'info' format."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"info"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"log.timestampFormat"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_LOG_TIMESTAMP_FORMAT",children:(0,i.jsx)("code",{children:"OPENFGA_LOG_TIMESTAMP_FORMAT"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"log-timestamp-format"})}),(0,i.jsxs)(d.td,{children:["string (enum=[",(0,i.jsx)(d.code,{children:"Unix"}),", ",(0,i.jsx)(d.code,{children:"ISO8601"}),"])"]}),(0,i.jsx)(d.td,{children:"The timestamp format to use for the log output."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"Unix"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"trace.enabled"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_TRACE_ENABLED",children:(0,i.jsx)("code",{children:"OPENFGA_TRACE_ENABLED"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"trace-enabled"})}),(0,i.jsx)(d.td,{children:"boolean"}),(0,i.jsx)(d.td,{children:"Enable tracing."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"false"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"trace.otlp.endpoint"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_TRACE_OTLP_ENDPOINT",children:(0,i.jsx)("code",{children:"OPENFGA_TRACE_OTLP_ENDPOINT"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"trace-otlp-endpoint"})}),(0,i.jsx)(d.td,{children:"string"}),(0,i.jsx)(d.td,{children:"The grpc endpoint of the trace collector"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"0.0.0.0:4317"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"trace.otlp.tls.enabled"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_TRACE_OTLP_TLS_ENABLED",children:(0,i.jsx)("code",{children:"OPENFGA_TRACE_OTLP_TLS_ENABLED"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"trace-otlp-tls-enabled"})}),(0,i.jsx)(d.td,{children:"boolean"}),(0,i.jsx)(d.td,{children:"Whether to use TLS connection for the trace collector"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"false"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"trace.sampleRatio"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_TRACE_SAMPLE_RATIO",children:(0,i.jsx)("code",{children:"OPENFGA_TRACE_SAMPLE_RATIO"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"trace-sample-ratio"})}),(0,i.jsx)(d.td,{children:"number"}),(0,i.jsx)(d.td,{children:"The fraction of traces to sample. 1 means all, 0 means none."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"0.2"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"trace.serviceName"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_TRACE_SERVICE_NAME",children:(0,i.jsx)("code",{children:"OPENFGA_TRACE_SERVICE_NAME"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"trace-service-name"})}),(0,i.jsx)(d.td,{children:"string"}),(0,i.jsx)(d.td,{children:"The service name included in sampled traces."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"openfga"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"metrics.enabled"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_METRICS_ENABLED",children:(0,i.jsx)("code",{children:"OPENFGA_METRICS_ENABLED"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"metrics-enabled"})}),(0,i.jsx)(d.td,{children:"boolean"}),(0,i.jsx)(d.td,{children:"enable/disable prometheus metrics on the '/metrics' endpoint"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"true"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"metrics.addr"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_METRICS_ADDR",children:(0,i.jsx)("code",{children:"OPENFGA_METRICS_ADDR"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"metrics-addr"})}),(0,i.jsx)(d.td,{children:"string"}),(0,i.jsxs)(d.td,{children:["the host",":port"," address to serve the prometheus metrics server on"]}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"0.0.0.0:2112"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"metrics.enableRPCHistograms"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_METRICS_ENABLE_RPC_HISTOGRAMS",children:(0,i.jsx)("code",{children:"OPENFGA_METRICS_ENABLE_RPC_HISTOGRAMS"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"metrics-enable-rpc-histograms"})}),(0,i.jsx)(d.td,{children:"boolean"}),(0,i.jsx)(d.td,{children:"enables prometheus histogram metrics for RPC latency distributions"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"false"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"checkCache.limit"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_CHECK_CACHE_LIMIT",children:(0,i.jsx)("code",{children:"OPENFGA_CHECK_CACHE_LIMIT"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"check-cache-limit"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"the size limit (in items) of the cache for Check (queries and iterators)"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"10000"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"checkIteratorCache.enabled"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_CHECK_ITERATOR_CACHE_ENABLED",children:(0,i.jsx)("code",{children:"OPENFGA_CHECK_ITERATOR_CACHE_ENABLED"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"check-iterator-cache-enabled"})}),(0,i.jsx)(d.td,{children:"boolean"}),(0,i.jsx)(d.td,{children:"enable caching of datastore iterators. The key is a string representing a database query, and the value is a list of tuples. Each iterator is the result of a database query, for example usersets related to a specific object, or objects related to a specific user, up to a certain number of tuples per iterator. If the request's consistency is HIGHER_CONSISTENCY, this cache is not used."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"false"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"checkIteratorCache.maxResults"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_CHECK_ITERATOR_CACHE_MAX_RESULTS",children:(0,i.jsx)("code",{children:"OPENFGA_CHECK_ITERATOR_CACHE_MAX_RESULTS"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"check-iterator-cache-max-results"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"if caching of datastore iterators of Check requests is enabled, this is the limit of tuples to cache per key"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"10000"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"checkIteratorCache.ttl"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_CHECK_ITERATOR_CACHE_TTL",children:(0,i.jsx)("code",{children:"OPENFGA_CHECK_ITERATOR_CACHE_TTL"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"check-iterator-cache-ttl"})}),(0,i.jsx)(d.td,{children:"string (duration)"}),(0,i.jsx)(d.td,{children:"if caching of datastore iterators of Check requests is enabled, this is the TTL of each value"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"10s"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"checkQueryCache.enabled"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_CHECK_QUERY_CACHE_ENABLED",children:(0,i.jsx)("code",{children:"OPENFGA_CHECK_QUERY_CACHE_ENABLED"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"check-query-cache-enabled"})}),(0,i.jsx)(d.td,{children:"boolean"}),(0,i.jsxs)(d.td,{children:["enable caching of Check requests. The key is a string representing a query, and the value is a boolean. For example, if you have a relation ",(0,i.jsx)(d.code,{children:"define viewer: owner or editor"}),", and the query is Check(user",":anne",", viewer, doc:1), we'll evaluate the ",(0,i.jsx)(d.code,{children:"owner"})," relation and the ",(0,i.jsx)(d.code,{children:"editor"})," relation and cache both results: (user",":anne",", viewer, doc:1) -> allowed=true and (user",":anne",", owner, doc:1) -> allowed=true. The cache is stored in-memory; the cached values are overwritten on every change in the result, and cleared after the configured TTL. This flag improves latency, but turns Check and ListObjects into eventually consistent APIs. If the request's consistency is HIGHER_CONSISTENCY, this cache is not used."]}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"false"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"checkQueryCache.limit"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_CHECK_QUERY_CACHE_LIMIT",children:(0,i.jsx)("code",{children:"OPENFGA_CHECK_QUERY_CACHE_LIMIT"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"check-query-cache-limit"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"DEPRECATED use OPENFGA_CHECK_CACHE_LIMIT. If caching of Check and ListObjects calls is enabled, this is the size limit (in items) of the cache"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"10000"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"checkQueryCache.ttl"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_CHECK_QUERY_CACHE_TTL",children:(0,i.jsx)("code",{children:"OPENFGA_CHECK_QUERY_CACHE_TTL"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"check-query-cache-ttl"})}),(0,i.jsx)(d.td,{children:"string (duration)"}),(0,i.jsx)(d.td,{children:"if caching of Check and ListObjects is enabled, this is the TTL of each value"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"10s"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"cacheController.enabled"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_CACHE_CONTROLLER_ENABLED",children:(0,i.jsx)("code",{children:"OPENFGA_CACHE_CONTROLLER_ENABLED"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"cache-controller-enabled"})}),(0,i.jsx)(d.td,{children:"boolean"}),(0,i.jsx)(d.td,{children:"enabling dynamic invalidation of check query cache and check iterator cache based on whether there are recent tuple writes. If enabled, cache will be invalidated when either 1) there are tuples written to the store OR 2) the check query cache or check iterator cache TTL has expired."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"false"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"cacheController.ttl"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_CACHE_CONTROLLER_TTL",children:(0,i.jsx)("code",{children:"OPENFGA_CACHE_CONTROLLER_TTL"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"cache-controller-ttl"})}),(0,i.jsx)(d.td,{children:"string (duration)"}),(0,i.jsx)(d.td,{children:"if cache controller is enabled, control how frequent read changes are invoked internally to query for recent tuple writes to the store."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"10s"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"checkDispatchThrottling.enabled"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_CHECK_DISPATCH_THROTTLING_ENABLED",children:(0,i.jsx)("code",{children:"OPENFGA_CHECK_DISPATCH_THROTTLING_ENABLED"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"check-dispatch-throttling-enabled"})}),(0,i.jsx)(d.td,{children:"boolean"}),(0,i.jsx)(d.td,{children:"enable throttling when check request's number of dispatches is high"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"false"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"checkDispatchThrottling.frequency"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_CHECK_DISPATCH_THROTTLING_FREQUENCY",children:(0,i.jsx)("code",{children:"OPENFGA_CHECK_DISPATCH_THROTTLING_FREQUENCY"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"check-dispatch-throttling-frequency"})}),(0,i.jsx)(d.td,{children:"string (duration)"}),(0,i.jsx)(d.td,{children:"the frequency period that the deprioritized throttling queue is evaluated for a check request. A higher value will result in more aggressive throttling"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"10\xb5s"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"checkDispatchThrottling.threshold"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_CHECK_DISPATCH_THROTTLING_THRESHOLD",children:(0,i.jsx)("code",{children:"OPENFGA_CHECK_DISPATCH_THROTTLING_THRESHOLD"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"check-dispatch-throttling-threshold"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"define the number of recursive operations to occur before getting throttled for a check request"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"100"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"checkDispatchThrottling.maxThreshold"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_CHECK_DISPATCH_THROTTLING_MAX_THRESHOLD",children:(0,i.jsx)("code",{children:"OPENFGA_CHECK_DISPATCH_THROTTLING_MAX_THRESHOLD"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"check-dispatch-throttling-max-threshold"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"define the maximum dispatch threshold beyond above which requests will be throttled. 0 will use the 'dispatchThrottling.threshold' value as maximum"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"0"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"listObjectsDispatchThrottling.enabled"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_LIST_OBJECTS_DISPATCH_THROTTLING_ENABLED",children:(0,i.jsx)("code",{children:"OPENFGA_LIST_OBJECTS_DISPATCH_THROTTLING_ENABLED"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"list-objects-dispatch-throttling-enabled"})}),(0,i.jsx)(d.td,{children:"boolean"}),(0,i.jsx)(d.td,{children:"enable throttling when list objects request's number of dispatches is high"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"false"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"listObjectsDispatchThrottling.frequency"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_LIST_OBJECTS_DISPATCH_THROTTLING_FREQUENCY",children:(0,i.jsx)("code",{children:"OPENFGA_LIST_OBJECTS_DISPATCH_THROTTLING_FREQUENCY"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"list-objects-dispatch-throttling-frequency"})}),(0,i.jsx)(d.td,{children:"string (duration)"}),(0,i.jsx)(d.td,{children:"the frequency period that the deprioritized throttling queue is evaluated for a list objects request. A higher value will result in more aggressive throttling"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"10\xb5s"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"listObjectsDispatchThrottling.threshold"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_LIST_OBJECTS_DISPATCH_THROTTLING_THRESHOLD",children:(0,i.jsx)("code",{children:"OPENFGA_LIST_OBJECTS_DISPATCH_THROTTLING_THRESHOLD"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"list-objects-dispatch-throttling-threshold"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"define the number of recursive operations to occur before getting throttled for a list objects request"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"100"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"listObjectsDispatchThrottling.maxThreshold"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_LIST_OBJECTS_DISPATCH_THROTTLING_MAX_THRESHOLD",children:(0,i.jsx)("code",{children:"OPENFGA_LIST_OBJECTS_DISPATCH_THROTTLING_MAX_THRESHOLD"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"list-objects-dispatch-throttling-max-threshold"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"define the maximum dispatch threshold beyond above which requests will be throttled for a list objects request. 0 will use the 'dispatchThrottling.threshold' value as maximum"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"0"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"listUsersDispatchThrottling.enabled"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_LIST_USERS_DISPATCH_THROTTLING_ENABLED",children:(0,i.jsx)("code",{children:"OPENFGA_LIST_USERS_DISPATCH_THROTTLING_ENABLED"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"list-users-dispatch-throttling-enabled"})}),(0,i.jsx)(d.td,{children:"boolean"}),(0,i.jsx)(d.td,{children:"enable throttling when list users request's number of dispatches is high"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"false"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"listUsersDispatchThrottling.frequency"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_LIST_USERS_DISPATCH_THROTTLING_FREQUENCY",children:(0,i.jsx)("code",{children:"OPENFGA_LIST_USERS_DISPATCH_THROTTLING_FREQUENCY"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"list-users-dispatch-throttling-frequency"})}),(0,i.jsx)(d.td,{children:"string (duration)"}),(0,i.jsx)(d.td,{children:"the frequency period that the deprioritized throttling queue is evaluated for a list users request. A higher value will result in more aggressive throttling"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"10\xb5s"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"listUsersDispatchThrottling.threshold"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_LIST_USERS_DISPATCH_THROTTLING_THRESHOLD",children:(0,i.jsx)("code",{children:"OPENFGA_LIST_USERS_DISPATCH_THROTTLING_THRESHOLD"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"list-users-dispatch-throttling-threshold"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"define the number of recursive operations to occur before getting throttled for a list users request"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"100"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"listUsersDispatchThrottling.maxThreshold"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_LIST_USERS_DISPATCH_THROTTLING_MAX_THRESHOLD",children:(0,i.jsx)("code",{children:"OPENFGA_LIST_USERS_DISPATCH_THROTTLING_MAX_THRESHOLD"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"list-users-dispatch-throttling-max-threshold"})}),(0,i.jsx)(d.td,{children:"integer"}),(0,i.jsx)(d.td,{children:"define the maximum dispatch threshold beyond above which requests will be throttled for a list users request. 0 will use the 'dispatchThrottling.threshold' value as maximum"}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"0"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"requestTimeout"})}),(0,i.jsx)(d.td,{children:(0,i.jsx)("div",{id:"OPENFGA_REQUEST_TIMEOUT",children:(0,i.jsx)("code",{children:"OPENFGA_REQUEST_TIMEOUT"})})}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"request-timeout"})}),(0,i.jsx)(d.td,{children:"string (duration)"}),(0,i.jsx)(d.td,{children:"The timeout duration for a request."}),(0,i.jsx)(d.td,{children:(0,i.jsx)(d.code,{children:"3s"})})]})]})]}),"\n",(0,i.jsx)(d.h2,{id:"related-sections",children:"Related Sections"}),"\n",(0,i.jsx)(t.XQ,{description:"Check the following sections for more on how to configure OpenFGA.",relatedLinks:[{title:"Configuring OpenFGA",description:"Learn more about the different ways to configure OpenFGA",link:"./configure-openfga",id:"./configure-openfga"},{title:"Production Best Practices",description:"Learn the best practices of running OpenFGA in a production environment",link:"../running-in-production",id:"./running-in-production"}]})]})}function _(e={}){const{wrapper:d}={...(0,n.R)(),...e.components};return d?(0,i.jsx)(d,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);