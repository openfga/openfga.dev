"use strict";(self.webpackChunkopenfga_dev=self.webpackChunkopenfga_dev||[]).push([[3168],{17427:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/getting-started-diagram-05-ffffd65d9b3eb843353c35f2f663a0c5.svg"},26688:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/getting-started-diagram-06-8eb4b8f4a925670b0ff05fa86c4b890e.svg"},39711:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/getting-started-diagram-01-55e7a873e7fdd4aa810922af9606ad0c.svg"},60684:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/getting-started-diagram-02-46c38ef0a05b5eac7e8a85c3ca02e20f.svg"},67249:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/getting-started-diagram-07-110858004c2892e28df4c404a50abce2.svg"},86850:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/getting-started-diagram-04-e8b2110197173b6308a3f797e76aa471.svg"},91224:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>Z,contentTitle:()=>X,default:()=>ee,frontMatter:()=>J,metadata:()=>i,toc:()=>Q});const i=JSON.parse('{"id":"content/modeling/getting-started","title":"Get Started with Modeling","description":"An introduction to modeling","source":"@site/docs/content/modeling/getting-started.mdx","sourceDirName":"content/modeling","slug":"/modeling/getting-started","permalink":"/pr-preview/pr-1133/docs/modeling/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/openfga/openfga.dev/edit/main/docs/content/modeling/getting-started.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Get Started with Modeling","description":"An introduction to modeling","sidebar_position":1,"slug":"/modeling/getting-started"},"sidebar":"docs","previous":{"title":"Modeling Guides","permalink":"/pr-preview/pr-1133/docs/modeling"},"next":{"title":"Direct Access","permalink":"/pr-preview/pr-1133/docs/modeling/direct-access"}}');var r,s,o,a,l=t(74848),h=t(28453),c=t(25558),d=t(96540);function u(){return u=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)({}).hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},u.apply(null,arguments)}const p=({title:e,titleId:n,...t})=>d.createElement("svg",u({xmlns:"http://www.w3.org/2000/svg",width:36,height:36,fill:"none",viewBox:"0 0 36 36","aria-labelledby":n},t),e?d.createElement("title",{id:n},e):null,r||(r=d.createElement("rect",{width:36,height:36,fill:"#EFF0F2",rx:6.42})),s||(s=d.createElement("path",{fill:"#C4C4C4",d:"M24.977 13.087V26a1.996 1.996 0 0 1-1.996 1.996h-9.985A1.996 1.996 0 0 1 11 26V10.01c0-1.103.894-1.997 1.996-1.997h6.993z"})),o||(o=d.createElement("path",{fill:"#65676E",d:"M24.985 13.055H21.61a1.65 1.65 0 0 1-1.65-1.65V8z"})),a||(a=d.createElement("path",{fill:"#9B9D9F",d:"M20.993 17h-5.986c-.555 0-1.007.447-1.007 1s.45 1 1.007 1h5.986c.555 0 1.007-.447 1.007-1s-.45-1-1.007-1M19.05 20h-4.1c-.524 0-.95.447-.95 1s.425 1 .95 1h4.1c.524 0 .95-.447.95-1s-.426-1-.95-1"})));var m,x,j,f,g,w;function y(){return y=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)({}).hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},y.apply(null,arguments)}const b=({title:e,titleId:n,...t})=>d.createElement("svg",y({xmlns:"http://www.w3.org/2000/svg",width:36,height:36,fill:"none",viewBox:"0 0 36 36","aria-labelledby":n},t),e?d.createElement("title",{id:n},e):null,m||(m=d.createElement("rect",{width:36,height:36,fill:"#EFF0F2",rx:6.42})),x||(x=d.createElement("path",{fill:"#C4C4C4",d:"M25.999 26.013H15.985V10H26a2 2 0 0 1 2 2.001v12.011a2 2 0 0 1-2 2.001"})),j||(j=d.createElement("path",{fill:"#65676E",d:"M10.001 26.013h5.995V10h-5.995A2 2 0 0 0 8 12.001v12.011a2 2 0 0 0 2.001 2.001"})),f||(f=d.createElement("path",{fill:"#C4C4C4",d:"M10.576 13.076a.572.572 0 1 0 0-1.144.572.572 0 0 0 0 1.144"})),g||(g=d.createElement("path",{fill:"#9B9D9F",d:"M12.548 16.008h-2.05a.493.493 0 1 1 0-.986h2.05a.493.493 0 1 1 0 .986M12.548 20.016h-2.05a.493.493 0 1 1 0-.986h2.05a.493.493 0 1 1 0 .986M13.545 18.011h-3.047a.493.493 0 1 1 0-.986h3.047a.493.493 0 1 1 0 .986"})),w||(w=d.createElement("path",{fill:"#C4C4C4",d:"M11.496 24.015h-.998a.493.493 0 1 1 0-.987h.998a.493.493 0 1 1 0 .987"})));var v,_,k,A,T,z,N,U,E,C,O;function F(){return F=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)({}).hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},F.apply(null,arguments)}const B=({title:e,titleId:n,...t})=>d.createElement("svg",F({xmlns:"http://www.w3.org/2000/svg",width:36,height:36,fill:"none",viewBox:"0 0 36 36","aria-labelledby":n},t),e?d.createElement("title",{id:n},e):null,v||(v=d.createElement("rect",{width:36,height:36,fill:"#EFF0F2",rx:6.42})),_||(_=d.createElement("path",{fill:"#C4C4C4",d:"M8.5 11.4c0-1.05.85-1.9 1.9-1.9h8.867c1.049 0 1.9.85 1.9 1.9v14.989H10.4a1.9 1.9 0 0 1-1.9-1.9z"})),k||(k=d.createElement("path",{fill:"#65676E",d:"M21.167 13.722H25.6c1.05 0 1.9.85 1.9 1.9v8.867a1.9 1.9 0 0 1-1.9 1.9h-4.433z"})),A||(A=d.createElement("rect",{width:2.111,height:2.111,x:11.667,y:12.667,fill:"#65676E",rx:1})),T||(T=d.createElement("rect",{width:2.111,height:2.111,x:11.667,y:16.889,fill:"#65676E",rx:1})),z||(z=d.createElement("rect",{width:2.111,height:2.111,x:11.667,y:21.111,fill:"#65676E",rx:1})),N||(N=d.createElement("rect",{width:2.111,height:2.111,x:15.889,y:12.667,fill:"#65676E",rx:1})),U||(U=d.createElement("rect",{width:2.111,height:2.111,x:15.889,y:16.889,fill:"#65676E",rx:1})),E||(E=d.createElement("rect",{width:2.111,height:2.111,x:23.278,y:16.889,fill:"#C4C4C4",rx:1})),C||(C=d.createElement("rect",{width:2.111,height:2.111,x:23.278,y:21.111,fill:"#C4C4C4",rx:1})),O||(O=d.createElement("rect",{width:2.111,height:2.111,x:15.889,y:21.111,fill:"#65676E",rx:1})));var R,I,M;function S(){return S=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)({}).hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},S.apply(null,arguments)}const L=({title:e,titleId:n,...t})=>d.createElement("svg",S({xmlns:"http://www.w3.org/2000/svg",width:36,height:36,fill:"none",viewBox:"0 0 36 36","aria-labelledby":n},t),e?d.createElement("title",{id:n},e):null,R||(R=d.createElement("rect",{width:36,height:36,fill:"#EFF0F2",rx:6.42})),d.createElement("mask",{id:"a",width:20,height:19,x:8,y:8,maskUnits:"userSpaceOnUse",style:{maskType:"alpha"}},I||(I=d.createElement("path",{fill:"#C4C4C4",d:"M8 8.8h20v18.095H8z"}))),M||(M=d.createElement("g",{mask:"url(#a)"},d.createElement("path",{fill:"#9B9D9F",d:"m18 14.729-3.333-5.714L8 20.443l3.81 5.714z"}),d.createElement("path",{fill:"#C4C4C4",d:"M21.333 20.443H28L21.758 9.014h-7.091z"}),d.createElement("path",{fill:"#65676E",d:"m14.854 20.443-3.044 5.714 12.992.089L28 20.443z"}))));var W,D,P,K,V,Y,G;function H(){return H=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)({}).hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},H.apply(null,arguments)}const q=({title:e,titleId:n,...t})=>d.createElement("svg",H({xmlns:"http://www.w3.org/2000/svg",width:106,height:106,fill:"none",viewBox:"0 0 106 106","aria-labelledby":n},t),e?d.createElement("title",{id:n},e):null,W||(W=d.createElement("rect",{width:105.948,height:105.948,y:.026,fill:"#BEC4CE",rx:20.252})),D||(D=d.createElement("path",{fill:"#2D2D37",d:"M64.013 73.904c-7.832 0-14.18-6.349-14.18-14.18 0-7.832 6.348-14.18 14.18-14.18s14.18 6.348 14.18 14.18-6.348 14.18-14.18 14.18"})),P||(P=d.createElement("path",{fill:"url(#a)",d:"M31.194 12.758h44.687c7.813 0 14.145 6.347 14.145 14.177v.006c0 7.83-6.332 14.177-14.145 14.177H31.194c-7.812 0-14.144-6.347-14.144-14.177v-.006c0-7.83 6.332-14.177 14.144-14.177"})),K||(K=d.createElement("path",{fill:"url(#b)",d:"M45.408 26.903v52.166c0 7.812-6.347 14.145-14.178 14.145h-.005c-7.83 0-14.178-6.333-14.178-14.145V26.903c0-7.812 6.348-14.145 14.178-14.145h.005c7.83 0 14.178 6.333 14.178 14.145"})),V||(V=d.createElement("path",{fill:"#fff",d:"M31.228 93.243c-7.832 0-14.18-6.35-14.18-14.181 0-7.832 6.348-14.18 14.18-14.18s14.18 6.348 14.18 14.18-6.349 14.18-14.18 14.18"})),Y||(Y=d.createElement("path",{fill:"#000",d:"M64.03 73.938c7.832 0 14.18-6.35 14.18-14.18 0-7.833-6.348-14.181-14.18-14.181s-14.18 6.349-14.18 14.18c0 7.832 6.348 14.18 14.18 14.18"})),G||(G=d.createElement("defs",null,d.createElement("linearGradient",{id:"a",x1:90.016,x2:17.04,y1:26.938,y2:26.938,gradientUnits:"userSpaceOnUse"},d.createElement("stop",{stopColor:"#635DFF"}),d.createElement("stop",{offset:1,stopColor:"#3885FF"})),d.createElement("linearGradient",{id:"b",x1:31.228,x2:31.228,y1:93.217,y2:12.762,gradientUnits:"userSpaceOnUse"},d.createElement("stop",{stopColor:"#FF4F40"}),d.createElement("stop",{offset:1,stopColor:"#F4D"}))))),J={title:"Get Started with Modeling",description:"An introduction to modeling",sidebar_position:1,slug:"/modeling/getting-started"},X="Get Started with Modeling",Z={},Q=[{value:"Introduction To Modeling",id:"introduction-to-modeling",level:2},{value:"A Process For Defining Authorization Models",id:"a-process-for-defining-authorization-models",level:2},{value:"01. Pick The Most Important Feature",id:"01-pick-the-most-important-feature",level:3},{value:"Write It In Plain Language",id:"write-it-in-plain-language",level:4},{value:"02. List The Object Types",id:"02-list-the-object-types",level:3},{value:"03. List Relations For Those Types",id:"03-list-relations-for-those-types",level:3},{value:"04. Define Relations",id:"04-define-relations",level:3},{value:"Type: Organization",id:"type-organization",level:4},{value:"Relation: Member",id:"relation-member",level:5},{value:"Complete Type Definition",id:"complete-type-definition",level:5},{value:"Type: Document",id:"type-document",level:4},{value:"Relation: Owner",id:"relation-owner",level:5},{value:"Relation: Editor",id:"relation-editor",level:5},{value:"Relation: Viewer",id:"relation-viewer",level:5},{value:"Relation: Parent",id:"relation-parent",level:5},{value:"Relation: can_share",id:"relation-can_share",level:5},{value:"Relation: can_view",id:"relation-can_view",level:5},{value:"Relation: can_write",id:"relation-can_write",level:5},{value:"Relation: can_change_owner",id:"relation-can_change_owner",level:5},{value:"Complete Type Definition",id:"complete-type-definition-1",level:5},{value:"05. Test The Model",id:"05-test-the-model",level:3},{value:"Write Relationship Tuples",id:"write-relationship-tuples",level:4},{value:"Create Assertions",id:"create-assertions",level:4},{value:"Run Assertions",id:"run-assertions",level:4},{value:"06. Iterate",id:"06-iterate",level:3},{value:"Related Sections",id:"related-sections",level:2}];function $(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,h.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"get-started-with-modeling",children:"Get Started with Modeling"})}),"\n",(0,l.jsx)(c.ZE,{}),"\n",(0,l.jsxs)(n.p,{children:["Creating a ",(0,l.jsx)(c.i4,{linkName:"Relationship Based Access Control (ReBAC)",section:"what-is-relationship-based-access-control"})," authorization model might feel odd at first. Most of us tend to think about authorization models in terms of roles and permissions. After all, most software works like that. Your existing systems are likely built on a model using roles and permissions."]}),"\n",(0,l.jsxs)(n.p,{children:["This guide outlines a process for defining your ",(0,l.jsx)(c.OK,{section:"what-is-an-authorization-model",linkName:"authorization model"})," with ",(0,l.jsx)(c.bU,{format:c.Ed.ProductLink}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["You can also check out the ",(0,l.jsx)(n.a,{href:"https://www.youtube.com/watch?v=5Lwy9aHXXHE&list=PLUR5l-oTFZqWaDdhEOVt_IfPOIbKo1Ypt",children:"Modeling Guide"})," on YouTube or the ",(0,l.jsx)(n.a,{href:"https://github.com/openfga/sample-stores",children:"Samples Repository"}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"introduction-to-modeling",children:"Introduction To Modeling"}),"\n",(0,l.jsxs)(n.p,{children:["To define a ReBAC model in ",(0,l.jsx)(c.bU,{format:c.Ed.ShortForm})," we recommend:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"If you have an existing system: forget about how your system works today and start thinking about how you want it to work in the future."}),"\n",(0,l.jsxs)(n.li,{children:["Thinking about authorization starting from the resources, or objects as ",(0,l.jsx)(c.bU,{format:c.Ed.ShortForm})," calls them."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"If that sounds hard, don't worry! We'll guide you through it."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(c.bU,{format:c.Ed.ShortForm})," is built to quickly and reliably make ",(0,l.jsx)(c.OK,{section:"what-is-a-check-request",linkName:"authorization checks"}),'\n. This means providing an answer to a question: "Can user U perform action A on object O?"']}),"\n",(0,l.jsxs)(n.p,{children:["ReBAC systems determine access from a ",(0,l.jsx)(c.OK,{section:"what-is-a-user",linkName:"user's"})," ",(0,l.jsx)(c.OK,{section:"what-is-a-relation",linkName:"relation"})," to an ",(0,l.jsx)(c.OK,{section:"what-is-an-object",linkName:"object"}),'. Authorization decisions are then yes or no answers to the question: "Does user U have relation R with object O?".']}),"\n",(0,l.jsxs)(c.N4,{cols:2,style:{marginTop:"2rem",marginBottom:"2rem"},children:[(0,l.jsx)(c.u6,{title:"General Authorization Check",appearance:"filled",children:(0,l.jsxs)(n.p,{children:['"Can user ',(0,l.jsx)("b",{children:"U"})," ",(0,l.jsx)("u",{children:"perform an action"})," ",(0,l.jsx)("b",{children:"A"})," on object ",(0,l.jsx)("b",{children:"O"}),'?"']})}),(0,l.jsx)(c.u6,{title:"{ProductName} (ReBAC) Authorization Check",children:(0,l.jsxs)(n.p,{children:['"Does user ',(0,l.jsx)("b",{children:"U"})," ",(0,l.jsx)("u",{children:"have relation"})," ",(0,l.jsx)("b",{children:"R"})," with object ",(0,l.jsx)("b",{children:"O"}),'?"']})})]}),"\n",(0,l.jsx)(n.p,{children:"In the previous example, a relation R should be defined that implies permission to action A. For example:"}),"\n",(0,l.jsxs)(c.N4,{cols:2,style:{marginTop:"2rem",marginBottom:"2rem"},children:[(0,l.jsx)(c.u6,{title:"General Authorization Check",appearance:"filled",children:(0,l.jsxs)(n.p,{children:['"Can user ',(0,l.jsx)("b",{children:"Jane"})," ",(0,l.jsx)("u",{children:"perform action"})," ",(0,l.jsx)("b",{children:"view"})," on object ",(0,l.jsx)("b",{children:"project sandcastle"}),'?"']})}),(0,l.jsx)(c.u6,{title:"{ProductName} (ReBAC) Authorization Check",children:(0,l.jsxs)(n.p,{children:['"Can user ',(0,l.jsx)("b",{children:"Jane"})," ",(0,l.jsx)("u",{children:"have relation"})," ",(0,l.jsx)("b",{children:"view"})," with object ",(0,l.jsx)("b",{children:"project sandcastle"}),'?"']})})]}),"\n",(0,l.jsx)(n.p,{children:"We'll provide more detailed examples throughout this article."}),"\n",(0,l.jsx)(n.p,{children:"When you are modeling, you need to answer a more general question:"}),"\n",(0,l.jsx)("div",{style:{marginTop:"2rem",marginBottom:"2rem"},children:(0,l.jsx)(c.u6,{icon:{icon:(0,l.jsx)(q,{}),alignment:"left"},title:"Why could user U perform an action A on an object O?"})}),"\n",(0,l.jsx)(n.p,{children:"If you can answer that question for all types of objects in your system, then you can codify that into an authorization model."}),"\n",(0,l.jsx)(n.p,{children:"Let's get started!"}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"a-process-for-defining-authorization-models",children:"A Process For Defining Authorization Models"}),"\n",(0,l.jsx)(n.p,{children:'Defining an authorization model requires codifying an answer to the question "why could user U perform an action A on an object O?" for all use cases or actions in your system. This is an iterative process. For the purpose of this guide, we\'ll go through one iteration of this process using a simplified Google Drive like system as an example.'}),"\n",(0,l.jsx)(n.p,{children:"Steps for defining your authorization model:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#01-pick-the-most-important-feature",children:"Pick the most important feature"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#02-list-the-object-types",children:"List the object types"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#03-list-relations-for-those-types",children:"List relations for those types"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#04-define-relations",children:"Define relations"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#05-test-the-model",children:"Test the model"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#06-iterate",children:"Iterate"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"The starting point",src:t(39711).A+"",width:"911",height:"188"})}),"\n",(0,l.jsx)(n.h3,{id:"01-pick-the-most-important-feature",children:"01. Pick The Most Important Feature"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"Pick the most important feature",src:t(60684).A+"",width:"911",height:"188"})}),"\n",(0,l.jsx)(n.p,{children:"A feature, in the context of this document, is an action or related set of actions your users can perform in your system. We'll introduce an example feature later in this section."}),"\n",(0,l.jsx)(n.p,{children:"Start with the most important feature. It doesn't have to be the most complex one, but it should be the most important one. You're probably more familiar with the authorization requirements for this feature than other less important use cases."}),"\n",(0,l.jsx)(n.admonition,{title:"Important",type:"caution",children:(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Requirement clarity is fundamental when defining an authorization model."}),"\n",(0,l.jsx)(n.li,{children:"The scope of the feature is not important at this point. You can always iterate later."}),"\n"]})}),"\n",(0,l.jsx)(n.h4,{id:"write-it-in-plain-language",children:"Write It In Plain Language"}),"\n",(0,l.jsx)(n.p,{children:'Once you\'ve picked a feature, describe its authorization related scope using simple language. Avoid using the word "roles", as this ties you to an RBAC way of thinking.'}),"\n",(0,l.jsx)(n.admonition,{type:"info",children:(0,l.jsxs)(n.p,{children:['Roles don\'t "disappear" in ReBAC systems like ',(0,l.jsx)(c.bU,{format:c.Ed.ShortForm}),". Your users might ",(0,l.jsx)(n.a,{href:"/pr-preview/pr-1133/docs/modeling/roles-and-permissions",children:"have roles on a given object, rather than the entire system"}),'. But starting from the term "role" might lead you down the wrong path. Instead it is better to discover roles while you are modeling.']})}),"\n",(0,l.jsxs)(n.p,{children:["Your feature description should include the ",(0,l.jsx)(c.OK,{section:"what-is-an-object",linkName:"objects"}),", ",(0,l.jsx)(c.OK,{section:"what-is-a-user",linkName:"users"})," and ",(0,l.jsx)(c.OK,{section:"what-is-a-user",linkName:"groups of users"})," participating in the system. Sentences should look like this:"]}),"\n",(0,l.jsx)("div",{style:{marginBottom:"2rem"},children:(0,l.jsx)(c.u6,{title:"A user {user} can perform action {action} to/on/in {object types} ... IF {conditions}",appearance:"filled",centerTitle:!0})}),"\n",(0,l.jsx)(n.p,{children:"Let's look at an example of a simplified Google Drive like system. We'll focus on the feature allowing users to create, read,\nupdate, delete, and share documents with other users."}),"\n",(0,l.jsx)("br",{}),"\n",(0,l.jsx)("br",{}),"\n",(0,l.jsx)(n.p,{children:"This feature can be described with these sentences:"}),"\n",(0,l.jsxs)(c.u6,{appearance:"filled",monoFontChildren:!0,children:[(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"A user can create a document in a drive if they are the owner of the drive."}),"\n",(0,l.jsx)(n.li,{children:"A user can create a folder in a drive if they are the owner of the drive."}),"\n",(0,l.jsx)(n.li,{children:"A user can create a document in a folder if they are the owner of the folder. The folder is the parent of the document."}),"\n",(0,l.jsx)(n.li,{children:"A user can create a folder in a folder if they are the owner of the folder. The existing folder is the parent of the new folder."}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"A user can share a document with another user or an organization as either editor or viewer if they are an owner or editor of a document or if they are an owner of the folder/drive that is the parent of the document."}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"A user can share a folder with another user or an organization as a viewer if they are an owner of the folder."}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"A user can view a document if they are an owner, viewer or editor of the document or if they are a viewer or owner of the folder/drive that is the parent of the document."}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"A user can edit a document if they are an owner or editor of the document or if they are an owner of the folder/drive that is the parent of the document."}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"A user can change the owner of a document if they are an owner of the document."}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"A user can change the owner of a folder if they are an owner of the folder."}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"A user can be a member of an organization."}),"\n",(0,l.jsx)("span",{style:{color:"gray"},children:(0,l.jsx)(n.p,{children:"How a user is added as a member to an organization is beyond the scope of the feature we picked to write down."})}),"\n"]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"A user can view a folder if they are the owner of the folder, or a viewer or owner of either the parent folder of the folder, or the parent drive of the folder."}),"\n"]})]}),"\n",(0,l.jsx)(n.h3,{id:"02-list-the-object-types",children:"02. List The Object Types"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"List the object types",src:t(96141).A+"",width:"911",height:"188"})}),"\n",(0,l.jsxs)(n.p,{children:["Next make a list of the ",(0,l.jsx)(c.OK,{section:"what-is-a-type",linkName:"types"})," of objects in your system. You might be able to identify the objects in your system from your existing domain/database model."]}),"\n",(0,l.jsx)(n.p,{children:"Find all the objects in the previous step using this template:"}),"\n",(0,l.jsx)("div",{style:{marginBottom:"2rem"},children:(0,l.jsx)(c.u6,{title:"A user {user} can perform action {action} to/on/in {object type} ... IF {conditions}",appearance:"filled",centerTitle:!0})}),"\n",(0,l.jsx)(n.p,{children:"These are all the object types from the previous step (in order of appearance) based on that template:"}),"\n",(0,l.jsxs)(c.N4,{cols:3,style:{marginTop:"2rem",marginBottom:"2rem"},children:[(0,l.jsx)(c.u6,{icon:{icon:(0,l.jsx)(p,{}),alignment:"left",label:"Document"}}),(0,l.jsx)(c.u6,{icon:{icon:(0,l.jsx)(b,{}),alignment:"left",label:"Folder"}}),(0,l.jsx)(c.u6,{icon:{icon:(0,l.jsx)(B,{}),alignment:"left",label:"Organization"}})]}),"\n",(0,l.jsxs)(n.p,{children:["Let's highlight all object types in ",(0,l.jsx)("span",{className:"blue-highlight-text",children:"blue"}),":"]}),"\n",(0,l.jsx)("div",{style:{marginTop:"2rem",marginBottom:"2rem"},children:(0,l.jsxs)(c.u6,{appearance:"filled",monoFontChildren:!0,children:[(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user can create a ",(0,l.jsx)("span",{className:"blue-highlight-text",children:"document"})," in a drive if they are the owner of the drive."]}),"\n",(0,l.jsxs)(n.li,{children:["A user can create a ",(0,l.jsx)("span",{className:"blue-highlight-text",children:"folder"})," in a drive if they are the owner of the drive."]}),"\n",(0,l.jsxs)(n.li,{children:["A user can create a ",(0,l.jsx)("span",{className:"blue-highlight-text",children:"document"})," in a folder if they are the owner of the folder."]}),"\n",(0,l.jsxs)(n.li,{children:["A user can create a ",(0,l.jsx)("span",{className:"blue-highlight-text",children:"folder"})," in a folder if they are the owner of the folder."]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user can share a ",(0,l.jsx)("span",{className:"blue-highlight-text",children:"document"})," with another user or an organization as either editor or viewer if they are an owner or editor of a document or if they are an owner of the folder/drive that is the parent of the document."]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user can share a ",(0,l.jsx)("span",{className:"blue-highlight-text",children:"folder"})," with another user or an organization as a viewer if they are an owner of the folder."]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user can view a ",(0,l.jsx)("span",{className:"blue-highlight-text",children:"document"})," if they are an owner, viewer or editor of the document or if they are a viewer, owner of the folder/drive that is the parent of the document."]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user can edit a ",(0,l.jsx)("span",{className:"blue-highlight-text",children:"document"})," if they are an owner or editor of the document or if they are an owner of the folder/drive that is the parent of the document."]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user can change the owner of a ",(0,l.jsx)("span",{className:"blue-highlight-text",children:"document"})," if they are an owner of the document."]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user can change the owner of a ",(0,l.jsx)("span",{className:"blue-highlight-text",children:"folder"})," if they are an owner of the folder."]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["A user can be a member of an ",(0,l.jsx)("span",{className:"blue-highlight-text",children:"organization"}),"."]}),"\n",(0,l.jsx)("span",{style:{color:"gray"},children:(0,l.jsx)(n.p,{children:"How a user is added as a member to an organization is beyond the scope of the feature we picked to write down."})}),"\n"]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user can view a ",(0,l.jsx)("span",{className:"blue-highlight-text",children:"folder"})," if they are the owner of the folder, or a viewer or owner of either the parent folder of the folder, or the parent drive of the folder."]}),"\n"]})]})}),"\n",(0,l.jsxs)(n.p,{children:["However, the list of object types is not finished. To complete the list of object types you must also add all the second nouns that appear in conditions as part of expressions of this format: ",(0,l.jsx)(n.strong,{children:'"{first noun} of a/the {second noun}"'}),"."]}),"\n",(0,l.jsx)("div",{style:{marginBottom:"2rem"},children:(0,l.jsx)(c.u6,{centerTitle:!0,title:"... IF {first noun} of a/the {second noun}",appearance:"filled"})}),"\n",(0,l.jsxs)(n.p,{children:["Let's highlight those expressions in ",(0,l.jsx)("span",{className:"green-highlight-text",children:"green"}),":"]}),"\n",(0,l.jsx)("div",{style:{marginTop:"2rem",marginBottom:"2rem"},children:(0,l.jsxs)(c.u6,{monoFontChildren:!0,appearance:"filled",children:[(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user can create a document in a drive if they are the ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner of the drive"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["A user can create a folder in a drive if they are the ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner of the drive"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["A user can create a document in a folder if they are the ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner of the folder"}),". The folder is the ",(0,l.jsx)("span",{className:"green-highlight-text",children:"parent of the document"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["A user can create a folder in a folder if they are the ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner of the folder"}),". The existing folder is the ",(0,l.jsx)("span",{className:"green-highlight-text",children:"parent of the new folder"})," ."]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user can share a document with another user or an organization as either editor or viewer if they are an ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner or editor of a document"})," or if they are an ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner of the folder/drive"})," that is the ",(0,l.jsx)("span",{className:"green-highlight-text",children:"parent of the document"}),"."]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user can share a folder with another user or an organization as a viewer if they are an ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner of the folder"}),"."]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user can view a document if they are an ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner, viewer or editor of the document"})," or if they are a ",(0,l.jsx)("span",{className:"green-highlight-text",children:"viewer or owner of the folder/drive"})," that is the ",(0,l.jsx)("span",{className:"green-highlight-text",children:"parent of the document"}),"."]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user can edit a document if they are an ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner or editor of the document"})," or if they are an ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner of the folder/drive"})," that is the ",(0,l.jsx)("span",{className:"green-highlight-text",children:"parent of the document"}),"."]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user can change the owner of a document if they are an ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner of the document"}),"."]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user can change the owner of a folder if they are an ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner of the folder"}),"."]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"A user can be a member of an organization."}),"\n",(0,l.jsx)("span",{style:{color:"gray"},children:(0,l.jsx)(n.p,{children:"How a user is added as a member to an organization is beyond the scope of the feature we picked to write down."})}),"\n"]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user can view a folder if they are the ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner of the folder"}),", or a ",(0,l.jsx)("span",{className:"green-highlight-text",children:"viewer or owner of either the parent folder of the folder, or the parent drive of the folder"}),"."]}),"\n"]})]})}),"\n",(0,l.jsx)(n.p,{children:'The only second noun we didn\'t have in our object type list is "Drive", so we\'ll add it to the list.\nWe will also need to add "User" to the list as it establishes the type of user who can establish relations.'}),"\n",(0,l.jsxs)(c.N4,{cols:5,style:{marginTop:"2rem",marginBottom:"2rem"},children:[(0,l.jsx)(c.u6,{icon:{alignment:"left",label:"User"}}),(0,l.jsx)(c.u6,{icon:{icon:(0,l.jsx)(p,{}),alignment:"left",label:"Document"}}),(0,l.jsx)(c.u6,{icon:{icon:(0,l.jsx)(b,{}),alignment:"left",label:"Folder"}}),(0,l.jsx)(c.u6,{icon:{icon:(0,l.jsx)(B,{}),alignment:"left",label:"Organization"}}),(0,l.jsx)(c.u6,{icon:{icon:(0,l.jsx)(L,{}),alignment:"left",label:"Drive"}})]}),"\n",(0,l.jsxs)(n.p,{children:["Now that we have a list of object types we can start defining them using the ",(0,l.jsx)(c.Oe,{link:"../configuration-language",name:"{ProductName} Configuration Language"}),":"]}),"\n",(0,l.jsx)(c.pB,{configuration:{schema_version:"1.1",type_definitions:[{type:"user"},{type:"document"},{type:"folder"},{type:"organization"},{type:"drive"}]}}),"\n",(0,l.jsx)(n.admonition,{title:"Caution",type:"info",children:(0,l.jsxs)(n.p,{children:["You're now in the process of building a version you can use. The model above is not yet a valid authorization model accepted by ",(0,l.jsx)(c.bU,{format:c.Ed.ShortForm}),"."]})}),"\n",(0,l.jsxs)(n.admonition,{title:"Important",type:"info",children:[(0,l.jsx)(n.p,{children:'In a few cases other users can be part of determining whether an action can be performed on an object or not. Social media is an example of this "a user can comment on a picture if they are a friend of the user that published it".'}),(0,l.jsxs)(n.p,{children:["In those cases ",(0,l.jsxs)(n.a,{href:"/pr-preview/pr-1133/docs/modeling/building-blocks/object-to-object-relationships",children:[(0,l.jsx)(n.strong,{children:"User"})," should also be an object type"]}),'. Following the last recommendation, we would discover the User type because it is a second noun in an expression: "friend of the user".']})]}),"\n",(0,l.jsx)(n.h3,{id:"03-list-relations-for-those-types",children:"03. List Relations For Those Types"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"List relations for those types",src:t(86850).A+"",width:"911",height:"188"})}),"\n",(0,l.jsxs)(n.p,{children:["Each of the previously defined types has a set of relations. ",(0,l.jsx)(c.OK,{section:"what-is-a-relation",linkName:"Relations"})," are an important component in your model. After all, ",(0,l.jsx)(c.bU,{format:c.Ed.ShortForm})," is a ",(0,l.jsx)(c.i4,{linkName:"Relationship Based Access Control (ReBAC)",section:"what-is-relationship-based-access-control-rebac"})," system."]}),"\n",(0,l.jsxs)(n.p,{children:["To identify relations for a type in the write-up we can perform an exercise similar to the one we did in ",(0,l.jsx)(n.a,{href:"#02-list-the-object-types",children:"list the type of objects in your system"}),"."]}),"\n",(0,l.jsx)(n.p,{children:"Relations for a type {type} will be all of these:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:['any noun that is the {noun} of a "{noun} of a/an/the {type}" expression. ',(0,l.jsx)(n.strong,{children:"These are typically the Foreign Keys in a database."})," We'll highlight these in ",(0,l.jsx)("span",{className:"green-highlight-text",children:"green"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:['any verb or action that is the {action} of a "can {action} (in) a/an {type}" expression. ',(0,l.jsx)(n.strong,{children:"These are typically the permissions for a type."})," We'll highlight these in ",(0,l.jsx)("span",{className:"yellow-highlight-text",children:"yellow"}),"."]}),"\n"]}),"\n",(0,l.jsx)("div",{style:{marginTop:"2rem",marginBottom:"2rem"},children:(0,l.jsxs)(c.u6,{monoFontChildren:!0,appearance:"filled",children:[(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user ",(0,l.jsx)("span",{className:"yellow-highlight-text",children:"can create a document in a drive"})," if they are the ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner of the drive"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["A user ",(0,l.jsx)("span",{className:"yellow-highlight-text",children:"can create a folder in a drive"})," if they are the ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner of the drive"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["A user ",(0,l.jsx)("span",{className:"yellow-highlight-text",children:"can create a document in a folder"})," if they are the ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner of the folder"}),". The folder is the ",(0,l.jsx)("span",{className:"green-highlight-text",children:"parent of the document"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["A user ",(0,l.jsx)("span",{className:"yellow-highlight-text",children:"can create a folder in a folder"})," if they are the ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner of the folder"}),". The existing folder is the ",(0,l.jsx)("span",{className:"green-highlight-text",children:"parent of the new folder"}),"."]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user ",(0,l.jsx)("span",{className:"yellow-highlight-text",children:"can share a document with another user or an organization"})," as either editor or viewer if they are an ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner or editor of a document"})," or if they are an ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner of the folder/drive"})," that is the ",(0,l.jsx)("span",{className:"green-highlight-text",children:"parent of the document"}),"."]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user ",(0,l.jsx)("span",{className:"yellow-highlight-text",children:"can share a folder with another user or an organization"})," as a viewer if they are an ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner of the folder"}),"."]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user ",(0,l.jsx)("span",{className:"yellow-highlight-text",children:"can view a document"})," if they are an ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner, viewer or editor of the document"})," or if they are a ",(0,l.jsx)("span",{className:"green-highlight-text",children:"viewer or owner of the folder/drive"})," that is the ",(0,l.jsx)("span",{className:"green-highlight-text",children:"parent of the document"}),"."]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user ",(0,l.jsx)("span",{className:"yellow-highlight-text",children:"can edit a document"})," if they are an ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner or editor of the document"})," or if they are an ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner of the folder/drive"})," that is the ",(0,l.jsx)("span",{className:"green-highlight-text",children:"parent of the document"}),"."]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user ",(0,l.jsx)("span",{className:"yellow-highlight-text",children:"can change the owner of a document"})," if they are an ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner of the document"}),"."]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user ",(0,l.jsx)("span",{className:"yellow-highlight-text",children:"can change the owner of a folder"})," if they are an ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner of the folder"}),"."]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["A user ",(0,l.jsx)("span",{className:"yellow-highlight-text",children:"can be a member of an organization"}),"."]}),"\n",(0,l.jsx)("span",{style:{color:"gray"},children:(0,l.jsx)(n.p,{children:"How a user is added as a member to an organization is beyond the scope of the feature we picked to write down."})}),"\n"]}),"\n"]}),(0,l.jsx)(n.hr,{}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A user ",(0,l.jsx)("span",{className:"yellow-highlight-text",children:"can view a folder"})," if they are the ",(0,l.jsx)("span",{className:"green-highlight-text",children:"owner of the folder"}),", or a ",(0,l.jsx)("span",{className:"green-highlight-text",children:"viewer or owner of either the parent folder of the folder, or the parent drive of the folder"}),"."]}),"\n"]})]})}),"\n",(0,l.jsx)(n.p,{children:"The resulting list is:"}),"\n",(0,l.jsxs)(c.N4,{cols:4,equalWidth:!0,style:{marginTop:"2rem",marginBottom:"2rem"},children:[(0,l.jsx)(c.u6,{smallFontChildren:!0,icon:{icon:(0,l.jsx)(p,{}),alignment:"middle",label:"Document"},children:(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"parent"}),"\n",(0,l.jsx)(n.li,{children:"can_share"}),"\n",(0,l.jsx)(n.li,{children:"owner"}),"\n",(0,l.jsx)(n.li,{children:"editor"}),"\n",(0,l.jsx)(n.li,{children:"can_write"}),"\n",(0,l.jsx)(n.li,{children:"can_view"}),"\n",(0,l.jsx)(n.li,{children:"viewer"}),"\n",(0,l.jsx)(n.li,{children:"can_change_owner"}),"\n"]})}),(0,l.jsx)(c.u6,{smallFontChildren:!0,icon:{icon:(0,l.jsx)(b,{}),alignment:"middle",label:"Folder"},children:(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"can_create_document"}),"\n",(0,l.jsx)(n.li,{children:"owner"}),"\n",(0,l.jsx)(n.li,{children:"can_create_folder"}),"\n",(0,l.jsx)(n.li,{children:"can_view"}),"\n",(0,l.jsx)(n.li,{children:"viewer"}),"\n",(0,l.jsx)(n.li,{children:"parent"}),"\n"]})}),(0,l.jsx)(c.u6,{smallFontChildren:!0,icon:{icon:(0,l.jsx)(B,{}),alignment:"middle",label:"Organization"},children:(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"member"}),"\n"]})}),(0,l.jsx)(c.u6,{smallFontChildren:!0,icon:{icon:(0,l.jsx)(L,{}),alignment:"middle",label:"Drive"},children:(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"can_create_document"}),"\n",(0,l.jsx)(n.li,{children:"owner"}),"\n",(0,l.jsx)(n.li,{children:"can_create_folder"}),"\n"]})})]}),"\n",(0,l.jsx)(n.admonition,{type:"info",children:(0,l.jsxs)(n.p,{children:["In ",(0,l.jsx)(c.bU,{format:c.Ed.ShortForm}),', relations can only have alphanumeric characters, underscores and hyphens. We recommend using underscore (_) to separate words and removing prepositions. E.g.: "can create a document" can become "can_create_document" or "create_document" if you are into brevity.']})}),"\n",(0,l.jsxs)(n.p,{children:["Using the ",(0,l.jsx)(c.Oe,{link:"../configuration-language",name:"{ProductName} Configuration Language"})," we can enumerate the relations for each type:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dsl.openfga",children:"model\n  schema 1.1\ntype user\ntype document\n  relations\n    define parent:\n    define owner:\n    define editor:\n    define viewer:\n    define can_share:\n    define can_view:\n    define can_write:\n    define can_change_owner:\ntype folder\n  relations\n    define owner:\n    define parent:\n    define viewer:\n    define can_create_folder:\n    define can_create_document:\n    define can_view:\ntype organization\n  relations\n    define member:\ntype drive\n  relations\n    define owner:\n    define can_create_document:\n    define can_create_folder:\n"})}),"\n",(0,l.jsx)(n.admonition,{title:"Caution",type:"info",children:(0,l.jsxs)(n.p,{children:["You're now in the process of building a version you can use. The model above is not yet a valid authorization model accepted by ",(0,l.jsx)(c.bU,{format:c.Ed.ShortForm}),"."]})}),"\n",(0,l.jsx)(n.h3,{id:"04-define-relations",children:"04. Define Relations"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"Define relations",src:t(17427).A+"",width:"911",height:"188"})}),"\n",(0,l.jsxs)(n.p,{children:["We will use the ",(0,l.jsx)(c.Oe,{link:"../configuration-language",name:"{ProductName} Configuration Language"})," to create a ",(0,l.jsx)(c.OK,{section:"what-is-a-relation",linkName:"relation definition"})," for each of the relations we identified. At this stage we will encode the answers to the question we asked at the beginning of the document:."]}),"\n",(0,l.jsx)("div",{style:{marginBottom:"2rem"},children:(0,l.jsx)(c.u6,{icon:{icon:(0,l.jsx)(q,{}),alignment:"left"},title:"Why could a user U, perform an action A on an object O?"})}),"\n",(0,l.jsx)(n.p,{children:"We are going to go over each type and each of its relations and create a definition for it."}),"\n",(0,l.jsxs)("div",{style:{display:"inline-block"},children:[(0,l.jsx)(B,{}),(0,l.jsx)("div",{style:{float:"right",marginLeft:"16px"},children:(0,l.jsx)(n.h4,{id:"type-organization",children:"Type: Organization"})})]}),"\n",(0,l.jsx)(n.p,{children:'We recommend starting from objects that represent groups/containers of users. For features in most systems these are easy to define and help reason about the other types. Examples of type names for these are "team", "group", "organization", etc.'}),"\n",(0,l.jsx)(n.h5,{id:"relation-member",children:"Relation: Member"}),"\n",(0,l.jsxs)(n.p,{children:["The member relation is used to tell ",(0,l.jsx)(c.bU,{format:c.Ed.ShortForm})," about the members of an organization."]}),"\n",(0,l.jsx)(n.admonition,{title:"Important",type:"info",children:(0,l.jsxs)(n.p,{children:["Relation names in ",(0,l.jsx)(c.bU,{format:c.Ed.ShortForm}),' are arbitrary strings. There are no reserved relation names. You can use "member" or "part_of" or anything else to refer to a user that is part of a team/organization.']})}),"\n",(0,l.jsxs)(n.p,{children:["Remember ",(0,l.jsx)(n.em,{children:'"How a user is added as a member to an organization is beyond the scope of this feature."'})," For the purposes of this model the relation definition should be:"]}),"\n",(0,l.jsx)(c.pB,{configuration:{schema_version:"1.1",type_definitions:[{type:"organization",relations:{member:{this:{}}},metadata:{relations:{member:{directly_related_user_types:[{type:"user"},{type:"organization",relation:"member"}]}}}}]},skipVersion:!0}),"\n",(0,l.jsx)(n.p,{children:"Why? This relation definition states:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"That organizations have members"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"That the members of an organization with id {id} are all users described by tuples of the form:"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:'{ user: {user-id}, relation: "member", object: "organization:{id}" }'})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.admonition,{title:"Important",type:"info",children:(0,l.jsxs)(n.p,{children:['Relation definitions of the form "define {relation}: [user, organization#member]" are fairly common. They are used to express that relationships "to the object with that relation" (e.g. "users" of type user or "member of organization") can be assigned by your system and that only the users that have that relation are those with a ',(0,l.jsx)(n.a,{href:"/pr-preview/pr-1133/docs/modeling/building-blocks/direct-relationships",children:"direct relationship"}),"."]})}),"\n",(0,l.jsxs)(n.p,{children:["You can read more about group membership and types in ",(0,l.jsx)(n.a,{href:"/pr-preview/pr-1133/docs/modeling/user-groups",children:"Modeling User Groups"}),"."]}),"\n",(0,l.jsx)(n.p,{children:"For the direct relationships, we need to figure out the object types that makes sense for the relationship tuples' user. In our organization example, it makes sense for member relations to have user of type"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"user"}),"\n",(0,l.jsx)(n.li,{children:"organization#member (i.e., other organization's member)"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"However, it will not make sense for organization member's user to be of type document, folder or drive."}),"\n",(0,l.jsxs)(n.p,{children:["We will specify this logic as part of ",(0,l.jsx)(c.OK,{section:"what-is-a-directly-related-user-type",linkName:"directly related user type"}),"."]}),"\n",(0,l.jsxs)(n.admonition,{title:"Side note",type:"note",children:[(0,l.jsx)(n.p,{children:'This also automatically supports nested organizational membership if you want such a feature in your system. You could use relationship tuples like the following one to express that "members of organization A are members of organization B":'}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:'{ user: "organization:A#member", relation: "member", object: "organization:B"}\n'})}),(0,l.jsxs)(n.p,{children:["If you want to learn more, you can read further about this in ",(0,l.jsx)(n.a,{href:"/pr-preview/pr-1133/docs/modeling/user-groups",children:"Modeling User Groups"})," and ",(0,l.jsx)(n.a,{href:"/pr-preview/pr-1133/docs/interacting/managing-relationships-between-objects",children:"Managing Relationships Between Objects"}),"."]})]}),"\n",(0,l.jsx)(n.h5,{id:"complete-type-definition",children:"Complete Type Definition"}),"\n",(0,l.jsxs)(n.p,{children:["The complete ",(0,l.jsx)(c.OK,{section:"what-is-a-type-definition",linkName:"type definition"})," for the ",(0,l.jsx)(n.strong,{children:"organization"})," type is:"]}),"\n",(0,l.jsx)(c.pB,{configuration:{schema_version:"1.1",type_definitions:[{type:"organization",relations:{member:{this:{}}},metadata:{relations:{member:{directly_related_user_types:[{type:"user"},{type:"organization",relation:"member"}]}}}}]},skipVersion:!0}),"\n",(0,l.jsxs)("div",{style:{display:"inline-block"},children:[(0,l.jsx)(p,{}),(0,l.jsx)("div",{style:{float:"right",marginLeft:"16px"},children:(0,l.jsx)(n.h4,{id:"type-document",children:"Type: Document"})})]}),"\n",(0,l.jsx)(n.p,{children:'After defining your "group" like types, continue with the most important type for the feature: the one that allows the main use case. In this case "document", since the main use case for users is to create, write, read and collaborate on documents.'}),"\n",(0,l.jsx)(n.p,{children:"Defining relations for the main type lets you focus on your core use case, and will likely make other type definitions easier."}),"\n",(0,l.jsx)(n.h5,{id:"relation-owner",children:"Relation: Owner"}),"\n",(0,l.jsxs)(n.p,{children:["The owner relation is used to tell ",(0,l.jsx)(c.bU,{format:c.Ed.ShortForm})," which users are owners of the document."]}),"\n",(0,l.jsx)(n.admonition,{title:"Important",type:"info",children:(0,l.jsxs)(n.p,{children:["In the current version, there is no way to state that there is only one owner in the authorization model. The application must limit this ",(0,l.jsx)(c.OK,{section:"what-is-a-user",linkName:"set of users"})," to just one owner if that is a requirement."]})}),"\n",(0,l.jsxs)(n.p,{children:["When a document is created, a relationship tuple will be stored in ",(0,l.jsx)(c.bU,{format:c.Ed.ShortForm})," representing this relationship between owner and document. This is an example of a ",(0,l.jsx)(n.a,{href:"/pr-preview/pr-1133/docs/modeling/direct-access",children:"user to object relationship"}),"."]}),"\n",(0,l.jsx)(n.p,{children:"The relation definition then should be:"}),"\n",(0,l.jsx)(c.pB,{configuration:{schema_version:"1.1",type_definitions:[{type:"document",relations:{owner:{this:{}}},metadata:{relations:{owner:{directly_related_user_types:[{type:"user"},{type:"organization",relation:"member"}]}}}}]},skipVersion:!0}),"\n",(0,l.jsxs)(n.p,{children:["Why? This ",(0,l.jsx)(c.OK,{section:"what-is-a-relation",linkName:"relation definition"})," states that:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"each document can have one or more owners"}),"\n",(0,l.jsxs)(n.li,{children:["owners of a document are assignable by creating a tuple of the format\n",(0,l.jsx)(n.code,{children:'{ user: "{user_id}", relation: "owner", object: "document:{id}" }'})," for individual users"]}),"\n"]}),"\n",(0,l.jsx)(n.h5,{id:"relation-editor",children:"Relation: Editor"}),"\n",(0,l.jsxs)(n.p,{children:["The editor relation is used to tell ",(0,l.jsx)(c.bU,{format:c.Ed.ShortForm})," which users are editors of the document."]}),"\n",(0,l.jsxs)(n.p,{children:["When a user shares a document with another user or set of users as editor, a relationship tuple will be stored in ",(0,l.jsx)(c.bU,{format:c.Ed.ShortForm})," representing this relationship between editor and document. This is an example of a ",(0,l.jsx)(n.a,{href:"/pr-preview/pr-1133/docs/modeling/direct-access",children:"users to object relationship"}),"."]}),"\n",(0,l.jsx)(n.p,{children:"The relation definition then should be:"}),"\n",(0,l.jsx)(c.pB,{configuration:{schema_version:"1.1",type_definitions:[{type:"document",relations:{editor:{this:{}}},metadata:{relations:{editor:{directly_related_user_types:[{type:"user"},{type:"organization",relation:"member"}]}}}}]},skipVersion:!0}),"\n",(0,l.jsx)(n.p,{children:"Why? This relation definition states that:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"each document can have editors"}),"\n",(0,l.jsxs)(n.li,{children:["the editor(s) of a document are assignable by creating a tuple with shape\n",(0,l.jsx)(n.code,{children:'{ user: "{user_id}", relation: "editor", object: "document:{id}" }'})," for individual users"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["This also supports making all members in an organization editors of the document, through a ",(0,l.jsx)(n.a,{href:"/pr-preview/pr-1133/docs/modeling/user-groups",children:"group to object relationship"}),". A relationship tuple like the following one states that the members of organization A are editors of document 0001."]}),"\n",(0,l.jsx)(c.AI,{relationshipTuples:[{user:"organization:A#member",relation:"editor",object:"document:0001"}]}),"\n",(0,l.jsxs)(n.p,{children:["You can learn more about this in ",(0,l.jsx)(n.a,{href:"/pr-preview/pr-1133/docs/modeling/user-groups",children:"Modeling User Groups"}),"."]}),"\n",(0,l.jsx)(n.h5,{id:"relation-viewer",children:"Relation: Viewer"}),"\n",(0,l.jsxs)(n.p,{children:["The viewer relation is similar to the document's ",(0,l.jsx)(n.a,{href:"#relation-editor",children:"editor relation"}),". It will be defined like this:"]}),"\n",(0,l.jsx)(c.pB,{configuration:{schema_version:"1.1",type_definitions:[{type:"document",relations:{viewer:{this:{}}},metadata:{relations:{viewer:{directly_related_user_types:[{type:"user"},{type:"organization",relation:"member"}]}}}}]},skipVersion:!0}),"\n",(0,l.jsx)(n.h5,{id:"relation-parent",children:"Relation: Parent"}),"\n",(0,l.jsxs)(n.p,{children:["The parent relation is used to tell ",(0,l.jsx)(c.bU,{format:c.Ed.ShortForm})," which folder or drive is the parent of the document."]}),"\n",(0,l.jsx)(n.admonition,{title:"Important",type:"caution",children:(0,l.jsxs)(n.p,{children:["Relation names in ",(0,l.jsx)(c.bU,{format:c.Ed.ShortForm}),' are arbitrary strings. There are no reserved relation names. You can use "parent", "container" or "ancestor" to refer to a "parent folder".']})}),"\n",(0,l.jsxs)(n.p,{children:["This relation is different from the others we have seen so far, as it is a relation between two objects (a ",(0,l.jsx)(n.strong,{children:"folder"})," and or ",(0,l.jsx)(n.strong,{children:"drive"})," that is the parent of the ",(0,l.jsx)(n.strong,{children:"document"}),"). This is known as an ",(0,l.jsx)(n.a,{href:"/pr-preview/pr-1133/docs/modeling/building-blocks/object-to-object-relationships",children:"object to object relationship"}),", of which ",(0,l.jsx)(n.a,{href:"/pr-preview/pr-1133/docs/modeling/parent-child",children:"parent-child is a particular case"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["When a document is created a relationship tuple will be stored in ",(0,l.jsx)(c.bU,{format:c.Ed.ShortForm})," to represent this relationship between parent and document. The relation definition then should be:"]}),"\n",(0,l.jsx)(c.pB,{configuration:{type:"document",relations:{parent:{this:{}}},metadata:{relations:{parent:{directly_related_user_types:[{type:"folder"},{type:"drive"}]}}}},skipVersion:!0}),"\n",(0,l.jsx)(n.p,{children:"Why? This relation definition states that:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"documents may have a parent"}),"\n",(0,l.jsxs)(n.li,{children:["the parent(s) of a document with id {id} is either a folder or a drive, described by one of these relationship tuples:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:'{ user: "folder:{id}", relation: "parent", object: "document:{id}" }'})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:'{ user: "drive:{id}", relation: "parent", object: "document:{id}" }'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["We can use ",(0,l.jsx)(n.a,{href:"/pr-preview/pr-1133/docs/configuration-language#direct-relationship-type-restrictions",children:"direct type restriction"})," to ensure a document's parent can only be an object of type either drive or folder."]}),"\n",(0,l.jsx)(n.admonition,{title:"Side note",type:"note",children:(0,l.jsxs)(n.p,{children:['You might have noticed that the "user" in the tuple is an object. This is a special syntax ',(0,l.jsx)(c.bU,{format:c.Ed.ShortForm}),' accepts in the "user" parameter to write ',(0,l.jsx)(n.a,{href:"/pr-preview/pr-1133/docs/modeling/building-blocks/object-to-object-relationships",children:"object to object relationships"}),". You can read more about writing data to manage object to object relationships in ",(0,l.jsx)(n.a,{href:"/pr-preview/pr-1133/docs/interacting/managing-relationships-between-objects",children:"Managing Relationships Between Objects"}),"."]})}),"\n",(0,l.jsx)(n.h5,{id:"relation-can_share",children:"Relation: can_share"}),"\n",(0,l.jsxs)(n.p,{children:["We need to express the following in the ",(0,l.jsx)(c.OK,{section:"what-is-a-relation",linkName:"relation definition"}),":"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.em,{children:"A user can share a document with another user or an organization as either editor or viewer if they are an owner or editor of a document or if they are an owner of the folder that is the parent of the document."})}),"\n",(0,l.jsxs)(n.p,{children:["We can achieve that with the following definition using ",(0,l.jsx)(c.Oe,{link:"../configuration-language",name:"{ProductName} Configuration Language"}),":"]}),"\n",(0,l.jsx)(c.pB,{skipVersion:!0,configuration:{type:"document",relations:{can_share:{union:{child:[{computedUserset:{object:"",relation:"owner"}},{computedUserset:{object:"",relation:"editor"}},{tupleToUserset:{computedUserset:{object:"",relation:"owner"},tupleset:{object:"",relation:"parent"}}}]}}}}}),"\n",(0,l.jsx)(n.p,{children:"There are a few key things here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsxs)(n.strong,{children:["We don't use a ",(0,l.jsx)(n.a,{href:"/pr-preview/pr-1133/docs/configuration-language#direct-relationship-type-restrictions",children:"direct relationship type restriction"})," as part of the definition."]})," can_share is a common example of representing a permission that is defined in terms of other relations but is not directly assignable by the system."]}),"\n",(0,l.jsxs)(n.li,{children:["The relation definition contains a ",(0,l.jsx)(n.a,{href:"/pr-preview/pr-1133/docs/configuration-language#the-union-operator",children:"union operator"}),' separating a list of relations that the user must have with the object in order to "be able to share the document". It is any of:',"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Being an owner of the document"}),"\n",(0,l.jsx)(n.li,{children:"Being an editor of the document"}),"\n",(0,l.jsx)(n.li,{children:"Being an owner of the parent of the document. Whether the parent is a drive or a folder is not important, as they both have an owner relation."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["You can read more about the aforementioned items in ",(0,l.jsx)(n.a,{href:"/pr-preview/pr-1133/docs/modeling/roles-and-permissions",children:"Modeling Roles and Permissions"}),"."]}),"\n",(0,l.jsx)(n.h5,{id:"relation-can_view",children:"Relation: can_view"}),"\n",(0,l.jsxs)(n.p,{children:["We need to express the following in the ",(0,l.jsx)(c.OK,{section:"what-is-a-relation",linkName:"relation definition"}),":"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.em,{children:"A user can view a document if they are an owner, viewer or editor of a document or if they are a viewer, owner of the folder/drive that is the parent of the document."})}),"\n",(0,l.jsxs)(n.p,{children:["Similar to the ",(0,l.jsx)(n.a,{href:"#relation-can_share",children:"can_share relation"}),", we can achieve that with the following definition using ",(0,l.jsx)(c.Oe,{link:"../configuration-language",name:"{ProductName} Configuration Language"}),":"]}),"\n",(0,l.jsx)(c.pB,{skipVersion:!0,configuration:{type:"document",relations:{can_view:{union:{child:[{computedUserset:{object:"",relation:"viewer"}},{computedUserset:{object:"",relation:"editor"}},{computedUserset:{object:"",relation:"owner"}},{tupleToUserset:{computedUserset:{object:"",relation:"viewer"},tupleset:{object:"",relation:"parent"}}},{tupleToUserset:{computedUserset:{object:"",relation:"owner"},tupleset:{object:"",relation:"parent"}}}]}}}}}),"\n",(0,l.jsx)(n.h5,{id:"relation-can_write",children:"Relation: can_write"}),"\n",(0,l.jsxs)(n.p,{children:["We need to express the following in the ",(0,l.jsx)(c.OK,{section:"what-is-a-relation",linkName:"relation definition"}),":"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.em,{children:"A user can write a document if they are an owner or editor of a document or if they are an owner or editor of the folder/drive that is the parent of the document."})}),"\n",(0,l.jsxs)(n.p,{children:["Similar to the ",(0,l.jsx)(n.a,{href:"#relation-can_share",children:"can_share relation"}),", we can achieve that with the following definition using ",(0,l.jsx)(c.Oe,{link:"../configuration-language",name:"{ProductName} Configuration Language"}),":"]}),"\n",(0,l.jsx)(c.pB,{skipVersion:!0,configuration:{type:"document",relations:{can_write:{union:{child:[{computedUserset:{object:"",relation:"editor"}},{computedUserset:{object:"",relation:"owner"}},{tupleToUserset:{computedUserset:{object:"",relation:"owner"},tupleset:{object:"",relation:"parent"}}}]}}}}}),"\n",(0,l.jsx)(n.h5,{id:"relation-can_change_owner",children:"Relation: can_change_owner"}),"\n",(0,l.jsxs)(n.p,{children:["We need to express the following in the ",(0,l.jsx)(c.OK,{section:"what-is-a-relation",linkName:"relation definition"}),":"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.em,{children:"A user can change the owner of a document if they are an owner of the document."})}),"\n",(0,l.jsxs)(n.p,{children:["Similar to the ",(0,l.jsx)(n.a,{href:"#relation-can_share",children:"can_share relation"}),", we can achieve that with the following definition using ",(0,l.jsx)(c.Oe,{link:"../configuration-language",name:"{ProductName} Configuration Language"}),":"]}),"\n",(0,l.jsx)(c.pB,{skipVersion:!0,configuration:{type:"document",relations:{can_change_owner:{computedUserset:{object:"",relation:"owner"}}}}}),"\n",(0,l.jsx)(n.h5,{id:"complete-type-definition-1",children:"Complete Type Definition"}),"\n",(0,l.jsxs)(n.p,{children:["The complete ",(0,l.jsx)(c.OK,{section:"what-is-a-type-definition",linkName:"type definition"})," for the document type is:"]}),"\n",(0,l.jsx)(c.pB,{configuration:{schema_version:"1.1",type_definitions:[{type:"document",relations:{owner:{this:{}},editor:{this:{}},viewer:{this:{}},parent:{this:{}},can_share:{union:{child:[{computedUserset:{object:"",relation:"owner"}},{computedUserset:{object:"",relation:"editor"}},{tupleToUserset:{tupleset:{object:"",relation:"parent"},computedUserset:{object:"",relation:"owner"}}}]}},can_view:{union:{child:[{computedUserset:{object:"",relation:"viewer"}},{computedUserset:{object:"",relation:"editor"}},{computedUserset:{object:"",relation:"owner"}},{tupleToUserset:{tupleset:{object:"",relation:"parent"},computedUserset:{object:"",relation:"viewer"}}},{tupleToUserset:{tupleset:{object:"",relation:"parent"},computedUserset:{object:"",relation:"editor"}}},{tupleToUserset:{tupleset:{object:"",relation:"parent"},computedUserset:{object:"",relation:"owner"}}}]}},can_write:{union:{child:[{computedUserset:{object:"",relation:"editor"}},{computedUserset:{object:"",relation:"owner"}},{tupleToUserset:{tupleset:{object:"",relation:"parent"},computedUserset:{object:"",relation:"owner"}}}]}},can_change_owner:{computedUserset:{object:"",relation:"owner"}}},metadata:{relations:{owner:{directly_related_user_types:[{type:"user"},{type:"organization",relation:"member"}]},editor:{directly_related_user_types:[{type:"user"},{type:"organization",relation:"member"}]},viewer:{directly_related_user_types:[{type:"user"},{type:"organization",relation:"member"}]},parent:{directly_related_user_types:[{type:"folder"},{type:"drive"}]}}}}]}}),"\n",(0,l.jsx)(n.p,{children:"Combining the type definitions for document and organization, we have"}),"\n",(0,l.jsx)(c.pB,{configuration:{schema_version:"1.1",type_definitions:[{type:"user"},{type:"organization",relations:{member:{this:{}}},metadata:{relations:{member:{directly_related_user_types:[{type:"user"},{type:"organization",relation:"member"}]}}}},{type:"document",relations:{owner:{this:{}},editor:{this:{}},viewer:{this:{}},parent:{this:{}},can_share:{union:{child:[{computedUserset:{object:"",relation:"owner"}},{computedUserset:{object:"",relation:"editor"}},{tupleToUserset:{tupleset:{object:"",relation:"parent"},computedUserset:{object:"",relation:"owner"}}}]}},can_view:{union:{child:[{computedUserset:{object:"",relation:"viewer"}},{computedUserset:{object:"",relation:"editor"}},{computedUserset:{object:"",relation:"owner"}},{tupleToUserset:{tupleset:{object:"",relation:"parent"},computedUserset:{object:"",relation:"viewer"}}},{tupleToUserset:{tupleset:{object:"",relation:"parent"},computedUserset:{object:"",relation:"editor"}}},{tupleToUserset:{tupleset:{object:"",relation:"parent"},computedUserset:{object:"",relation:"owner"}}}]}},can_write:{union:{child:[{computedUserset:{object:"",relation:"editor"}},{computedUserset:{object:"",relation:"owner"}},{tupleToUserset:{tupleset:{object:"",relation:"parent"},computedUserset:{object:"",relation:"owner"}}}]}},can_change_owner:{computedUserset:{object:"",relation:"owner"}}},metadata:{relations:{owner:{directly_related_user_types:[{type:"user"},{type:"organization",relation:"member"}]},editor:{directly_related_user_types:[{type:"user"},{type:"organization",relation:"member"}]},viewer:{directly_related_user_types:[{type:"user"},{type:"organization",relation:"member"}]},parent:{directly_related_user_types:[{type:"folder"},{type:"drive"}]}}}}]}}),"\n",(0,l.jsx)(n.admonition,{type:"note",children:(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(c.bU,{})," authorization model API and SDK only accepts JSON in its input. To convert from DSL to JSON, you may use the ",(0,l.jsx)(n.a,{href:"https://github.com/openfga/cli",children:"FGA CLI"})," to run ",(0,l.jsx)(n.code,{children:"fga model transform"}),"."]})}),"\n",(0,l.jsx)(n.h3,{id:"05-test-the-model",children:"05. Test The Model"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"Test the model",src:t(26688).A+"",width:"911",height:"188"})}),"\n",(0,l.jsx)(n.p,{children:"Once you have defined your group like types and the most important type for your feature you want to ensure everything is working as expected. This means testing the model."}),"\n",(0,l.jsxs)(n.p,{children:["How? Remember from the introduction that ",(0,l.jsxs)(n.strong,{children:[(0,l.jsx)(c.bU,{format:c.Ed.LongForm}),"'s"]})," main job is to answer the question:"]}),"\n",(0,l.jsx)("div",{style:{marginTop:"2rem",marginBottom:"2rem"},children:(0,l.jsx)(c.u6,{icon:{icon:(0,l.jsx)(q,{}),alignment:"left"},title:"Can user U, perform an action A on an object O?"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(c.bU,{format:c.Ed.ShortForm})," service does that by checking if a user has a particular relationship to an object, based on your authorization model and relationship tuples."]}),"\n",(0,l.jsxs)(c.N4,{cols:2,style:{marginTop:"2rem",marginBottom:"2rem"},children:[(0,l.jsx)(c.u6,{title:"General Authorization Check",appearance:"filled",children:(0,l.jsxs)(n.p,{children:['"Can user ',(0,l.jsx)("b",{children:"U"})," ",(0,l.jsx)("u",{children:"perform action"})," ",(0,l.jsx)("b",{children:"A"})," on object ",(0,l.jsx)("b",{children:"O"}),'?"']})}),(0,l.jsx)(c.u6,{title:"{ProductName} (ReBAC) Authorization Check",children:(0,l.jsxs)(n.p,{children:['"Can user ',(0,l.jsx)("b",{children:"U"})," ",(0,l.jsx)("u",{children:"have relation"})," ",(0,l.jsx)("b",{children:"R"})," with object ",(0,l.jsx)("b",{children:"O"}),'?"']})})]}),"\n",(0,l.jsx)(n.p,{children:"What we want is to ensure that given our current authorization model and some sample relationship tuples, we get the expected results for those questions."}),"\n",(0,l.jsxs)(n.p,{children:["So we'll write some relationship tuples and assertions. An ",(0,l.jsx)(c.bU,{format:c.Ed.ShortForm})," assertion takes one of these forms:"]}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["user U ",(0,l.jsx)(n.strong,{children:"has"})," relation R with object O"]}),"\n",(0,l.jsxs)(n.li,{children:["user U ",(0,l.jsx)(n.strong,{children:"does not have"})," relation R with object O"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Much like automated tests and assertions work for programming languages, you can use assertions to prevent regressions while you change your tuples and authorization model. Essentially, assertions help you ensure things work like you expect them to work as you iterate."}),"\n",(0,l.jsx)(n.h4,{id:"write-relationship-tuples",children:"Write Relationship Tuples"}),"\n",(0,l.jsx)(n.p,{children:"The relationship tuples should represent real examples from your system with fake data."}),"\n",(0,l.jsx)(n.p,{children:"At this point you haven't defined the drive or folder types, so you can only test things based on users or organization members' relationships to documents. Let's imagine an example setup and write the relationship tuples for it:"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"System Action"}),(0,l.jsx)(n.th,{children:"Relationship Tuple"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Anne is a member of the contoso organization"}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:'{ user:"user:anne", relation: "member", object: "organization:contoso"}'})})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Beth is a member of fabrikam organization"}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:'{ user:"user:beth", relation: "member", object: "organization:fabrikam"}'})})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Anne creates document:1, becomes its owner."}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:'{ user:"user:anne", relation: "owner", object: "document:1"}'})})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Anne shares document:1 with all members of the fabrikam organization as editor."}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:'{ user:"organization:fabrikam#member", relation: "editor", object: "document:1"}'})})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Beth creates document:2 and becomes its owner."}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:'{ user:"user:beth", relation: "owner", object: "document:2"}'})})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Beth shares document:2 with all members of the contoso organization as viewer"}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:'{ user:"organization:contoso#member", relation: "viewer", object: "document:2"}'})})]})]})]}),"\n",(0,l.jsx)(n.p,{children:"Follow these steps to create relationship tuples."}),"\n",(0,l.jsx)(n.h4,{id:"create-assertions",children:"Create Assertions"}),"\n",(0,l.jsxs)(n.p,{children:["According to our ",(0,l.jsx)(n.a,{href:"#write-it-in-plain-language",children:"written down model"})," and the ",(0,l.jsx)(n.a,{href:"#write-relationship-tuples",children:"relationship tuples"})," from the previous step, these assertions should be specified:"]}),"\n",(0,l.jsx)(n.p,{children:"Because anne is the owner of document:1:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["user ",(0,l.jsx)(n.strong,{children:"anne"})," has relation ",(0,l.jsx)(n.strong,{children:"can_share"})," with document:1"]}),"\n",(0,l.jsxs)(n.li,{children:["user ",(0,l.jsx)(n.strong,{children:"anne"})," has relation ",(0,l.jsx)(n.strong,{children:"can_write"})," with document:1"]}),"\n",(0,l.jsxs)(n.li,{children:["user ",(0,l.jsx)(n.strong,{children:"anne"})," has relation ",(0,l.jsx)(n.strong,{children:"can_view"})," with document:1"]}),"\n",(0,l.jsxs)(n.li,{children:["user ",(0,l.jsx)(n.strong,{children:"anne"})," has relation ",(0,l.jsx)(n.strong,{children:"can_change_owner"})," with document:1"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Because beth is a member of organization",":fabrikam"," and members of organization",":fabrikam"," are writer of document:1:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["user ",(0,l.jsx)(n.strong,{children:"beth"})," has relation ",(0,l.jsx)(n.strong,{children:"can_share"})," with document:1"]}),"\n",(0,l.jsxs)(n.li,{children:["user ",(0,l.jsx)(n.strong,{children:"beth"})," has relation ",(0,l.jsx)(n.strong,{children:"can_write"})," with document:1"]}),"\n",(0,l.jsxs)(n.li,{children:["user ",(0,l.jsx)(n.strong,{children:"beth"})," has relation ",(0,l.jsx)(n.strong,{children:"can_view"})," with document:1"]}),"\n",(0,l.jsxs)(n.li,{children:["user ",(0,l.jsx)(n.strong,{children:"beth"})," does not have relation ",(0,l.jsx)(n.strong,{children:"can_change_owner"})," with document:1"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Because beth is the owner of document:2:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["user ",(0,l.jsx)(n.strong,{children:"beth"})," has relation ",(0,l.jsx)(n.strong,{children:"can_share"})," with document:2"]}),"\n",(0,l.jsxs)(n.li,{children:["user ",(0,l.jsx)(n.strong,{children:"beth"})," has relation ",(0,l.jsx)(n.strong,{children:"can_write"})," with document:2"]}),"\n",(0,l.jsxs)(n.li,{children:["user ",(0,l.jsx)(n.strong,{children:"beth"})," has relation ",(0,l.jsx)(n.strong,{children:"can_view"})," with document:2"]}),"\n",(0,l.jsxs)(n.li,{children:["user ",(0,l.jsx)(n.strong,{children:"beth"})," has relation ",(0,l.jsx)(n.strong,{children:"can_change_owner"})," with document:2"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Because anne is a member of organization",":contoso"," and members of organization",":contoso"," are viewer of document:2:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["user ",(0,l.jsx)(n.strong,{children:"anne"})," does not have relation ",(0,l.jsx)(n.strong,{children:"can_share"})," with document:2"]}),"\n",(0,l.jsxs)(n.li,{children:["user ",(0,l.jsx)(n.strong,{children:"anne"})," does not have relation ",(0,l.jsx)(n.strong,{children:"can_write"})," with document:2"]}),"\n",(0,l.jsxs)(n.li,{children:["user ",(0,l.jsx)(n.strong,{children:"anne"})," has relation ",(0,l.jsx)(n.strong,{children:"can_view"})," with document:2"]}),"\n",(0,l.jsxs)(n.li,{children:["user ",(0,l.jsx)(n.strong,{children:"anne"})," does not have relation ",(0,l.jsx)(n.strong,{children:"can_change_owner"})," with document:2"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Follow these steps to create assertions."}),"\n",(0,l.jsx)(n.h4,{id:"run-assertions",children:"Run Assertions"}),"\n",(0,l.jsx)(n.p,{children:"Run the assertions. They should all pass. If they don't you can use the query view to understand what is causing them to fail, and then update your authorization model and relation tuples accordingly."}),"\n",(0,l.jsx)(n.p,{children:"Once all the assertions are working, you should continue the iterative process of working on your model."}),"\n",(0,l.jsx)(n.h3,{id:"06-iterate",children:"06. Iterate"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"Iterate",src:t(67249).A+"",width:"911",height:"208"})}),"\n",(0,l.jsx)(n.p,{children:"We'll leave the exercise of defining the drive and folder relations, then adding relationship tuples and assertions to you. Once you are finished, check out the complete example to see how you did."}),"\n",(0,l.jsxs)(n.p,{children:["When defining the authorization model for your own system, you would continue iterating on the ",(0,l.jsx)(c.OK,{section:"what-is-an-authorization-model",linkName:"authorization model"})," with the ",(0,l.jsx)(n.a,{href:"#01-pick-the-most-important-feature",children:"next feature"})," and so on."]}),"\n",(0,l.jsx)(n.h2,{id:"related-sections",children:"Related Sections"}),"\n",(0,l.jsx)(c.XQ,{description:"Check the following sections for more on how to model with {ProductName}.",relatedLinks:[{title:"{ProductName} Concepts",description:"Learn about the {ProductName} Concepts.",link:"../concepts",id:"../concepts"},{title:"Configuration Language",description:"Learn about {ProductName} Configuration Language.",link:"../configuration-language",id:"../configuration-language"},{title:"Direct Access",description:"Learn about modeling user access to an object.",link:"./direct-access",id:"./direct-access"}]})]})}function ee(e={}){const{wrapper:n}={...(0,h.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)($,{...e})}):$(e)}},96141:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/getting-started-diagram-03-3734cdad8827d03f6a76db672f13be46.svg"}}]);