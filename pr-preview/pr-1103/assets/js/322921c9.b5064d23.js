"use strict";(self.webpackChunkopenfga_dev=self.webpackChunkopenfga_dev||[]).push([[4636],{31481:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"content/interacting/duplicate-writes","title":"Duplicate Writes","description":"Handle duplicate writes and missing deletes in write operations","source":"@site/docs/content/interacting/duplicate-writes.mdx","sourceDirName":"content/interacting","slug":"/interacting/duplicate-writes","permalink":"/pr-preview/pr-1103/docs/interacting/duplicate-writes","draft":false,"unlisted":false,"editUrl":"https://github.com/openfga/openfga.dev/edit/main/docs/content/interacting/duplicate-writes.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"slug":"/interacting/duplicate-writes","description":"Handle duplicate writes and missing deletes in write operations"},"sidebar":"docs","previous":{"title":"Transactional Writes","permalink":"/pr-preview/pr-1103/docs/interacting/transactional-writes"},"next":{"title":"Contextual Tuples","permalink":"/pr-preview/pr-1103/docs/interacting/contextual-tuples"}}');var s=i(74848),r=i(28453),o=i(25558);const a={sidebar_position:3,slug:"/interacting/duplicate-writes",description:"Handle duplicate writes and missing deletes in write operations"},l="Duplicate Writes",d={},c=[{value:"Understanding the Problem",id:"understanding-the-problem",level:2},{value:"How to Handle Duplicate Operations",id:"how-to-handle-duplicate-operations",level:2},{value:"Response: Default Behavior",id:"response-default-behavior",level:3},{value:"Response: Ignoring Duplicates",id:"response-ignoring-duplicates",level:3},{value:"Optional API Parameters",id:"optional-api-parameters",level:2},{value:"Writes",id:"writes",level:3},{value:"Deletes",id:"deletes",level:3},{value:"Using Both Parameters Together",id:"using-both-parameters-together",level:2},{value:"Important Concepts",id:"important-concepts",level:2},{value:"The Write Request Remains Atomic",id:"the-write-request-remains-atomic",level:3},{value:"&quot;Best effort&quot; ignore",id:"best-effort-ignore",level:3},{value:"&quot;Ignore&quot; is Not an &quot;Upsert&quot;",id:"ignore-is-not-an-upsert",level:3},{value:"Related Sections",id:"related-sections",level:2}];function p(e){const t={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"duplicate-writes",children:"Duplicate Writes"})}),"\n",(0,s.jsx)(o.ZE,{}),"\n",(0,s.jsxs)(t.p,{children:["Handle duplicate writes and missing deletes gracefully using the Write API's optional ",(0,s.jsx)(t.code,{children:"on_duplicate"})," and ",(0,s.jsx)(t.code,{children:"on_missing"})," parameters."]}),"\n",(0,s.jsx)(o.u6,{title:"When to use",appearance:"filled",children:(0,s.jsxs)(t.p,{children:["Common scenarios include high-volume data imports into ",(0,s.jsx)(o.bU,{format:o.Ed.ShortForm})," or migrations between distributed systems where you need to ensure data synchronization without causing transaction failures on duplicate writes or missing deletes."]})}),"\n",(0,s.jsx)(t.h2,{id:"understanding-the-problem",children:"Understanding the Problem"}),"\n",(0,s.jsxs)(t.p,{children:["The Write API is the primary method for adding and removing ",(0,s.jsx)(o.OK,{section:"what-is-a-relationship-tuple",linkName:"relationship tuples"})," in your ",(0,s.jsx)(o.bU,{format:o.Ed.ShortForm})," store."]}),"\n",(0,s.jsx)(t.p,{children:'By default, the Write API operates with strict validation ("all-or-nothing"):'}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Writing a tuple that already exists causes the entire request to fail (even if only 1 tuple out of 40 possible tuples is a duplicate)"}),"\n",(0,s.jsx)(t.li,{children:"Deleting a tuple that doesn't exist causes the entire request to fail"}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["This strict behavior requires applications to check the current state of the tuple in ",(0,s.jsx)(o.bU,{format:o.Ed.ShortForm})," before making changes, implement complex retry logic, or simply ignore the errors altogether."]}),"\n",(0,s.jsx)(t.h2,{id:"how-to-handle-duplicate-operations",children:"How to Handle Duplicate Operations"}),"\n",(0,s.jsx)(t.p,{children:"To improve import and migration scenarios, the Write API provides optional parameters to control how duplicate writes and missing deletes are handled."}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"on_duplicate"})," and ",(0,s.jsx)(t.code,{children:"on_missing"})," parameters change this behavior, allowing you to instruct the API to ignore these cases and process the rest of the request successfully."]}),"\n",(0,s.jsx)(t.h3,{id:"response-default-behavior",children:"Response: Default Behavior"}),"\n",(0,s.jsxs)(t.p,{children:["Without the ",(0,s.jsx)(t.code,{children:"on_duplicate"})," parameter, attempting to write an existing tuple returns a ",(0,s.jsx)(t.code,{children:"400 Bad Request"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-http",children:'HTTP/1.1 400 Bad Request\n\n{\n  "code": "write_failed_due_to_invalid_input",\n  "message": "cannot write a tuple which already exists: user: \'user:anne\', relation: \'writer\', object: \'document:2025-budget\': tuple to be written already existed or the tuple to be deleted did not exist"\n}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"response-ignoring-duplicates",children:"Response: Ignoring Duplicates"}),"\n",(0,s.jsxs)(t.p,{children:["Setting ",(0,s.jsx)(t.code,{children:'on_duplicate: "ignore"'})," allows the duplicate to be ignored and the API returns a ",(0,s.jsx)(t.code,{children:"200 OK"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-http",children:"HTTP/1.1 200 OK\n\n{}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"optional-api-parameters",children:"Optional API Parameters"}),"\n",(0,s.jsxs)(t.p,{children:["The parameters are added within the ",(0,s.jsx)(t.code,{children:"writes"})," and ",(0,s.jsx)(t.code,{children:"deletes"})," objects in the body of a Write request."]}),"\n",(0,s.jsx)(t.h3,{id:"writes",children:"Writes"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"on_duplicate"})," parameter controls the behavior when writing tuples."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:'"error" (Default)'}),": The request fails if any tuple in the writes array already exists. This maintains backward compatibility."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:'"ignore"'}),": The API ignores any attempt to write a tuple that already exists and proceeds to write the new ones in the same transaction. The request succeeds."]}),"\n"]}),"\n",(0,s.jsx)(o.dp,{skipSetup:!0,relationshipTuples:[{user:"user:anne",relation:"writer",object:"document:2025-budget"}],writeOptions:{on_duplicate:"ignore"},expectedResponse:{data:{}},allowedLanguages:[o.NH.CURL]}),"\n",(0,s.jsx)(t.admonition,{type:"caution",children:(0,s.jsx)(t.p,{children:"At the moment, this feature is only available on the API. Supported SDKs will follow shortly after."})}),"\n",(0,s.jsx)(t.h3,{id:"deletes",children:"Deletes"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"on_missing"})," parameter controls behavior when deleting tuples."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:'"error" (Default)'}),": The request fails if any tuple in the deletes array does not exist."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:'"ignore"'}),": The API ignores any attempt to delete a tuple that does not exist and proceeds to delete the ones that do exist. The request succeeds."]}),"\n"]}),"\n",(0,s.jsx)(o.dp,{skipSetup:!0,deleteRelationshipTuples:[{user:"user:anne",relation:"writer",object:"document:2025-budget"}],deleteOptions:{on_missing:"ignore"},expectedResponse:{data:{}},allowedLanguages:[o.NH.CURL]}),"\n",(0,s.jsx)(t.h2,{id:"using-both-parameters-together",children:"Using Both Parameters Together"}),"\n",(0,s.jsxs)(t.p,{children:["The decision to have separate ",(0,s.jsx)(t.code,{children:"on_duplicate"})," and ",(0,s.jsx)(t.code,{children:"on_missing"})," parameters is intentional. This design gives you granular, independent control over the behavior of writes and deletes within a single atomic transaction. You can mix and match strict and permissive behaviors to suit your exact needs."]}),"\n",(0,s.jsxs)(t.p,{children:["For example, you might perform a strict delete (",(0,s.jsx)(t.code,{children:'on_missing: "error"'}),") to confirm that a specific permission has been successfully removed before making a permissive write (",(0,s.jsx)(t.code,{children:'on_duplicate: "ignore"'}),") that guarantees the new permission exists."]}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["This flexibility is particularly useful when you are trying to synchronize state between your application's database and ",(0,s.jsx)(o.bU,{format:o.Ed.ShortForm}),". You might need a strict operation to fail so you can roll back corresponding changes in your own database, ensuring overall system consistency."]})}),"\n",(0,s.jsx)(o.dp,{skipSetup:!0,relationshipTuples:[{user:"user:anne",relation:"reader",object:"document:2025-budget"}],writeOptions:{on_duplicate:"ignore"},deleteRelationshipTuples:[{user:"user:anne",relation:"writer",object:"document:2025-budget"}],deleteOptions:{on_missing:"error"},expectedResponse:{data:{}},allowedLanguages:[o.NH.CURL]}),"\n",(0,s.jsx)(t.p,{children:"In this example:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"If the permission to delete doesn't exist, the entire request will fail as intended."}),"\n",(0,s.jsx)(t.li,{children:"If the tuple exists and is successfully deleted, the write permission will succeed whether the tuple already exists or is written in that moment."}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"important-concepts",children:"Important Concepts"}),"\n",(0,s.jsx)(t.h3,{id:"the-write-request-remains-atomic",children:"The Write Request Remains Atomic"}),"\n",(0,s.jsxs)(t.p,{children:["All tuples in a request will still be processed as a single atomic unit. The ",(0,s.jsx)(t.code,{children:"ignore"})," option only changes the success criteria for individual operations in the request."]}),"\n",(0,s.jsx)(t.h3,{id:"best-effort-ignore",children:'"Best effort" ignore'}),"\n",(0,s.jsxs)(t.p,{children:["For writes: An ",(0,s.jsx)(t.code,{children:"on_duplicate: 'ignore'"}),' operation uses a "best effort" approach. We will attempt ',(0,s.jsx)(t.em,{children:"once"})," to ignore duplicates and write non-duplicates, but if there is ever a conflict writing to the database (i.e. write a tuple we don\u2019t think exists but it suddenly exists, probably due to a parallel request), we will abort the race condition immediately, and just return a ",(0,s.jsx)(t.code,{children:"409 Conflict"})," error. These errors are rare, but can happen."]}),"\n",(0,s.jsxs)(t.p,{children:["For deletes: An ",(0,s.jsx)(t.code,{children:"on_missing: 'ignore'"})," operation is immune to race conditions due to database-level locks. It is not possible for another request to interfere since a delete operation will always succeed if the tuple exists or not."]}),"\n",(0,s.jsx)(t.h3,{id:"ignore-is-not-an-upsert",children:'"Ignore" is Not an "Upsert"'}),"\n",(0,s.jsxs)(t.p,{children:["It is critical to understand that ",(0,s.jsx)(t.code,{children:'on_duplicate: "ignore"'}),' will not update an existing tuple, only ignore an identical tuple. This is why we do not call the operation an "idempotent" operation.']}),"\n",(0,s.jsxs)(t.p,{children:["The behavior of ",(0,s.jsx)(t.code,{children:'on_duplicate: "ignore"'})," is more nuanced for tuples with conditions."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Identical Tuples"}),": If a tuple in the request is 100% identical to an existing tuple (same user, relation, object, condition name, and condition context), it will be safely ignored."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Conflicting Tuples"}),": If a tuple key (user, relation, object) matches an existing tuple, but the condition is different, this is a conflict. The write attempt will be rejected, and the entire transaction will fail with a ",(0,s.jsx)(t.code,{children:"409 Conflict"})," error. ",(0,s.jsx)(t.strong,{children:"The correct pattern to safely update a tuple's condition requires explicitly deleting the old tuple and writing the new one within the same atomic Write request."})]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-http",children:'HTTP/1.1 409 Conflict\n{\n  "code": "Aborted",\n  "message": "transactional write failed due to conflict: attempted to write a tuple which already exists with a different condition: user: \'user:anne\', relation: \'writer\', object: \'document:2025-budget\'"\n}\n'})}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["The condition is not returned in the response, but you can call ",(0,s.jsx)(t.code,{children:"/read"})," for this tuple to view its condition."]})}),"\n",(0,s.jsx)(t.admonition,{type:"warning",children:(0,s.jsx)(t.p,{children:"The deletes operation in the Write API does not accept a condition. Attempting to include one will result in an invalid request."})}),"\n",(0,s.jsx)(t.h2,{id:"related-sections",children:"Related Sections"}),"\n",(0,s.jsx)(o.XQ,{description:"Learn more about different types of writes and managing relationship tuples.",relatedLinks:[{title:"Write API",description:"Details on the write API in the {ProductName} reference guide.",link:"/api/service#Relationship%20Tuples/Write"},{title:"Transactional Writes",description:"Learn about updating multiple relationship tuples in a single transaction.",link:"./transactional-writes",id:"./transactional-writes"},{title:"Update relationship tuples in SDK",description:"Learn about how to update relationship tuples in SDK.",link:"../getting-started/update-tuples",id:"../getting-started/update-tuples"}]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);