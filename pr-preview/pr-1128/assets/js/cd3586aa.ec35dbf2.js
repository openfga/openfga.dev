"use strict";(self.webpackChunkopenfga_dev=self.webpackChunkopenfga_dev||[]).push([[9130],{56311:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"content/modeling/store-file-format","title":"Store File Format","description":"Store File Format (.fga.yaml)","source":"@site/docs/content/modeling/store-file-format.mdx","sourceDirName":"content/modeling","slug":"/modeling/store-file-format","permalink":"/pr-preview/pr-1128/docs/modeling/store-file-format","draft":false,"unlisted":false,"editUrl":"https://github.com/openfga/openfga.dev/edit/main/docs/content/modeling/store-file-format.mdx","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7,"slug":"/modeling/store-file-format","description":"Store File Format (.fga.yaml)"},"sidebar":"docs","previous":{"title":"Testing Models","permalink":"/pr-preview/pr-1128/docs/modeling/testing"},"next":{"title":"Modular Models","permalink":"/pr-preview/pr-1128/docs/modeling/modular-models"}}');var i=s(74848),l=s(28453),r=s(25558);const o={sidebar_position:7,slug:"/modeling/store-file-format",description:"Store File Format (.fga.yaml)"},a="Store File Format",d={},c=[{value:"File Structure",id:"file-structure",level:2},{value:"Core Components",id:"core-components",level:2},{value:"1. Store Metadata",id:"1-store-metadata",level:3},{value:"2. Authorization Model",id:"2-authorization-model",level:3},{value:"Option A: External File Reference",id:"option-a-external-file-reference",level:4},{value:"Option B: Inline Model Definition",id:"option-b-inline-model-definition",level:4},{value:"3. Relationship Tuples",id:"3-relationship-tuples",level:3},{value:"Option A: External File Reference",id:"option-a-external-file-reference-1",level:4},{value:"Option B: Inline Tuple Definition",id:"option-b-inline-tuple-definition",level:4},{value:"4. Tests",id:"4-tests",level:3},{value:"Test Structure",id:"test-structure",level:4},{value:"Check Tests",id:"check-tests",level:4},{value:"List Objects Tests",id:"list-objects-tests",level:4},{value:"List Users Tests",id:"list-users-tests",level:4},{value:"Context Support (ABAC)",id:"context-support-abac",level:2},{value:"File Composition",id:"file-composition",level:2},{value:"Global + Test-Specific Data",id:"global--test-specific-data",level:3},{value:"Mixed Inline and File References",id:"mixed-inline-and-file-references",level:3},{value:"CLI Commands Using Store Files",id:"cli-commands-using-store-files",level:2},{value:"Store Import",id:"store-import",level:3},{value:"Model Testing",id:"model-testing",level:3},{value:"Store Export",id:"store-export",level:3},{value:"Examples",id:"examples",level:2},{value:"Basic Store File",id:"basic-store-file",level:3},{value:"Advanced Store with ABAC",id:"advanced-store-with-abac",level:3},{value:"Multi-Test Store File",id:"multi-test-store-file",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"File Extensions",id:"file-extensions",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"store-file-format",children:"Store File Format"})}),"\n",(0,i.jsx)(r.ZE,{}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["This documentation is mirrored from the ",(0,i.jsx)(n.a,{href:"https://github.com/openfga/cli/blob/main/docs/STORE_FILE.md",children:"OpenFGA CLI repository"}),". For the most up-to-date version, please refer to the CLI documentation."]})}),"\n",(0,i.jsxs)(n.p,{children:["The store file is a YAML configuration file (",(0,i.jsx)(n.code,{children:".fga.yaml"}),") that defines a complete ",(0,i.jsx)(r.bU,{format:r.Ed.ShortForm})," store setup, including the authorization model, relationship tuples, and test cases. This file format enables easy management, testing, and deployment of ",(0,i.jsx)(r.bU,{format:r.Ed.ShortForm})," configurations."]}),"\n",(0,i.jsx)(n.h2,{id:"file-structure",children:"File Structure"}),"\n",(0,i.jsx)(n.p,{children:"The store file uses YAML syntax and supports the following top-level properties:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'name: "Store Name"                    # Required: Name of the store\nmodel_file: "./model.fga"             # Path to authorization model file\nmodel: |                              # OR inline model definition\n  model\n    schema 1.1\n  type user\n  # ... more model definitions\n\ntuple_file: "./tuples.yaml"           # Path to tuples file  \ntuples:                               # OR inline tuples\n  - user: user:anne\n    relation: viewer\n    object: document:1\n\ntests:                                # Test definitions\n  - name: "test-name"\n    description: "Test description"   # Optional\n    tuple_file: "./test-tuples.yaml"  # Test-specific tuples file\n    tuples:                           # OR inline test tuples\n      - user: user:bob\n        relation: editor\n        object: document:2\n    check:                            # Authorization checks\n      - user: user:anne\n        object: document:1\n        context:                      # Optional context for ABAC\n          timestamp: "2023-05-03T21:25:23+00:00"\n        assertions:\n          viewer: true\n          editor: false\n    list_objects:                     # List objects tests\n      - user: user:anne\n        type: document\n        context:                      # Optional context\n          timestamp: "2023-05-03T21:25:23+00:00"\n        assertions:\n          viewer:\n            - document:1\n            - document:2\n    list_users:                       # List users tests\n      - object: document:1\n        user_filter:\n          - type: user\n        context:                      # Optional context\n          timestamp: "2023-05-03T21:25:23+00:00"\n        assertions:\n          viewer:\n            users:\n              - user:anne\n              - user:bob\n'})}),"\n",(0,i.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,i.jsx)(n.h3,{id:"1-store-metadata",children:"1. Store Metadata"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"name"})})," (required): The display name for the store"]}),"\n",(0,i.jsx)(n.li,{children:"This name is used when creating a new store via import"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-authorization-model",children:"2. Authorization Model"}),"\n",(0,i.jsx)(n.p,{children:"You can specify the authorization model in two ways:"}),"\n",(0,i.jsx)(n.h4,{id:"option-a-external-file-reference",children:"Option A: External File Reference"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'model_file: "./path/to/model.fga"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"option-b-inline-model-definition",children:"Option B: Inline Model Definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"model: |\n  model\n    schema 1.1\n  \n  type user\n  \n  type document\n    relations\n      define viewer: [user]\n      define editor: [user] and viewer\n"})}),"\n",(0,i.jsx)(n.p,{children:"The model defines the authorization schema including:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Types (user, document, folder, etc.)"}),"\n",(0,i.jsx)(n.li,{children:"Relations (viewer, editor, owner, etc.)"}),"\n",(0,i.jsx)(n.li,{children:"Authorization rules and conditions"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-relationship-tuples",children:"3. Relationship Tuples"}),"\n",(0,i.jsx)(n.p,{children:"Tuples define the actual relationships between users and objects. You can specify them in two ways:"}),"\n",(0,i.jsx)(n.h4,{id:"option-a-external-file-reference-1",children:"Option A: External File Reference"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'tuple_file: "./path/to/tuples.yaml"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"option-b-inline-tuple-definition",children:"Option B: Inline Tuple Definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'tuples:\n  - user: user:anne\n    relation: viewer  \n    object: document:1\n  - user: user:bob\n    relation: editor\n    object: document:1\n    condition:                        # Optional: for conditional relationships\n      name: valid_ip\n      context:\n        ip_address: "192.168.1.100"\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Supported tuple file formats:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["YAML (",(0,i.jsx)(n.code,{children:".yaml"}),", ",(0,i.jsx)(n.code,{children:".yml"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["JSON (",(0,i.jsx)(n.code,{children:".json"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["CSV (",(0,i.jsx)(n.code,{children:".csv"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"4-tests",children:"4. Tests"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"tests"})," array contains test cases to validate your authorization model and tuples."]}),"\n",(0,i.jsx)(n.h4,{id:"test-structure",children:"Test Structure"}),"\n",(0,i.jsx)(n.p,{children:"Each test can include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"name"})})," (required): Test identifier"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"description"})})," (optional): Human-readable test description"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"tuple_file"})})," or ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"tuples"})}),": Test-specific relationship tuples (appended to global tuples)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"check"})}),": Authorization check tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"list_objects"})}),": List objects API tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"list_users"})}),": List users API tests"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"check-tests",children:"Check Tests"}),"\n",(0,i.jsx)(n.p,{children:"Validate whether a user has specific relations to an object:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'check:\n  - user: user:anne\n    object: document:1\n    context:                          # Optional: for ABAC conditions\n      current_time: "2023-05-03T21:25:23+00:00"\n      user_ip: "192.168.0.1"\n    assertions:\n      viewer: true                    # Expected result\n      editor: false\n      owner: false\n'})}),"\n",(0,i.jsx)(n.h4,{id:"list-objects-tests",children:"List Objects Tests"}),"\n",(0,i.jsx)(n.p,{children:"Validate which objects a user can access:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'list_objects:\n  - user: user:anne\n    type: document                    # Object type to query\n    context:                          # Optional context\n      current_time: "2023-05-03T21:25:23+00:00"\n    assertions:\n      viewer:                         # Objects user can view\n        - document:1\n        - document:2  \n      editor:                         # Objects user can edit\n        - document:1\n'})}),"\n",(0,i.jsx)(n.h4,{id:"list-users-tests",children:"List Users Tests"}),"\n",(0,i.jsx)(n.p,{children:"Validate which users have access to an object:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'list_users:\n  - object: document:1\n    user_filter:                      # Filter by user types\n      - type: user\n      - type: team\n    context:                          # Optional context\n      current_time: "2023-05-03T21:25:23+00:00"\n    assertions:\n      viewer:\n        users:\n          - user:anne\n          - user:bob\n'})}),"\n",(0,i.jsx)(n.h2,{id:"context-support-abac",children:"Context Support (ABAC)"}),"\n",(0,i.jsx)(n.p,{children:"The store file supports Attribute-Based Access Control (ABAC) through contextual information:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# In tuples - for conditional relationships\ntuples:\n  - user: user:anne\n    relation: viewer\n    object: document:1\n    condition:\n      name: non_expired_grant\n      context:\n        grant_timestamp: "2023-05-03T21:25:20+00:00"\n        grant_duration: "10m"\n\n# In tests - for contextual evaluations\ntests:\n  - name: "time-based-access"\n    check:\n      - user: user:anne\n        object: document:1\n        context:\n          current_timestamp: "2023-05-03T21:25:23+00:00"\n        assertions:\n          viewer: true\n'})}),"\n",(0,i.jsx)(n.h2,{id:"file-composition",children:"File Composition"}),"\n",(0,i.jsx)(n.p,{children:"The store file supports flexible composition:"}),"\n",(0,i.jsx)(n.h3,{id:"global--test-specific-data",children:"Global + Test-Specific Data"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Global tuples"}),": Applied to all tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test-specific tuples"}),": Appended to global tuples for individual tests"]}),"\n",(0,i.jsxs)(n.li,{children:["Both ",(0,i.jsx)(n.code,{children:"tuple_file"})," and ",(0,i.jsx)(n.code,{children:"tuples"})," can be used together"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"mixed-inline-and-file-references",children:"Mixed Inline and File References"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'name: "Mixed Example"\nmodel_file: "./model.fga"            # Model from file\ntuples:                              # Inline global tuples\n  - user: user:admin\n    relation: owner\n    object: system:main\ntests:\n  - name: "test-1"\n    tuple_file: "./test1-tuples.yaml" # Additional tuples from file\n    check:\n      - user: user:admin\n        object: system:main\n        assertions:\n          owner: true\n'})}),"\n",(0,i.jsx)(n.h2,{id:"cli-commands-using-store-files",children:"CLI Commands Using Store Files"}),"\n",(0,i.jsx)(n.h3,{id:"store-import",children:"Store Import"}),"\n",(0,i.jsx)(n.p,{children:"Import a complete store configuration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"fga store import --file store.fga.yaml\n"})}),"\n",(0,i.jsx)(n.h3,{id:"model-testing",children:"Model Testing"}),"\n",(0,i.jsx)(n.p,{children:"Run tests against an authorization model:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"fga model test --tests store.fga.yaml\n"})}),"\n",(0,i.jsx)(n.h3,{id:"store-export",children:"Store Export"}),"\n",(0,i.jsx)(n.p,{children:"Export store configuration to file:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"fga store export --store-id 01H0H015178Y2V4CX10C2KGHF4 > exported-store.fga.yaml\n"})}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"basic-store-file",children:"Basic Store File"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'name: "Document Management"\nmodel_file: "./authorization-model.fga"\ntuple_file: "./relationships.yaml"\ntests:\n  - name: "basic-permissions"\n    check:\n      - user: user:alice\n        object: document:readme\n        assertions:\n          viewer: true\n          editor: false\n'})}),"\n",(0,i.jsx)(n.h3,{id:"advanced-store-with-abac",children:"Advanced Store with ABAC"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'name: "Time-Based Access"\nmodel: |\n  model\n    schema 1.1\n  \n  type user\n  type document\n    relations\n      define viewer: [user with non_expired_grant]\n\n  condition non_expired_grant(current_time: timestamp, grant_time: timestamp, duration: duration) {\n    current_time < grant_time + duration\n  }\n\ntuples:\n  - user: user:bob\n    relation: viewer\n    object: document:secret\n    condition:\n      name: non_expired_grant\n      context:\n        grant_time: "2023-05-03T21:25:20+00:00"\n        duration: "1h"\n\ntests:\n  - name: "time-expiry-test"\n    check:\n      - user: user:bob\n        object: document:secret\n        context:\n          current_time: "2023-05-03T21:30:00+00:00"  # Within 1 hour\n        assertions:\n          viewer: true\n      - user: user:bob\n        object: document:secret  \n        context:\n          current_time: "2023-05-03T22:30:00+00:00"  # After 1 hour\n        assertions:\n          viewer: false\n'})}),"\n",(0,i.jsx)(n.h3,{id:"multi-test-store-file",children:"Multi-Test Store File"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'name: "Comprehensive Testing"\nmodel_file: "./model.fga"\ntuple_file: "./base-tuples.yaml"\n\ntests:\n  - name: "admin-permissions"\n    tuples:\n      - user: user:admin\n        relation: owner\n        object: system:config\n    check:\n      - user: user:admin\n        object: system:config\n        assertions:\n          owner: true\n          viewer: true\n    list_objects:\n      - user: user:admin\n        type: system\n        assertions:\n          owner:\n            - system:config\n\n  - name: "user-permissions" \n    tuple_file: "./user-test-tuples.yaml"\n    check:\n      - user: user:john\n        object: document:public\n        assertions:\n          viewer: true\n          editor: false\n    list_users:\n      - object: document:public\n        user_filter:\n          - type: user\n        assertions:\n          viewer:\n            users:\n              - user:john\n              - user:jane\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use descriptive names"}),": Make store and test names clear and meaningful"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Organize with external files"}),": For complex models, use separate ",(0,i.jsx)(n.code,{children:".fga"})," files for models and ",(0,i.jsx)(n.code,{children:".yaml"})," files for tuples"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Comprehensive testing"}),": Include check, list_objects, and list_users tests to validate all API behaviors"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Context testing"}),": When using ABAC, test both positive and negative cases with different context values"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Modular tuples"}),": Use both global and test-specific tuples to avoid repetition"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Version control"}),": Store files work well with Git for tracking authorization changes over time"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"file-extensions",children:"File Extensions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Store files"}),": ",(0,i.jsx)(n.code,{children:".fga.yaml"})," (recommended) or ",(0,i.jsx)(n.code,{children:".yaml"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Model files"}),": ",(0,i.jsx)(n.code,{children:".fga"})," (recommended) or ",(0,i.jsx)(n.code,{children:".mod"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tuple files"}),": ",(0,i.jsx)(n.code,{children:".yaml"}),", ",(0,i.jsx)(n.code,{children:".json"}),", or ",(0,i.jsx)(n.code,{children:".csv"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:".fga.yaml"})," extension is the conventional naming pattern that makes store files easily identifiable and helps with tooling integration."]}),"\n",(0,i.jsx)(r.XQ,{description:"Learn more about testing models",relatedLinks:[{title:"Testing Models",description:"Learn how to test your authorization models",link:"./testing",type:"tutorial"}]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);