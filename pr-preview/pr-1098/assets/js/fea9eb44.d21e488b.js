"use strict";(self.webpackChunkopenfga_dev=self.webpackChunkopenfga_dev||[]).push([[8191],{99424:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"content/best-practices/modeling-roles","title":"Modeling roles","description":"Various ways of modeling static and dynamic roles in FGA - both coarse and fine-grained.","source":"@site/docs/content/best-practices/modeling-roles.mdx","sourceDirName":"content/best-practices","slug":"/best-practices/modeling-roles","permalink":"/pr-preview/pr-1098/docs/best-practices/modeling-roles","draft":false,"unlisted":false,"editUrl":"https://github.com/openfga/openfga.dev/edit/main/docs/content/best-practices/modeling-roles.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Modeling roles","slug":"/best-practices/modeling-roles","description":"Various ways of modeling static and dynamic roles in FGA - both coarse and fine-grained.","sidebar_position":1},"sidebar":"docs","previous":{"title":"Modeling Best Practices","permalink":"/pr-preview/pr-1098/docs/best-practices/modeling"},"next":{"title":"Source of Truth","permalink":"/pr-preview/pr-1098/docs/best-practices/source-of-truth"}}');var r=s(74848),o=s(28453),t=s(25558);const l={title:"Modeling roles",slug:"/best-practices/modeling-roles",description:"Various ways of modeling static and dynamic roles in FGA - both coarse and fine-grained.",sidebar_position:1},a="Modeling Roles",d={},c=[{value:"When to Use Each Approach",id:"when-to-use-each-approach",level:2},{value:"Approach 1: Relations as Roles",id:"approach-1-relations-as-roles",level:2},{value:"Example: Organization Admin Role",id:"example-organization-admin-role",level:3},{value:"Adding Users to Roles",id:"adding-users-to-roles",level:3},{value:"Extending with Additional Roles",id:"extending-with-additional-roles",level:3},{value:"Pros and Cons",id:"pros-and-cons",level:3},{value:"Approach 2: Simple User-Defined Roles",id:"approach-2-simple-user-defined-roles",level:2},{value:"Example: Custom Project Admin Role",id:"example-custom-project-admin-role",level:3},{value:"Setting Up Custom Roles",id:"setting-up-custom-roles",level:3},{value:"Adding New Permissions",id:"adding-new-permissions",level:3},{value:"Pros and Cons",id:"pros-and-cons-1",level:3},{value:"Approach 3: Role Assignments",id:"approach-3-role-assignments",level:2},{value:"Example: Project-Specific Admin Roles",id:"example-project-specific-admin-roles",level:3},{value:"Step 1: Define the Role and its Permissions",id:"step-1-define-the-role-and-its-permissions",level:3},{value:"Step 2: Assign Users to a Role on an Entity",id:"step-2-assign-users-to-a-role-on-an-entity",level:3},{value:"Step 3: Connect to Your Objects",id:"step-3-connect-to-your-objects",level:3},{value:"Setting Up Role Assignments",id:"setting-up-role-assignments",level:3},{value:"Pros and Cons",id:"pros-and-cons-2",level:3},{value:"Choosing the Right Approach",id:"choosing-the-right-approach",level:2},{value:"Decision Tree",id:"decision-tree",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Related Sections",id:"related-sections",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"modeling-roles",children:"Modeling Roles"})}),"\n",(0,r.jsx)(n.p,{children:"Roles are a common way to group users and assign permissions to those groups. They can be used to simplify permission management, especially in larger systems where many users have similar access needs."}),"\n",(0,r.jsxs)(n.p,{children:["In this guide, we'll explore common approaches to modeling roles with ",(0,r.jsx)(t.bU,{format:t.Ed.ShortForm}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"when-to-use-each-approach",children:"When to Use Each Approach"}),"\n",(0,r.jsx)(n.p,{children:"Before diving into implementation details, here's a quick guide to help you choose the right approach:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Approach"}),(0,r.jsx)(n.th,{children:"Best For"}),(0,r.jsx)(n.th,{children:"Complexity"}),(0,r.jsx)(n.th,{children:"Flexibility"}),(0,r.jsx)(n.th,{children:"Example"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Relations as Roles"})}),(0,r.jsx)(n.td,{children:"Static, predefined roles"}),(0,r.jsx)(n.td,{children:"Low"}),(0,r.jsx)(n.td,{children:"Low"}),(0,r.jsx)(n.td,{children:"In all instances, company admins can view project information."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Simple User-Defined Roles"})}),(0,r.jsx)(n.td,{children:"User-defined roles at org level"}),(0,r.jsx)(n.td,{children:"Medium"}),(0,r.jsx)(n.td,{children:"Medium"}),(0,r.jsx)(n.td,{children:'Company Acme creates an "Auditor" role that is configured to view project information for all projects.'})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Role Assignments"})}),(0,r.jsx)(n.td,{children:"Instance-specific role assignments"}),(0,r.jsx)(n.td,{children:"High"}),(0,r.jsx)(n.td,{children:"High"}),(0,r.jsx)(n.td,{children:"In Company Acme, Anne can be a custom Auditor role for Projects 1 and 5, but Beth can be an Auditor on Project 3."})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"approach-1-relations-as-roles",children:"Approach 1: Relations as Roles"}),"\n",(0,r.jsx)(n.p,{children:"The simplest way to implement roles is to use directly assignable relations. They work well for roles that always exist and can be defined at development-time. Adding relations is straightforward, and you do not need to add roles very frequently. If roles are static, this is always the preferred approach."}),"\n",(0,r.jsx)(n.h3,{id:"example-organization-admin-role",children:"Example: Organization Admin Role"}),"\n",(0,r.jsxs)(n.p,{children:["In the model below, we define an ",(0,r.jsx)(n.code,{children:"admin"})," role at the organization level. Admins can edit billing details and create projects."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dsl.openfga",children:"model\n  schema 1.1\n\ntype user\n\ntype organization\n  relations\n    define admin: [user]\n    define can_create_project: admin\n    define can_edit_billing_details: admin\n"})}),"\n",(0,r.jsx)(n.h3,{id:"adding-users-to-roles",children:"Adding Users to Roles"}),"\n",(0,r.jsx)(n.p,{children:"To add users to the admin role, create a tuple like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"- user: user:anne\n  relation: admin\n  object: organization:acme\n"})}),"\n",(0,r.jsx)(n.h3,{id:"extending-with-additional-roles",children:"Extending with Additional Roles"}),"\n",(0,r.jsxs)(n.p,{children:["If later you need to add a ",(0,r.jsx)(n.code,{children:"project_admin"})," role with permissions to view/edit projects, the model evolves to:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dsl.openfga",children:"model\n  schema 1.1\n\ntype user\n\ntype organization\n  relations\n    define admin: [user]\n    define project_admin: [user]  # new role\n\n    # existing permissions\n    define can_edit_billing_details: admin \n    define can_create_project: admin or project_admin\n\n    # new permissions for project admins\n    define can_edit_project: admin or project_admin\n    define can_view_project: admin or project_admin\n"})}),"\n",(0,r.jsx)(n.h3,{id:"pros-and-cons",children:"Pros and Cons"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u2705 Advantages:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Simple to implement and understand"}),"\n",(0,r.jsx)(n.li,{children:"Fast evaluation performance"}),"\n",(0,r.jsx)(n.li,{children:"Clear authorization policies"}),"\n",(0,r.jsx)(n.li,{children:"No additional tuples needed when adding permissions"}),"\n",(0,r.jsx)(n.li,{children:"Role permissions are straightforward to change, regardless of scale"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u274c Disadvantages:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Roles must be predefined in the model"}),"\n",(0,r.jsx)(n.li,{children:"Not suitable for user-defined roles"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"approach-2-simple-user-defined-roles",children:"Approach 2: Simple User-Defined Roles"}),"\n",(0,r.jsx)(n.p,{children:"Many applications require the flexibility for end-users to define their own custom roles, in addition to any pre-defined roles. This approach enables organizations to tailor permissions to their specific needs."}),"\n",(0,r.jsx)(n.h3,{id:"example-custom-project-admin-role",children:"Example: Custom Project Admin Role"}),"\n",(0,r.jsx)(n.p,{children:"With the following model, your application can support both static roles and user-defined roles:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dsl.openfga",children:"model\n  schema 1.1\n\ntype user\n\ntype role\n  relations\n    define assignee: [user]\n\ntype organization\n  relations\n    define admin: [user]  # static role\n\n    # permissions can be assigned to custom roles or static roles\n    define can_create_project: [role#assignee] or admin \n    define can_edit_project: [role#assignee] or admin \n"})}),"\n",(0,r.jsx)(n.h3,{id:"setting-up-custom-roles",children:"Setting Up Custom Roles"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Define role permissions"})," by creating tuples that grant the role-specific permissions:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"- user: role:acme-project-admin#assignee\n  relation: can_create_project\n  object: organization:acme\n\n- user: role:acme-project-admin#assignee\n  relation: can_edit_project\n  object: organization:acme\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Assign users to the role"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"- user: user:anne\n  relation: assignee\n  object: role:acme-project-admin\n"})}),"\n",(0,r.jsx)(n.h3,{id:"adding-new-permissions",children:"Adding New Permissions"}),"\n",(0,r.jsx)(n.p,{children:"When you add new permissions to your model, existing roles don't automatically receive them:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dsl.openfga",children:"model\n  schema 1.1\n\ntype user\n\ntype role\n  relations\n    define assignee: [user]\n\ntype organization\n  relations\n    define admin: [user]\n    define can_create_project: [role#assignee] or admin \n    define can_edit_project: [role#assignee] or admin \n    define can_delete_project: [role#assignee] or admin  # new permission\n"})}),"\n",(0,r.jsx)(n.p,{children:"To grant the new permission to existing roles, create additional tuples:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"- user: role:acme-project-admin#assignee\n  relation: can_delete_project\n  object: organization:acme\n"})}),"\n",(0,r.jsx)(n.p,{children:"You do not need to add these tuples when adding the new permission. End-users will add the new permission to their custom roles when they find it appropriate."}),"\n",(0,r.jsx)(n.h3,{id:"pros-and-cons-1",children:"Pros and Cons"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u2705 Advantages:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Supports user-defined roles"}),"\n",(0,r.jsx)(n.li,{children:"Flexible permission assignment"}),"\n",(0,r.jsx)(n.li,{children:"No model changes needed for new role instances"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u274c Disadvantages:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"More complex than static relations"}),"\n",(0,r.jsx)(n.li,{children:"Requires additional tuples for role-permission mapping"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"approach-3-role-assignments",children:"Approach 3: Role Assignments"}),"\n",(0,r.jsx)(n.p,{children:"The previous approach works well when custom roles are global for the organization. However, if you need roles that can be attached to different object instances with different members for each instance, you need role assignments."}),"\n",(0,r.jsx)(n.h3,{id:"example-project-specific-admin-roles",children:"Example: Project-Specific Admin Roles"}),"\n",(0,r.jsx)(n.p,{children:'Let\'s say you want a "Project Admin" role where each project can have different admins, but the role permissions remain consistent.'}),"\n",(0,r.jsx)(n.h3,{id:"step-1-define-the-role-and-its-permissions",children:"Step 1: Define the Role and its Permissions"}),"\n",(0,r.jsxs)(n.p,{children:["Define a ",(0,r.jsx)(n.code,{children:"role"})," type where you list all the permissions that any role can have:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dsl.openfga",children:"model\n  schema 1.1\n\ntype role\n  relations\n    define can_view_project: [user:*]\n    define can_edit_project: [user:*]\n"})}),"\n",(0,r.jsxs)(n.p,{children:['A "Project Admin" role can have ',(0,r.jsx)(n.code,{children:"can_view_project"})," and ",(0,r.jsx)(n.code,{children:"can_edit_project"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# Project Admin role has both the can_view_project and can_edit_project assigned\n- user: user:*\n  relation: can_view_project\n  object: role:project-admin\n\n- user: user:*\n  relation: can_edit_project\n  object: role:project-admin\n"})}),"\n",(0,r.jsx)(n.h3,{id:"step-2-assign-users-to-a-role-on-an-entity",children:"Step 2: Assign Users to a Role on an Entity"}),"\n",(0,r.jsxs)(n.p,{children:["Add a ",(0,r.jsx)(n.code,{children:"role_assignment"})," type to assign users to the role:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dsl.openfga",children:"type role_assignment\n  relations\n    define assignee: [user]\n    define role: [role]\n\n    define can_view_project: assignee and can_view_project from role\n    define can_edit_project: assignee and can_edit_project from role\n"})}),"\n",(0,r.jsx)(n.h3,{id:"step-3-connect-to-your-objects",children:"Step 3: Connect to Your Objects"}),"\n",(0,r.jsxs)(n.p,{children:["Define an ",(0,r.jsx)(n.code,{children:"organization"})," type with an ",(0,r.jsx)(n.code,{children:"admin"})," role. Then, define a ",(0,r.jsx)(n.code,{children:"project"})," type that links to an ",(0,r.jsx)(n.code,{children:"organization"})," and a ",(0,r.jsx)(n.code,{children:"role_assignment"}),". Note that we are combining a static ",(0,r.jsx)(n.code,{children:"admin"})," role with custom role assignments. We recommend to always use static roles when they are known in advance."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dsl.openfga",children:"type organization \n  relations\n    define admin: [user]\n\ntype project\n  relations\n    define organization: [organization]\n    define role_assignment: [role_assignment]\n    \n    # combine role assignments and static roles\n    define can_edit_project: can_edit_project from role_assignment or admin from organization\n    define can_view_project: can_view_project from role_assignment or admin from organization\n"})}),"\n",(0,r.jsx)(n.h3,{id:"setting-up-role-assignments",children:"Setting Up Role Assignments"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Create the role assignment instance"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"- user: user:anne\n  relation: assignee\n  object: role_assignment:project-admin-openfga\n\n- user: role:project-admin  \n  relation: role\n  object: role_assignment:project-admin-openfga\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Link the role assignment to the project"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"- user: role_assignment:project-admin-openfga\n  relation: role_assignment\n  object: project:openfga\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Link the project to an organization"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"- user: organization:acme\n  relation: organization\n  object: project:openfga\n"})}),"\n",(0,r.jsx)(n.h3,{id:"pros-and-cons-2",children:"Pros and Cons"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u2705 Advantages:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Maximum flexibility for instance-specific roles"}),"\n",(0,r.jsx)(n.li,{children:"Reusable role definitions across different objects"}),"\n",(0,r.jsx)(n.li,{children:"Fine-grained control over role membership"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u274c Disadvantages:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Most complex approach to implement"}),"\n",(0,r.jsx)(n.li,{children:"Requires careful planning of the role hierarchy"}),"\n",(0,r.jsx)(n.li,{children:"More tuples needed for setup and maintenance"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"choosing-the-right-approach",children:"Choosing the Right Approach"}),"\n",(0,r.jsx)(n.h3,{id:"decision-tree",children:"Decision Tree"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Do you need user-defined roles?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["No \u2192 Use ",(0,r.jsx)(n.strong,{children:"Relations as Roles"})]}),"\n",(0,r.jsx)(n.li,{children:"Yes \u2192 Continue to step 2"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Do roles need different members per object instance?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["No \u2192 Use ",(0,r.jsx)(n.strong,{children:"Simple User-Defined Roles"})]}),"\n",(0,r.jsxs)(n.li,{children:["Yes \u2192 Use ",(0,r.jsx)(n.strong,{children:"Role Assignments"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Relations as Roles"}),": Fastest evaluation"]}),"\n",(0,r.jsxs)(n.li,{children:["*",(0,r.jsx)(n.strong,{children:"Simple User-Defined Roles"}),": Moderate performance impact"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Role Assignments"}),": Highest performance impact"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Start simple"}),": Begin with relations as roles and evolve as needed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Hybrid approach"}),": Combine static relations for well-known roles with dynamic roles for custom ones"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Documentation"}),": Clearly document your role model for your team"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Functional Testing"}),": ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-1098/docs/modeling/testing",children:"Write tests"})," to verify your model behaves as expected"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance Testing"}),": Test performance with realistic data volumes"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-sections",children:"Related Sections"}),"\n",(0,r.jsx)(t.XQ,{description:"Check out these related resources for more information about adopting OpenFGA.",relatedLinks:[{title:"Custom Roles Step by Step",description:"Follow a detailed walkthrough of implementing custom roles.",link:"../modeling/custom-roles"},{title:"Multi-tenant RBAC Example",description:"See a complete multi-tenant role-based access control implementation.",link:"https://github.com/openfga/sample-stores/blob/main/stores/multitenant-rbac"},{title:"Role Assignments Example",description:"Explore a full role assignments implementation.",link:"https://github.com/openfga/sample-stores/tree/main/stores/role-assignments"}]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);